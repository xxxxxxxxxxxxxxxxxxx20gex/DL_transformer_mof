/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




// used to set import/export for Cygwin DLLs
#ifdef WIN32
#define USING_OBDLL
#endif


#include <openbabel/obutil.h>
#include <openbabel/math/vector3.h>
#include <openbabel/math/matrix3x3.h>
#include <openbabel/math/transform3d.h>
#include <openbabel/math/spacegroup.h>

#include <openbabel/generic.h>
#include <openbabel/griddata.h>

#include <openbabel/base.h>
#include <openbabel/elements.h>
#include <openbabel/mol.h>
#include <openbabel/atom.h>
#include <openbabel/bond.h>
#include <openbabel/reaction.h>
#include <openbabel/residue.h>
#include <openbabel/internalcoord.h>

#include <openbabel/ring.h>
#include <openbabel/obconversion.h>
#include <openbabel/oberror.h>
#include <openbabel/plugin.h>
#include <openbabel/fingerprint.h>
#include <openbabel/descriptor.h>
#include <openbabel/format.h>

#include <openbabel/forcefield.h>
#include <openbabel/builder.h>
#include <openbabel/op.h>

#include <openbabel/bitvec.h>
#include <openbabel/data.h>
#include <openbabel/parsmart.h>
#include <openbabel/alias.h>

#include <openbabel/kinetics.h>
#include <openbabel/rotor.h>
#include <openbabel/rotamer.h>
#include <openbabel/spectrophore.h>

#include <openbabel/chargemodel.h>
#include <openbabel/graphsym.h>
#include <openbabel/isomorphism.h>
#include <openbabel/query.h>
#include <openbabel/canon.h>

#include <openbabel/stereo/tetrahedral.h>
#include <openbabel/stereo/cistrans.h>
#include <openbabel/stereo/squareplanar.h>
#include <openbabel/stereo/bindings.h>

#include <openbabel/chains.h>
#include <openbabel/obiter.h>


#include <openbabel/conformersearch.h>
#include <openbabel/math/align.h>


#include <typeinfo>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <utility>

SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned int >::const_reference std_vector_Sl_unsigned_SS_int_Sg__get(std::vector< unsigned int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__set(std::vector< unsigned int > *self,int i,std::vector< unsigned int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< int > >::const_reference std_vector_Sl_std_vector_Sl_int_Sg__Sg__get(std::vector< std::vector< int > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__set(std::vector< std::vector< int > > *self,int i,std::vector< std::vector< int > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OpenBabel::vector3 >::const_reference std_vector_Sl_OpenBabel_vector3_Sg__get(std::vector< OpenBabel::vector3 > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_vector3_Sg__set(std::vector< OpenBabel::vector3 > *self,int i,std::vector< OpenBabel::vector3 >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< OpenBabel::vector3 > >::const_reference std_vector_Sl_std_vector_Sl_OpenBabel_vector3_Sg__Sg__get(std::vector< std::vector< OpenBabel::vector3 > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_OpenBabel_vector3_Sg__Sg__set(std::vector< std::vector< OpenBabel::vector3 > > *self,int i,std::vector< std::vector< OpenBabel::vector3 > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OpenBabel::OBMol >::const_reference std_vector_Sl_OpenBabel_OBMol_Sg__get(std::vector< OpenBabel::OBMol > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_OBMol_Sg__set(std::vector< OpenBabel::OBMol > *self,int i,std::vector< OpenBabel::OBMol >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OpenBabel::OBBond >::const_reference std_vector_Sl_OpenBabel_OBBond_Sg__get(std::vector< OpenBabel::OBBond > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_OBBond_Sg__set(std::vector< OpenBabel::OBBond > *self,int i,std::vector< OpenBabel::OBBond >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OpenBabel::OBResidue >::const_reference std_vector_Sl_OpenBabel_OBResidue_Sg__get(std::vector< OpenBabel::OBResidue > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_OBResidue_Sg__set(std::vector< OpenBabel::OBResidue > *self,int i,std::vector< OpenBabel::OBResidue >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OpenBabel::OBRing >::const_reference std_vector_Sl_OpenBabel_OBRing_Sg__get(std::vector< OpenBabel::OBRing > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_OBRing_Sg__set(std::vector< OpenBabel::OBRing > *self,int i,std::vector< OpenBabel::OBRing >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OpenBabel::OBRing * >::const_reference std_vector_Sl_OpenBabel_OBRing_Sm__Sg__get(std::vector< OpenBabel::OBRing * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_OBRing_Sm__Sg__set(std::vector< OpenBabel::OBRing * > *self,int i,std::vector< OpenBabel::OBRing * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OpenBabel::OBGenericData * >::const_reference std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__get(std::vector< OpenBabel::OBGenericData * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__set(std::vector< OpenBabel::OBGenericData * > *self,int i,std::vector< OpenBabel::OBGenericData * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OpenBabel::OBInternalCoord * >::const_reference std_vector_Sl_OpenBabel_OBInternalCoord_Sm__Sg__get(std::vector< OpenBabel::OBInternalCoord * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_OBInternalCoord_Sm__Sg__set(std::vector< OpenBabel::OBInternalCoord * > *self,int i,std::vector< OpenBabel::OBInternalCoord * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< unsigned int,unsigned int > >::const_reference std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__get(std::vector< std::pair< unsigned int,unsigned int > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__set(std::vector< std::pair< unsigned int,unsigned int > > *self,int i,std::vector< std::pair< unsigned int,unsigned int > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::const_reference std_vector_Sl_std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__Sg__get(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__Sg__set(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *self,int i,std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
 // can not use macro -- AliasData not OBAliasData
OpenBabel::AliasData *toAliasData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::AliasData*) data;
}


OpenBabel::OBAngleData *toAngleData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBAngleData *) data;
}


OpenBabel::OBCommentData *toCommentData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBCommentData *) data;
}


OpenBabel::OBConformerData *toConformerData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBConformerData *) data;
}


OpenBabel::OBExternalBondData *toExternalBondData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBExternalBondData *) data;
}


OpenBabel::OBGridData *toGridData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBGridData *) data;
}


OpenBabel::OBMatrixData *toMatrixData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBMatrixData *) data;
}


OpenBabel::OBNasaThermoData *toNasaThermoData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBNasaThermoData *) data;
}


OpenBabel::OBPairData *toPairData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBPairData *) data;
}


OpenBabel::OBRateData *toRateData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBRateData *) data;
}


OpenBabel::OBRotamerList *toRotamerList(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBRotamerList *) data;
}


OpenBabel::OBRotationData *toRotationData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBRotationData *) data;
}


OpenBabel::OBSerialNums *toSerialNums(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBSerialNums *) data;
}


OpenBabel::OBSetData *toSetData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBSetData *) data;
}


OpenBabel::OBSymmetryData *toSymmetryData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBSymmetryData *) data;
}


OpenBabel::OBTorsionData *toTorsionData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBTorsionData *) data;
}


OpenBabel::OBUnitCell *toUnitCell(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBUnitCell *) data;
}


OpenBabel::OBVectorData *toVectorData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBVectorData *) data;
}


OpenBabel::OBVibrationData *toVibrationData(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBVibrationData *) data;
}


OpenBabel::OBVirtualBond *toVirtualBond(OpenBabel::OBGenericData *data) {
    return (OpenBabel::OBVirtualBond *) data;
}

SWIGINTERN void OpenBabel_OBTetrahedralStereo_SetConfig(OpenBabel::OBTetrahedralStereo *self,OpenBabel::OBTetrahedralConfig const &config){
    self->SetConfig(OpenBabel::OBTetrahedralConfig::Convert(config));
  }
SWIGINTERN OpenBabel::OBTetrahedralConfig OpenBabel_OBTetrahedralStereo_GetConfig__SWIG_0(OpenBabel::OBTetrahedralStereo *self,OpenBabel::OBStereo::Winding winding=OpenBabel::OBStereo::Clockwise,OpenBabel::OBStereo::View view=OpenBabel::OBStereo::ViewFrom){
    OpenBabel::OBTetrahedralStereo::Config cConfig = self->GetConfig(winding, view);
    
    OpenBabel::OBTetrahedralConfig pyConfig;
    pyConfig.center = cConfig.center;
    pyConfig.from_or_towards = cConfig.from;
    pyConfig.refs = cConfig.refs;
    pyConfig.winding = cConfig.winding;
    pyConfig.view = cConfig.view;
    pyConfig.specified = cConfig.specified;

    return pyConfig;
  }
SWIGINTERN OpenBabel::OBTetrahedralConfig OpenBabel_OBTetrahedralStereo_GetConfig__SWIG_3(OpenBabel::OBTetrahedralStereo *self,unsigned long from_or_towards,OpenBabel::OBStereo::Winding winding=OpenBabel::OBStereo::Clockwise,OpenBabel::OBStereo::View view=OpenBabel::OBStereo::ViewFrom){
    OpenBabel::OBTetrahedralStereo::Config cConfig = self->GetConfig(from_or_towards, winding, view);
    
    OpenBabel::OBTetrahedralConfig pyConfig;
    pyConfig.center = cConfig.center;
    pyConfig.from_or_towards = cConfig.from;
    pyConfig.refs = cConfig.refs;
    pyConfig.winding = cConfig.winding;
    pyConfig.view = cConfig.view;
    pyConfig.specified = cConfig.specified;

    return pyConfig;
  }
SWIGINTERN void OpenBabel_OBCisTransStereo_SetConfig(OpenBabel::OBCisTransStereo *self,OpenBabel::OBCisTransConfig const &config){
    self->SetConfig(OpenBabel::OBCisTransConfig::Convert(config));
  }
SWIGINTERN OpenBabel::OBCisTransConfig OpenBabel_OBCisTransStereo_GetConfig__SWIG_0(OpenBabel::OBCisTransStereo *self,OpenBabel::OBStereo::Shape shape=OpenBabel::OBStereo::ShapeU){
    OpenBabel::OBCisTransStereo::Config cConfig = self->GetConfig(shape);
  
    OpenBabel::OBCisTransConfig pyConfig;
    pyConfig.begin = cConfig.begin;
    pyConfig.end = cConfig.end;
    pyConfig.refs = cConfig.refs;
    pyConfig.shape = cConfig.shape;
    pyConfig.specified = cConfig.specified;

    return pyConfig;
  }
SWIGINTERN OpenBabel::OBCisTransConfig OpenBabel_OBCisTransStereo_GetConfig__SWIG_2(OpenBabel::OBCisTransStereo *self,unsigned long start,OpenBabel::OBStereo::Shape shape=OpenBabel::OBStereo::ShapeU){
    OpenBabel::OBCisTransStereo::Config cConfig = self->GetConfig(start, shape);
  
    OpenBabel::OBCisTransConfig pyConfig;
    pyConfig.begin = cConfig.begin;
    pyConfig.end = cConfig.end;
    pyConfig.refs = cConfig.refs;
    pyConfig.shape = cConfig.shape;
    pyConfig.specified = cConfig.specified;

    return pyConfig;
  }
SWIGINTERN void OpenBabel_OBSquarePlanarStereo_SetConfig(OpenBabel::OBSquarePlanarStereo *self,OpenBabel::OBSquarePlanarConfig const &config){
    self->SetConfig(OpenBabel::OBSquarePlanarConfig::Convert(config));
  }
SWIGINTERN OpenBabel::OBSquarePlanarConfig OpenBabel_OBSquarePlanarStereo_GetConfig__SWIG_0(OpenBabel::OBSquarePlanarStereo *self,OpenBabel::OBStereo::Shape shape=OpenBabel::OBStereo::ShapeU){
    OpenBabel::OBSquarePlanarStereo::Config cConfig = self->GetConfig(shape);
  
    OpenBabel::OBSquarePlanarConfig pyConfig;
    pyConfig.center = cConfig.center;
    pyConfig.refs = cConfig.refs;
    pyConfig.shape = cConfig.shape;
    pyConfig.specified = cConfig.specified;

    return pyConfig;
  }
SWIGINTERN OpenBabel::OBSquarePlanarConfig OpenBabel_OBSquarePlanarStereo_GetConfig__SWIG_2(OpenBabel::OBSquarePlanarStereo *self,unsigned long start,OpenBabel::OBStereo::Shape shape=OpenBabel::OBStereo::ShapeU){
    OpenBabel::OBSquarePlanarStereo::Config cConfig = self->GetConfig(start, shape);
  
    OpenBabel::OBSquarePlanarConfig pyConfig;
    pyConfig.center = cConfig.center;
    pyConfig.refs = cConfig.refs;
    pyConfig.shape = cConfig.shape;
    pyConfig.specified = cConfig.specified;

    return pyConfig;
  }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< int > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< int > *)new std::vector< int >(); *(std::vector< int > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::vector< int >::size_type arg1 ; std::vector< int > *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1;  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorInt_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< int > *arg1 = (std::vector< int > *) 0 ; std::vector< int >::size_type result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< int > **)&jarg1;  result = ((std::vector< int > const *)arg1)->size();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorInt_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ; std::vector< int >::size_type arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< int > **)&jarg1;  arg2 = (std::vector< int >::size_type)jarg2;  (arg1)->reserve(arg2); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorInt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; std::vector< int > *arg1 = (std::vector< int > *) 0 ; int arg2 ;
  std::vector< int >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2;  try { result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = (jint)*result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ; int arg2 ; std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2;  temp3 = (std::vector< int >::value_type)jarg3;  arg3 = &temp3;  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1vectorInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ; (void)jenv; (void)jcls; arg1 = *(std::vector< int > **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorUnsignedInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< unsigned int > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
  *(std::vector< unsigned int > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorUnsignedInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::vector< unsigned int >::size_type arg1 ; std::vector< unsigned int > *result = 0 ; (void)jenv;
  (void)jcls; arg1 = (std::vector< unsigned int >::size_type)jarg1; 
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1);
  *(std::vector< unsigned int > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorUnsignedInt_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1;  result = ((std::vector< unsigned int > const *)arg1)->size();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorUnsignedInt_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ; std::vector< unsigned int >::size_type arg2 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< unsigned int > **)&jarg1; 
  arg2 = (std::vector< unsigned int >::size_type)jarg2;  (arg1)->reserve(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorUnsignedInt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ; int arg2 ;
  std::vector< unsigned int >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1;  arg2 = (int)jarg2;  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_unsigned_SS_int_Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = (jlong)*result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorUnsignedInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ; int arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ; std::vector< unsigned int >::value_type temp3 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< unsigned int > **)&jarg1;  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned int >::value_type)jarg3;  arg3 = &temp3;  try {
    std_vector_Sl_unsigned_SS_int_Sg__set(arg1,arg2,(unsigned int const &)*arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1vectorUnsignedInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector< unsigned int > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorvInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< std::vector< int > > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >();
  *(std::vector< std::vector< int > > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorvInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::vector< std::vector< int > >::size_type arg1 ; std::vector< std::vector< int > > *result = 0 ;
  (void)jenv; (void)jcls; arg1 = (std::vector< std::vector< int > >::size_type)jarg1; 
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >(arg1);
  *(std::vector< std::vector< int > > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorvInt_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1;  result = ((std::vector< std::vector< int > > const *)arg1)->size();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorvInt_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1;  arg2 = (std::vector< std::vector< int > >::size_type)jarg2; 
  (arg1)->reserve(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorvInt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ; int arg2 ;
  std::vector< std::vector< int > >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1;  arg2 = (int)jarg2;  try {
    result = (std::vector< std::vector< int > >::value_type *) &std_vector_Sl_std_vector_Sl_int_Sg__Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< std::vector< int > >::value_type **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorvInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ; int arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::vector< int > >::value_type **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > >::value_type const & reference is null");
    return ; }   try { std_vector_Sl_std_vector_Sl_int_Sg__Sg__set(arg1,arg2,(std::vector< int > const &)*arg3);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1vectorvInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< double > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< double > *)new std::vector< double >(); *(std::vector< double > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::vector< double >::size_type arg1 ; std::vector< double > *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (std::vector< double >::size_type)jarg1;  result = (std::vector< double > *)new std::vector< double >(arg1);
  *(std::vector< double > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorDouble_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< double > *arg1 = (std::vector< double > *) 0 ; std::vector< double >::size_type result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->size(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorDouble_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ; std::vector< double >::size_type arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< double > **)&jarg1;  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorDouble_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; std::vector< double > *arg1 = (std::vector< double > *) 0 ; int arg2 ;
  std::vector< double >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1;  arg2 = (int)jarg2;  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; }  jresult = (jdouble)*result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorDouble_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ; int arg2 ; std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2;  temp3 = (std::vector< double >::value_type)jarg3;  arg3 = &temp3;  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1vectorDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ; (void)jenv; (void)jcls; arg1 = *(std::vector< double > **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< std::string > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >(); *(std::vector< std::string > **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::vector< std::string >::size_type arg1 ; std::vector< std::string > *result = 0 ; (void)jenv;
  (void)jcls; arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorString_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorString_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; std::vector< std::string >::size_type arg2 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2;  (arg1)->reserve(arg2); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ; std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; int arg2 ;
  std::vector< std::string >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;  arg2 = (int)jarg2;  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = jenv->NewStringUTF(result->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;  arg2 = (int)jarg2;  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try { std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1vectorString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorVector3_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< OpenBabel::vector3 > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< OpenBabel::vector3 > *)new std::vector< OpenBabel::vector3 >();
  *(std::vector< OpenBabel::vector3 > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorVector3_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::vector< OpenBabel::vector3 >::size_type arg1 ; std::vector< OpenBabel::vector3 > *result = 0 ;
  (void)jenv; (void)jcls; arg1 = (std::vector< OpenBabel::vector3 >::size_type)jarg1; 
  result = (std::vector< OpenBabel::vector3 > *)new std::vector< OpenBabel::vector3 >(arg1);
  *(std::vector< OpenBabel::vector3 > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorVector3_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< OpenBabel::vector3 > *arg1 = (std::vector< OpenBabel::vector3 > *) 0 ;
  std::vector< OpenBabel::vector3 >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::vector3 > **)&jarg1;  result = ((std::vector< OpenBabel::vector3 > const *)arg1)->size();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorVector3_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OpenBabel::vector3 > *arg1 = (std::vector< OpenBabel::vector3 > *) 0 ;
  std::vector< OpenBabel::vector3 >::size_type arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::vector3 > **)&jarg1;  arg2 = (std::vector< OpenBabel::vector3 >::size_type)jarg2; 
  (arg1)->reserve(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorVector3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< OpenBabel::vector3 > *arg1 = (std::vector< OpenBabel::vector3 > *) 0 ; int arg2 ;
  std::vector< OpenBabel::vector3 >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::vector3 > **)&jarg1;  arg2 = (int)jarg2;  try {
    result = (std::vector< OpenBabel::vector3 >::value_type *) &std_vector_Sl_OpenBabel_vector3_Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< OpenBabel::vector3 >::value_type **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorVector3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OpenBabel::vector3 > *arg1 = (std::vector< OpenBabel::vector3 > *) 0 ; int arg2 ;
  std::vector< OpenBabel::vector3 >::value_type *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(std::vector< OpenBabel::vector3 > **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OpenBabel::vector3 >::value_type **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::vector3 >::value_type const & reference is null");
    return ; }   try { std_vector_Sl_OpenBabel_vector3_Sg__set(arg1,arg2,(OpenBabel::vector3 const &)*arg3);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1vectorVector3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OpenBabel::vector3 > *arg1 = (std::vector< OpenBabel::vector3 > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector< OpenBabel::vector3 > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorvVector3_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< std::vector< OpenBabel::vector3 > > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< std::vector< OpenBabel::vector3 > > *)new std::vector< std::vector< OpenBabel::vector3 > >();
  *(std::vector< std::vector< OpenBabel::vector3 > > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorvVector3_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::vector< std::vector< OpenBabel::vector3 > >::size_type arg1 ;
  std::vector< std::vector< OpenBabel::vector3 > > *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (std::vector< std::vector< OpenBabel::vector3 > >::size_type)jarg1; 
  result = (std::vector< std::vector< OpenBabel::vector3 > > *)new std::vector< std::vector< OpenBabel::vector3 > >(arg1);
  *(std::vector< std::vector< OpenBabel::vector3 > > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorvVector3_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< OpenBabel::vector3 > > *arg1 = (std::vector< std::vector< OpenBabel::vector3 > > *) 0 ;
  std::vector< std::vector< OpenBabel::vector3 > >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::vector< OpenBabel::vector3 > > **)&jarg1; 
  result = ((std::vector< std::vector< OpenBabel::vector3 > > const *)arg1)->size(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorvVector3_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< OpenBabel::vector3 > > *arg1 = (std::vector< std::vector< OpenBabel::vector3 > > *) 0 ;
  std::vector< std::vector< OpenBabel::vector3 > >::size_type arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::vector< OpenBabel::vector3 > > **)&jarg1; 
  arg2 = (std::vector< std::vector< OpenBabel::vector3 > >::size_type)jarg2;  (arg1)->reserve(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorvVector3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< OpenBabel::vector3 > > *arg1 = (std::vector< std::vector< OpenBabel::vector3 > > *) 0 ; int arg2 ;
  std::vector< std::vector< OpenBabel::vector3 > >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::vector< OpenBabel::vector3 > > **)&jarg1;  arg2 = (int)jarg2;  try {
    result = (std::vector< std::vector< OpenBabel::vector3 > >::value_type *) &std_vector_Sl_std_vector_Sl_OpenBabel_vector3_Sg__Sg__get(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< std::vector< OpenBabel::vector3 > >::value_type **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorvVector3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< OpenBabel::vector3 > > *arg1 = (std::vector< std::vector< OpenBabel::vector3 > > *) 0 ; int arg2 ;
  std::vector< std::vector< OpenBabel::vector3 > >::value_type *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(std::vector< std::vector< OpenBabel::vector3 > > **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::vector< OpenBabel::vector3 > >::value_type **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< OpenBabel::vector3 > >::value_type const & reference is null");
    return ; }   try {
    std_vector_Sl_std_vector_Sl_OpenBabel_vector3_Sg__Sg__set(arg1,arg2,(std::vector< OpenBabel::vector3 > const &)*arg3);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1vectorvVector3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< OpenBabel::vector3 > > *arg1 = (std::vector< std::vector< OpenBabel::vector3 > > *) 0 ; (void)jenv;
  (void)jcls; arg1 = *(std::vector< std::vector< OpenBabel::vector3 > > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorOBMol_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBMol > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< OpenBabel::OBMol > *)new std::vector< OpenBabel::OBMol >();
  *(std::vector< OpenBabel::OBMol > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorOBMol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBMol >::size_type arg1 ; std::vector< OpenBabel::OBMol > *result = 0 ;
  (void)jenv; (void)jcls; arg1 = (std::vector< OpenBabel::OBMol >::size_type)jarg1; 
  result = (std::vector< OpenBabel::OBMol > *)new std::vector< OpenBabel::OBMol >(arg1);
  *(std::vector< OpenBabel::OBMol > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorOBMol_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBMol > *arg1 = (std::vector< OpenBabel::OBMol > *) 0 ;
  std::vector< OpenBabel::OBMol >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBMol > **)&jarg1;  result = ((std::vector< OpenBabel::OBMol > const *)arg1)->size();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorOBMol_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OpenBabel::OBMol > *arg1 = (std::vector< OpenBabel::OBMol > *) 0 ;
  std::vector< OpenBabel::OBMol >::size_type arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBMol > **)&jarg1;  arg2 = (std::vector< OpenBabel::OBMol >::size_type)jarg2; 
  (arg1)->reserve(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorOBMol_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBMol > *arg1 = (std::vector< OpenBabel::OBMol > *) 0 ; int arg2 ;
  std::vector< OpenBabel::OBMol >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBMol > **)&jarg1;  arg2 = (int)jarg2;  try {
    result = (std::vector< OpenBabel::OBMol >::value_type *) &std_vector_Sl_OpenBabel_OBMol_Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< OpenBabel::OBMol >::value_type **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorOBMol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OpenBabel::OBMol > *arg1 = (std::vector< OpenBabel::OBMol > *) 0 ; int arg2 ;
  std::vector< OpenBabel::OBMol >::value_type *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(std::vector< OpenBabel::OBMol > **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OpenBabel::OBMol >::value_type **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBMol >::value_type const & reference is null");
    return ; }   try { std_vector_Sl_OpenBabel_OBMol_Sg__set(arg1,arg2,(OpenBabel::OBMol const &)*arg3);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1vectorOBMol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OpenBabel::OBMol > *arg1 = (std::vector< OpenBabel::OBMol > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector< OpenBabel::OBMol > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorOBBond_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBBond > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< OpenBabel::OBBond > *)new std::vector< OpenBabel::OBBond >();
  *(std::vector< OpenBabel::OBBond > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorOBBond_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBBond >::size_type arg1 ; std::vector< OpenBabel::OBBond > *result = 0 ;
  (void)jenv; (void)jcls; arg1 = (std::vector< OpenBabel::OBBond >::size_type)jarg1; 
  result = (std::vector< OpenBabel::OBBond > *)new std::vector< OpenBabel::OBBond >(arg1);
  *(std::vector< OpenBabel::OBBond > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorOBBond_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBBond > *arg1 = (std::vector< OpenBabel::OBBond > *) 0 ;
  std::vector< OpenBabel::OBBond >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBBond > **)&jarg1;  result = ((std::vector< OpenBabel::OBBond > const *)arg1)->size();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorOBBond_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OpenBabel::OBBond > *arg1 = (std::vector< OpenBabel::OBBond > *) 0 ;
  std::vector< OpenBabel::OBBond >::size_type arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBBond > **)&jarg1;  arg2 = (std::vector< OpenBabel::OBBond >::size_type)jarg2; 
  (arg1)->reserve(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorOBBond_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBBond > *arg1 = (std::vector< OpenBabel::OBBond > *) 0 ; int arg2 ;
  std::vector< OpenBabel::OBBond >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBBond > **)&jarg1;  arg2 = (int)jarg2;  try {
    result = (std::vector< OpenBabel::OBBond >::value_type *) &std_vector_Sl_OpenBabel_OBBond_Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< OpenBabel::OBBond >::value_type **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorOBBond_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OpenBabel::OBBond > *arg1 = (std::vector< OpenBabel::OBBond > *) 0 ; int arg2 ;
  std::vector< OpenBabel::OBBond >::value_type *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(std::vector< OpenBabel::OBBond > **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OpenBabel::OBBond >::value_type **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBBond >::value_type const & reference is null");
    return ; }   try { std_vector_Sl_OpenBabel_OBBond_Sg__set(arg1,arg2,(OpenBabel::OBBond const &)*arg3);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1vectorOBBond(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OpenBabel::OBBond > *arg1 = (std::vector< OpenBabel::OBBond > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector< OpenBabel::OBBond > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorOBResidue_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBResidue > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< OpenBabel::OBResidue > *)new std::vector< OpenBabel::OBResidue >();
  *(std::vector< OpenBabel::OBResidue > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorOBResidue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBResidue >::size_type arg1 ; std::vector< OpenBabel::OBResidue > *result = 0 ;
  (void)jenv; (void)jcls; arg1 = (std::vector< OpenBabel::OBResidue >::size_type)jarg1; 
  result = (std::vector< OpenBabel::OBResidue > *)new std::vector< OpenBabel::OBResidue >(arg1);
  *(std::vector< OpenBabel::OBResidue > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorOBResidue_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBResidue > *arg1 = (std::vector< OpenBabel::OBResidue > *) 0 ;
  std::vector< OpenBabel::OBResidue >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBResidue > **)&jarg1;  result = ((std::vector< OpenBabel::OBResidue > const *)arg1)->size();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorOBResidue_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OpenBabel::OBResidue > *arg1 = (std::vector< OpenBabel::OBResidue > *) 0 ;
  std::vector< OpenBabel::OBResidue >::size_type arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBResidue > **)&jarg1;  arg2 = (std::vector< OpenBabel::OBResidue >::size_type)jarg2; 
  (arg1)->reserve(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorOBResidue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBResidue > *arg1 = (std::vector< OpenBabel::OBResidue > *) 0 ; int arg2 ;
  std::vector< OpenBabel::OBResidue >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBResidue > **)&jarg1;  arg2 = (int)jarg2;  try {
    result = (std::vector< OpenBabel::OBResidue >::value_type *) &std_vector_Sl_OpenBabel_OBResidue_Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< OpenBabel::OBResidue >::value_type **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorOBResidue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OpenBabel::OBResidue > *arg1 = (std::vector< OpenBabel::OBResidue > *) 0 ; int arg2 ;
  std::vector< OpenBabel::OBResidue >::value_type *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(std::vector< OpenBabel::OBResidue > **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OpenBabel::OBResidue >::value_type **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBResidue >::value_type const & reference is null");
    return ; }   try { std_vector_Sl_OpenBabel_OBResidue_Sg__set(arg1,arg2,(OpenBabel::OBResidue const &)*arg3);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1vectorOBResidue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OpenBabel::OBResidue > *arg1 = (std::vector< OpenBabel::OBResidue > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector< OpenBabel::OBResidue > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorOBRing_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBRing > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< OpenBabel::OBRing > *)new std::vector< OpenBabel::OBRing >();
  *(std::vector< OpenBabel::OBRing > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorOBRing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBRing >::size_type arg1 ; std::vector< OpenBabel::OBRing > *result = 0 ;
  (void)jenv; (void)jcls; arg1 = (std::vector< OpenBabel::OBRing >::size_type)jarg1; 
  result = (std::vector< OpenBabel::OBRing > *)new std::vector< OpenBabel::OBRing >(arg1);
  *(std::vector< OpenBabel::OBRing > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorOBRing_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBRing > *arg1 = (std::vector< OpenBabel::OBRing > *) 0 ;
  std::vector< OpenBabel::OBRing >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBRing > **)&jarg1;  result = ((std::vector< OpenBabel::OBRing > const *)arg1)->size();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorOBRing_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OpenBabel::OBRing > *arg1 = (std::vector< OpenBabel::OBRing > *) 0 ;
  std::vector< OpenBabel::OBRing >::size_type arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBRing > **)&jarg1;  arg2 = (std::vector< OpenBabel::OBRing >::size_type)jarg2; 
  (arg1)->reserve(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorOBRing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBRing > *arg1 = (std::vector< OpenBabel::OBRing > *) 0 ; int arg2 ;
  std::vector< OpenBabel::OBRing >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBRing > **)&jarg1;  arg2 = (int)jarg2;  try {
    result = (std::vector< OpenBabel::OBRing >::value_type *) &std_vector_Sl_OpenBabel_OBRing_Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< OpenBabel::OBRing >::value_type **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorOBRing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OpenBabel::OBRing > *arg1 = (std::vector< OpenBabel::OBRing > *) 0 ; int arg2 ;
  std::vector< OpenBabel::OBRing >::value_type *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(std::vector< OpenBabel::OBRing > **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OpenBabel::OBRing >::value_type **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBRing >::value_type const & reference is null");
    return ; }   try { std_vector_Sl_OpenBabel_OBRing_Sg__set(arg1,arg2,(OpenBabel::OBRing const &)*arg3);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1vectorOBRing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OpenBabel::OBRing > *arg1 = (std::vector< OpenBabel::OBRing > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector< OpenBabel::OBRing > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorpOBRing_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBRing * > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< OpenBabel::OBRing * > *)new std::vector< OpenBabel::OBRing * >();
  *(std::vector< OpenBabel::OBRing * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorpOBRing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBRing * >::size_type arg1 ; std::vector< OpenBabel::OBRing * > *result = 0 ;
  (void)jenv; (void)jcls; arg1 = (std::vector< OpenBabel::OBRing * >::size_type)jarg1; 
  result = (std::vector< OpenBabel::OBRing * > *)new std::vector< OpenBabel::OBRing * >(arg1);
  *(std::vector< OpenBabel::OBRing * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorpOBRing_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBRing * > *arg1 = (std::vector< OpenBabel::OBRing * > *) 0 ;
  std::vector< OpenBabel::OBRing * >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBRing * > **)&jarg1;  result = ((std::vector< OpenBabel::OBRing * > const *)arg1)->size();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorpOBRing_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OpenBabel::OBRing * > *arg1 = (std::vector< OpenBabel::OBRing * > *) 0 ;
  std::vector< OpenBabel::OBRing * >::size_type arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBRing * > **)&jarg1;  arg2 = (std::vector< OpenBabel::OBRing * >::size_type)jarg2; 
  (arg1)->reserve(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorpOBRing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBRing * > *arg1 = (std::vector< OpenBabel::OBRing * > *) 0 ; int arg2 ;
  std::vector< OpenBabel::OBRing * >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBRing * > **)&jarg1;  arg2 = (int)jarg2;  try {
    result = (std::vector< OpenBabel::OBRing * >::value_type *) &std_vector_Sl_OpenBabel_OBRing_Sm__Sg__get(arg1,arg2);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< OpenBabel::OBRing * >::value_type *)&jresult = *result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorpOBRing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OpenBabel::OBRing * > *arg1 = (std::vector< OpenBabel::OBRing * > *) 0 ; int arg2 ;
  std::vector< OpenBabel::OBRing * >::value_type *arg3 = 0 ; std::vector< OpenBabel::OBRing * >::value_type temp3 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_; arg1 = *(std::vector< OpenBabel::OBRing * > **)&jarg1; 
  arg2 = (int)jarg2;  temp3 = *(std::vector< OpenBabel::OBRing * >::value_type *)&jarg3;
  arg3 = (std::vector< OpenBabel::OBRing * >::value_type *)&temp3;  try {
    std_vector_Sl_OpenBabel_OBRing_Sm__Sg__set(arg1,arg2,(OpenBabel::OBRing *const &)*arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1vectorpOBRing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OpenBabel::OBRing * > *arg1 = (std::vector< OpenBabel::OBRing * > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector< OpenBabel::OBRing * > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorpOBGenericData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBGenericData * > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< OpenBabel::OBGenericData * > *)new std::vector< OpenBabel::OBGenericData * >();
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorpOBGenericData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBGenericData * >::size_type arg1 ;
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (std::vector< OpenBabel::OBGenericData * >::size_type)jarg1; 
  result = (std::vector< OpenBabel::OBGenericData * > *)new std::vector< OpenBabel::OBGenericData * >(arg1);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorpOBGenericData_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBGenericData * > *arg1 = (std::vector< OpenBabel::OBGenericData * > *) 0 ;
  std::vector< OpenBabel::OBGenericData * >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBGenericData * > **)&jarg1; 
  result = ((std::vector< OpenBabel::OBGenericData * > const *)arg1)->size(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorpOBGenericData_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OpenBabel::OBGenericData * > *arg1 = (std::vector< OpenBabel::OBGenericData * > *) 0 ;
  std::vector< OpenBabel::OBGenericData * >::size_type arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBGenericData * > **)&jarg1; 
  arg2 = (std::vector< OpenBabel::OBGenericData * >::size_type)jarg2;  (arg1)->reserve(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorpOBGenericData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBGenericData * > *arg1 = (std::vector< OpenBabel::OBGenericData * > *) 0 ;
  int arg2 ; std::vector< OpenBabel::OBGenericData * >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBGenericData * > **)&jarg1;  arg2 = (int)jarg2;  try {
    result = (std::vector< OpenBabel::OBGenericData * >::value_type *) &std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__get(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< OpenBabel::OBGenericData * >::value_type *)&jresult = *result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorpOBGenericData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OpenBabel::OBGenericData * > *arg1 = (std::vector< OpenBabel::OBGenericData * > *) 0 ; int arg2 ;
  std::vector< OpenBabel::OBGenericData * >::value_type *arg3 = 0 ;
  std::vector< OpenBabel::OBGenericData * >::value_type temp3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(std::vector< OpenBabel::OBGenericData * > **)&jarg1;  arg2 = (int)jarg2; 
  temp3 = *(std::vector< OpenBabel::OBGenericData * >::value_type *)&jarg3;
  arg3 = (std::vector< OpenBabel::OBGenericData * >::value_type *)&temp3;  try {
    std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__set(arg1,arg2,(OpenBabel::OBGenericData *const &)*arg3);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1vectorpOBGenericData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OpenBabel::OBGenericData * > *arg1 = (std::vector< OpenBabel::OBGenericData * > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector< OpenBabel::OBGenericData * > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorpOBInternalCoord_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBInternalCoord * > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< OpenBabel::OBInternalCoord * > *)new std::vector< OpenBabel::OBInternalCoord * >();
  *(std::vector< OpenBabel::OBInternalCoord * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vectorpOBInternalCoord_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBInternalCoord * >::size_type arg1 ;
  std::vector< OpenBabel::OBInternalCoord * > *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (std::vector< OpenBabel::OBInternalCoord * >::size_type)jarg1; 
  result = (std::vector< OpenBabel::OBInternalCoord * > *)new std::vector< OpenBabel::OBInternalCoord * >(arg1);
  *(std::vector< OpenBabel::OBInternalCoord * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorpOBInternalCoord_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBInternalCoord * > *arg1 = (std::vector< OpenBabel::OBInternalCoord * > *) 0 ;
  std::vector< OpenBabel::OBInternalCoord * >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBInternalCoord * > **)&jarg1; 
  result = ((std::vector< OpenBabel::OBInternalCoord * > const *)arg1)->size(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorpOBInternalCoord_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OpenBabel::OBInternalCoord * > *arg1 = (std::vector< OpenBabel::OBInternalCoord * > *) 0 ;
  std::vector< OpenBabel::OBInternalCoord * >::size_type arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBInternalCoord * > **)&jarg1; 
  arg2 = (std::vector< OpenBabel::OBInternalCoord * >::size_type)jarg2;  (arg1)->reserve(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorpOBInternalCoord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBInternalCoord * > *arg1 = (std::vector< OpenBabel::OBInternalCoord * > *) 0 ;
  int arg2 ; std::vector< OpenBabel::OBInternalCoord * >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< OpenBabel::OBInternalCoord * > **)&jarg1;  arg2 = (int)jarg2;  try {
    result = (std::vector< OpenBabel::OBInternalCoord * >::value_type *) &std_vector_Sl_OpenBabel_OBInternalCoord_Sm__Sg__get(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< OpenBabel::OBInternalCoord * >::value_type *)&jresult = *result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorpOBInternalCoord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OpenBabel::OBInternalCoord * > *arg1 = (std::vector< OpenBabel::OBInternalCoord * > *) 0 ; int arg2 ;
  std::vector< OpenBabel::OBInternalCoord * >::value_type *arg3 = 0 ;
  std::vector< OpenBabel::OBInternalCoord * >::value_type temp3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(std::vector< OpenBabel::OBInternalCoord * > **)&jarg1;  arg2 = (int)jarg2; 
  temp3 = *(std::vector< OpenBabel::OBInternalCoord * >::value_type *)&jarg3;
  arg3 = (std::vector< OpenBabel::OBInternalCoord * >::value_type *)&temp3;  try {
    std_vector_Sl_OpenBabel_OBInternalCoord_Sm__Sg__set(arg1,arg2,(OpenBabel::OBInternalCoord *const &)*arg3);} 
  catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1vectorpOBInternalCoord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OpenBabel::OBInternalCoord * > *arg1 = (std::vector< OpenBabel::OBInternalCoord * > *) 0 ; (void)jenv;
  (void)jcls; arg1 = *(std::vector< OpenBabel::OBInternalCoord * > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1pairUIntUInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::pair< unsigned int,unsigned int > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::pair< unsigned int,unsigned int > *)new std::pair< unsigned int,unsigned int >();
  *(std::pair< unsigned int,unsigned int > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1pairUIntUInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ; unsigned int arg1 ; unsigned int arg2 ; std::pair< unsigned int,unsigned int > *result = 0 ; (void)jenv;
  (void)jcls; arg1 = (unsigned int)jarg1;  arg2 = (unsigned int)jarg2; 
  result = (std::pair< unsigned int,unsigned int > *)new std::pair< unsigned int,unsigned int >(arg1,arg2);
  *(std::pair< unsigned int,unsigned int > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1pairUIntUInt_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::pair< unsigned int,unsigned int > *arg1 = 0 ; std::pair< unsigned int,unsigned int > *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::pair< unsigned int,unsigned int > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< unsigned int,unsigned int > const & reference is null");
    return 0; }  
  result = (std::pair< unsigned int,unsigned int > *)new std::pair< unsigned int,unsigned int >((std::pair< unsigned int,unsigned int > const &)*arg1);
  *(std::pair< unsigned int,unsigned int > **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_pairUIntUInt_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::pair< unsigned int,unsigned int > *arg1 = (std::pair< unsigned int,unsigned int > *) 0 ; unsigned int arg2 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::pair< unsigned int,unsigned int > **)&jarg1;  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->first = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_pairUIntUInt_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::pair< unsigned int,unsigned int > *arg1 = (std::pair< unsigned int,unsigned int > *) 0 ;
  unsigned int result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::pair< unsigned int,unsigned int > **)&jarg1; 
  result = (unsigned int) ((arg1)->first); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_pairUIntUInt_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::pair< unsigned int,unsigned int > *arg1 = (std::pair< unsigned int,unsigned int > *) 0 ; unsigned int arg2 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::pair< unsigned int,unsigned int > **)&jarg1;  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->second = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_pairUIntUInt_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::pair< unsigned int,unsigned int > *arg1 = (std::pair< unsigned int,unsigned int > *) 0 ;
  unsigned int result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::pair< unsigned int,unsigned int > **)&jarg1; 
  result = (unsigned int) ((arg1)->second); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1pairUIntUInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< unsigned int,unsigned int > *arg1 = (std::pair< unsigned int,unsigned int > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::pair< unsigned int,unsigned int > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vpairUIntUInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< std::pair< unsigned int,unsigned int > > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< std::pair< unsigned int,unsigned int > > *)new std::vector< std::pair< unsigned int,unsigned int > >();
  *(std::vector< std::pair< unsigned int,unsigned int > > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vpairUIntUInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::vector< std::pair< unsigned int,unsigned int > >::size_type arg1 ;
  std::vector< std::pair< unsigned int,unsigned int > > *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (std::vector< std::pair< unsigned int,unsigned int > >::size_type)jarg1; 
  result = (std::vector< std::pair< unsigned int,unsigned int > > *)new std::vector< std::pair< unsigned int,unsigned int > >(arg1);
  *(std::vector< std::pair< unsigned int,unsigned int > > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vpairUIntUInt_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< unsigned int,unsigned int > > *arg1 = (std::vector< std::pair< unsigned int,unsigned int > > *) 0 ;
  std::vector< std::pair< unsigned int,unsigned int > >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::pair< unsigned int,unsigned int > > **)&jarg1; 
  result = ((std::vector< std::pair< unsigned int,unsigned int > > const *)arg1)->size(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vpairUIntUInt_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< unsigned int,unsigned int > > *arg1 = (std::vector< std::pair< unsigned int,unsigned int > > *) 0 ;
  std::vector< std::pair< unsigned int,unsigned int > >::size_type arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::pair< unsigned int,unsigned int > > **)&jarg1; 
  arg2 = (std::vector< std::pair< unsigned int,unsigned int > >::size_type)jarg2;  (arg1)->reserve(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vpairUIntUInt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< unsigned int,unsigned int > > *arg1 = (std::vector< std::pair< unsigned int,unsigned int > > *) 0 ;
  int arg2 ; std::vector< std::pair< unsigned int,unsigned int > >::value_type *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< std::pair< unsigned int,unsigned int > > **)&jarg1;  arg2 = (int)jarg2;  try {
    result = (std::vector< std::pair< unsigned int,unsigned int > >::value_type *) &std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__get(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< std::pair< unsigned int,unsigned int > >::value_type **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vpairUIntUInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< unsigned int,unsigned int > > *arg1 = (std::vector< std::pair< unsigned int,unsigned int > > *) 0 ;
  int arg2 ; std::vector< std::pair< unsigned int,unsigned int > >::value_type *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg3_; arg1 = *(std::vector< std::pair< unsigned int,unsigned int > > **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< unsigned int,unsigned int > >::value_type **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< unsigned int,unsigned int > >::value_type const & reference is null");
    return ; }   try {
    std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__set(arg1,arg2,(std::pair< unsigned int,unsigned int > const &)*arg3);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1vpairUIntUInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< unsigned int,unsigned int > > *arg1 = (std::vector< std::pair< unsigned int,unsigned int > > *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(std::vector< std::pair< unsigned int,unsigned int > > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vvpairUIntUInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *)new std::vector< std::vector< std::pair< unsigned int,unsigned int > > >();
  *(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vvpairUIntUInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::size_type arg1 ;
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::size_type)jarg1; 
  result = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *)new std::vector< std::vector< std::pair< unsigned int,unsigned int > > >(arg1);
  *(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vvpairUIntUInt_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > **)&jarg1; 
  result = ((std::vector< std::vector< std::pair< unsigned int,unsigned int > > > const *)arg1)->size();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vvpairUIntUInt_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > **)&jarg1; 
  result = ((std::vector< std::vector< std::pair< unsigned int,unsigned int > > > const *)arg1)->capacity();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vvpairUIntUInt_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::size_type arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > **)&jarg1; 
  arg2 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::size_type)jarg2;  (arg1)->reserve(arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_vvpairUIntUInt_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > **)&jarg1; 
  result = (bool)((std::vector< std::vector< std::pair< unsigned int,unsigned int > > > const *)arg1)->empty();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vvpairUIntUInt_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vvpairUIntUInt_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type const & reference is null");
    return ; }  
  (arg1)->push_back((std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type const &)*arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vvpairUIntUInt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  int arg2 ; std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > **)&jarg1; 
  arg2 = (int)jarg2;  try {
    result = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type *) &std_vector_Sl_std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__Sg__get(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vvpairUIntUInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  int arg2 ; std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type *arg3 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< std::pair< unsigned int,unsigned int > > >::value_type const & reference is null");
    return ; }   try {
    std_vector_Sl_std_vector_Sl_std_pair_Sl_unsigned_SS_int_Sc_unsigned_SS_int_Sg__Sg__Sg__set(arg1,arg2,(std::vector< std::pair< unsigned int,unsigned int > > const &)*arg3);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1vvpairUIntUInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *arg1 = (std::vector< std::vector< std::pair< unsigned int,unsigned int > > > *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toAliasData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::AliasData *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::AliasData *)toAliasData(arg1); *(OpenBabel::AliasData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toAngleData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::OBAngleData *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBAngleData *)toAngleData(arg1); *(OpenBabel::OBAngleData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toCommentData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::OBCommentData *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBCommentData *)toCommentData(arg1); *(OpenBabel::OBCommentData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toConformerData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::OBConformerData *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBConformerData *)toConformerData(arg1); *(OpenBabel::OBConformerData **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toExternalBondData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  OpenBabel::OBExternalBondData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBGenericData **)&jarg1;  result = (OpenBabel::OBExternalBondData *)toExternalBondData(arg1);
  *(OpenBabel::OBExternalBondData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toGridData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::OBGridData *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBGridData *)toGridData(arg1); *(OpenBabel::OBGridData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toMatrixData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::OBMatrixData *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBMatrixData *)toMatrixData(arg1); *(OpenBabel::OBMatrixData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toNasaThermoData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  OpenBabel::OBNasaThermoData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBNasaThermoData *)toNasaThermoData(arg1); *(OpenBabel::OBNasaThermoData **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toPairData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::OBPairData *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBPairData *)toPairData(arg1); *(OpenBabel::OBPairData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toRateData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::OBRateData *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBRateData *)toRateData(arg1); *(OpenBabel::OBRateData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toRotamerList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::OBRotamerList *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBRotamerList *)toRotamerList(arg1); *(OpenBabel::OBRotamerList **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toRotationData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::OBRotationData *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBRotationData *)toRotationData(arg1); *(OpenBabel::OBRotationData **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toSerialNums(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::OBSerialNums *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBSerialNums *)toSerialNums(arg1); *(OpenBabel::OBSerialNums **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toSetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::OBSetData *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBSetData *)toSetData(arg1); *(OpenBabel::OBSetData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toSymmetryData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::OBSymmetryData *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBSymmetryData *)toSymmetryData(arg1); *(OpenBabel::OBSymmetryData **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toTorsionData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::OBTorsionData *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBTorsionData *)toTorsionData(arg1); *(OpenBabel::OBTorsionData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toUnitCell(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::OBUnitCell *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBUnitCell *)toUnitCell(arg1); *(OpenBabel::OBUnitCell **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toVectorData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::OBVectorData *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBVectorData *)toVectorData(arg1); *(OpenBabel::OBVectorData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toVibrationData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::OBVibrationData *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBVibrationData *)toVibrationData(arg1); *(OpenBabel::OBVibrationData **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_toVirtualBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::OBVirtualBond *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::OBVirtualBond *)toVirtualBond(arg1); *(OpenBabel::OBVirtualBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBGlobalDataBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBGlobalDataBase *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBGlobalDataBase *)new OpenBabel::OBGlobalDataBase();
  *(OpenBabel::OBGlobalDataBase **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBGlobalDataBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGlobalDataBase_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1;  (arg1)->Init(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGlobalDataBase_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ; size_t result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1;  result = (arg1)->GetSize();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGlobalDataBase_1SetReadDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; }  (arg1)->SetReadDirectory(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGlobalDataBase_1SetEnvironmentVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; }  (arg1)->SetEnvironmentVariable(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGlobalDataBase_1ParseLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; }  (arg1)->ParseLine((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAtomHOF(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4, jdouble jarg5, jdouble jarg6, jint jarg7, jstring jarg8) {
  jlong jresult = 0 ; std::string arg1 ; int arg2 ; std::string arg3 ; std::string arg4 ; double arg5 ; double arg6 ; int arg7 ;
  std::string arg8 ; OpenBabel::OBAtomHOF *result = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr); jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = (int)jarg2;  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr); jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr); jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  arg5 = (double)jarg5;  arg6 = (double)jarg6; 
  arg7 = (int)jarg7;  if(!jarg8) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg8_pstr = (const char *)jenv->GetStringUTFChars(jarg8, 0);  if (!arg8_pstr) return 0;
  (&arg8)->assign(arg8_pstr); jenv->ReleaseStringUTFChars(jarg8, arg8_pstr); 
  result = (OpenBabel::OBAtomHOF *)new OpenBabel::OBAtomHOF(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(OpenBabel::OBAtomHOF **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBAtomHOF(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBAtomHOF **)&jarg1; 
  delete arg1; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomHOF_1Element(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomHOF **)&jarg1;  result = (arg1)->Element();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomHOF_1Charge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomHOF **)&jarg1;  result = (int)(arg1)->Charge(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomHOF_1Method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomHOF **)&jarg1;  result = (arg1)->Method();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomHOF_1Desc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomHOF **)&jarg1;  result = (arg1)->Desc();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomHOF_1T(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomHOF **)&jarg1;  result = (double)(arg1)->T(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomHOF_1Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomHOF **)&jarg1;  result = (double)(arg1)->Value(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomHOF_1Multiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomHOF **)&jarg1;  result = (int)(arg1)->Multiplicity(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomHOF_1Unit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBAtomHOF *arg1 = (OpenBabel::OBAtomHOF *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomHOF **)&jarg1;  result = (arg1)->Unit();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAtomicHeatOfFormationTable(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBAtomicHeatOfFormationTable *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBAtomicHeatOfFormationTable *)new OpenBabel::OBAtomicHeatOfFormationTable();
  *(OpenBabel::OBAtomicHeatOfFormationTable **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBAtomicHeatOfFormationTable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomicHeatOfFormationTable *arg1 = (OpenBabel::OBAtomicHeatOfFormationTable *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBAtomicHeatOfFormationTable **)&jarg1;  delete arg1; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomicHeatOfFormationTable_1GetHeatOfFormation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jdouble jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ; OpenBabel::OBAtomicHeatOfFormationTable *arg1 = (OpenBabel::OBAtomicHeatOfFormationTable *) 0 ;
  std::string arg2 ; int arg3 ; std::string arg4 ; double arg5 ; double *arg6 = (double *) 0 ; double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomicHeatOfFormationTable **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr); jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = (int)jarg3;  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr); jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  arg5 = (double)jarg5;  arg6 = *(double **)&jarg6; 
  arg7 = *(double **)&jarg7;  arg8 = *(double **)&jarg8; 
  result = (int)(arg1)->GetHeatOfFormation(arg2,arg3,arg4,arg5,arg6,arg7,arg8); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBTypeTable(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBTypeTable *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBTypeTable *)new OpenBabel::OBTypeTable();
  *(OpenBabel::OBTypeTable **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBTypeTable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTypeTable_1SetFromType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ; char *arg2 = (char *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTypeTable **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  result = (bool)(arg1)->SetFromType((char const *)arg2); jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTypeTable_1SetToType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ; char *arg2 = (char *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTypeTable **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  result = (bool)(arg1)->SetToType((char const *)arg2); jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTypeTable_1Translate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ; char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; }  arg3 = 0; if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; } 
  result = (bool)(arg1)->Translate(arg2,(char const *)arg3); jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTypeTable_1Translate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  arg2 = *(std::string **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }   if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->Translate(*arg2,(std::string const &)*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTypeTable_1Translate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ; OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ; std::string *arg2 = 0 ;
  std::string result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTypeTable **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->Translate((std::string const &)*arg2); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTypeTable_1GetFromType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTypeTable **)&jarg1;  result = (arg1)->GetFromType();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTypeTable_1GetToType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTypeTable **)&jarg1;  result = (arg1)->GetToType();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_ttab_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBTypeTable *arg1 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTypeTable **)&jarg1;
  if (!arg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBTypeTable const & reference is null");
    return ; }   OpenBabel::ttab = *arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_ttab_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBTypeTable *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBTypeTable *) &OpenBabel::ttab;
  *(OpenBabel::OBTypeTable **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBResidueData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBResidueData *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBResidueData *)new OpenBabel::OBResidueData(); *(OpenBabel::OBResidueData **)&jresult = result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueData_1SetResName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ; std::string *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueData **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->SetResName((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueData_1LookupBO_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ; OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ; std::string *arg2 = 0 ; int result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueData **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->LookupBO((std::string const &)*arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueData_1LookupBO_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ; OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->LookupBO((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueData_1LookupType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::string **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  arg4 = *(int **)&jarg4; if (!arg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0; }   result = (bool)(arg1)->LookupType((std::string const &)*arg2,*arg3,*arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueData_1AssignBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->AssignBonds(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBResidueData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_resdat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueData *arg1 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueData **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBResidueData const & reference is null");
    return ; }   OpenBabel::resdat = *arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_resdat_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBResidueData *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBResidueData *) &OpenBabel::resdat;
  *(OpenBabel::OBResidueData **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_M_1PI_1get(JNIEnv *jenv, jclass jcls) { jdouble jresult = 0 ;
  double result; (void)jenv; (void)jcls; result = (double)(3.14159265358979323846); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStopwatch_1Start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBStopwatch *arg1 = (OpenBabel::OBStopwatch *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBStopwatch **)&jarg1;  (arg1)->Start(); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStopwatch_1Lap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBStopwatch *arg1 = (OpenBabel::OBStopwatch *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBStopwatch **)&jarg1;  result = (double)(arg1)->Lap(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStopwatch_1Elapsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBStopwatch *arg1 = (OpenBabel::OBStopwatch *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBStopwatch **)&jarg1;  result = (double)(arg1)->Elapsed(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBStopwatch(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBStopwatch *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBStopwatch *)new OpenBabel::OBStopwatch();
  *(OpenBabel::OBStopwatch **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBStopwatch(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBStopwatch *arg1 = (OpenBabel::OBStopwatch *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBStopwatch **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBSqrtTbl_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBSqrtTbl *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBSqrtTbl *)new OpenBabel::OBSqrtTbl(); *(OpenBabel::OBSqrtTbl **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBSqrtTbl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ; double arg1 ; double arg2 ; OpenBabel::OBSqrtTbl *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (double)jarg1;  arg2 = (double)jarg2;  result = (OpenBabel::OBSqrtTbl *)new OpenBabel::OBSqrtTbl(arg1,arg2);
  *(OpenBabel::OBSqrtTbl **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBSqrtTbl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSqrtTbl *arg1 = (OpenBabel::OBSqrtTbl *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBSqrtTbl **)&jarg1; 
  delete arg1; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSqrtTbl_1Sqrt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBSqrtTbl *arg1 = (OpenBabel::OBSqrtTbl *) 0 ; double arg2 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSqrtTbl **)&jarg1;  arg2 = (double)jarg2; 
  result = (double)((OpenBabel::OBSqrtTbl const *)arg1)->Sqrt(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSqrtTbl_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  OpenBabel::OBSqrtTbl *arg1 = (OpenBabel::OBSqrtTbl *) 0 ; double arg2 ; double arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSqrtTbl **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3;  (arg1)->Init(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_rotate_1coords(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  double *arg1 = (double *) 0 ; double (*arg2)[3] ; unsigned int arg3 ; (void)jenv; (void)jcls; arg1 = *(double **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2;  arg3 = (unsigned int)jarg3;  OpenBabel::rotate_coords(arg1,(double (*)[3])arg2,arg3); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_calc_1rms(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ; double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; unsigned int arg3 ; double result;
  (void)jenv; (void)jcls; arg1 = *(double **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = (unsigned int)jarg3; 
  result = (double)OpenBabel::calc_rms(arg1,arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_RAD_1TO_1DEG_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ; double result; (void)jenv; (void)jcls; result = (double)((180.0/3.14159265358979323846));
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_DEG_1TO_1RAD_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ; double result; (void)jenv; (void)jcls; result = (double)((3.14159265358979323846/180.0));
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vector3_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ; double arg1 ; double arg2 ; double arg3 ; OpenBabel::vector3 *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (double)jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  result = (OpenBabel::vector3 *)new OpenBabel::vector3(arg1,arg2,arg3); *(OpenBabel::vector3 **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vector3_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ; double arg1 ; double arg2 ; OpenBabel::vector3 *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (double)jarg1;  arg2 = (double)jarg2;  result = (OpenBabel::vector3 *)new OpenBabel::vector3(arg1,arg2);
  *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vector3_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ; double arg1 ; OpenBabel::vector3 *result = 0 ; (void)jenv; (void)jcls; arg1 = (double)jarg1; 
  result = (OpenBabel::vector3 *)new OpenBabel::vector3(arg1); *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vector3_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::vector3 *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::vector3 *)new OpenBabel::vector3(); *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vector3_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; double *arg1 ; OpenBabel::vector3 *result = 0 ; (void)jenv; (void)jcls; arg1 = *(double **)&jarg1; 
  result = (OpenBabel::vector3 *)new OpenBabel::vector3(arg1); *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1vector3_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::vector3 *arg1 = 0 ; OpenBabel::vector3 *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return 0; }  
  result = (OpenBabel::vector3 *)new OpenBabel::vector3((OpenBabel::vector3 const &)*arg1);
  *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1vector3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::vector3 **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; OpenBabel::vector3::iterator result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::vector3 **)&jarg1;  result = (OpenBabel::vector3::iterator)(arg1)->begin();
  *(OpenBabel::vector3::iterator *)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; OpenBabel::vector3::iterator result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::vector3 **)&jarg1;  result = (OpenBabel::vector3::iterator)(arg1)->end();
  *(OpenBabel::vector3::iterator *)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1Set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double arg2 ; double arg3 ; double arg4 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::vector3 **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3;  arg4 = (double)jarg4; 
  (arg1)->Set(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1Set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double *arg2 = (double *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1;  arg2 = *(double **)&jarg2;  (arg1)->Set((double const *)arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1SetX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetX(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1SetY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetY(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1SetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetZ(arg2); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::vector3 **)&jarg1;  result = (double)((OpenBabel::vector3 const *)arg1)->GetX();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::vector3 **)&jarg1;  result = (double)((OpenBabel::vector3 const *)arg1)->GetY();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1GetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::vector3 **)&jarg1;  result = (double)((OpenBabel::vector3 const *)arg1)->GetZ();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1Get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double *arg2 = (double *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1;  arg2 = *(double **)&jarg2;  (arg1)->Get(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1AsArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::vector3 **)&jarg1;  result = (double *)((OpenBabel::vector3 const *)arg1)->AsArray();
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1randomUnitVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1;  (arg1)->randomUnitVector(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; OpenBabel::vector3 *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::vector3 **)&jarg1;  result = (OpenBabel::vector3 *) &(arg1)->normalize();
  *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1CanBeNormalized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::vector3 **)&jarg1;  result = (bool)((OpenBabel::vector3 const *)arg1)->CanBeNormalized();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1length_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::vector3 **)&jarg1;  result = (double)((OpenBabel::vector3 const *)arg1)->length_2();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::vector3 **)&jarg1;  result = (double)((OpenBabel::vector3 const *)arg1)->length();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1x_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::vector3 **)&jarg1;  result = (double *) &((OpenBabel::vector3 const *)arg1)->x();
  jresult = (jdouble)*result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1y_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::vector3 **)&jarg1;  result = (double *) &((OpenBabel::vector3 const *)arg1)->y();
  jresult = (jdouble)*result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1z_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; double *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::vector3 **)&jarg1;  result = (double *) &((OpenBabel::vector3 const *)arg1)->z();
  jresult = (jdouble)*result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1IsApprox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ; OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; OpenBabel::vector3 *arg2 = 0 ; double *arg3 = 0 ;
  double temp3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return 0; }  
  temp3 = (double)jarg3;  arg3 = &temp3; 
  result = (bool)((OpenBabel::vector3 const *)arg1)->IsApprox((OpenBabel::vector3 const &)*arg2,(double const &)*arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1distSq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; OpenBabel::vector3 *arg2 = 0 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return 0; }  
  result = (double)((OpenBabel::vector3 const *)arg1)->distSq((OpenBabel::vector3 const &)*arg2); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_vector3_1createOrthoVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ; OpenBabel::vector3 *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  result = (bool)((OpenBabel::vector3 const *)arg1)->createOrthoVector(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::vector3 *arg1 = 0 ; OpenBabel::vector3 *arg2 = 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::vector3 **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return 0; }  
  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return 0; }  
  result = (double)OpenBabel::dot((OpenBabel::vector3 const &)*arg1,(OpenBabel::vector3 const &)*arg2);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_cross(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::vector3 *arg1 = 0 ; OpenBabel::vector3 *arg2 = 0 ; OpenBabel::vector3 result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::vector3 **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return 0; }  
  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return 0; }  
  result = OpenBabel::cross((OpenBabel::vector3 const &)*arg1,(OpenBabel::vector3 const &)*arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_vectorAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::vector3 *arg1 = 0 ; OpenBabel::vector3 *arg2 = 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::vector3 **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return 0; }  
  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return 0; }  
  result = (double)OpenBabel::vectorAngle((OpenBabel::vector3 const &)*arg1,(OpenBabel::vector3 const &)*arg2);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_CalcTorsionAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ; OpenBabel::vector3 *arg1 = 0 ; OpenBabel::vector3 *arg2 = 0 ; OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 *arg4 = 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return 0; }  
  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return 0; }  
  arg3 = *(OpenBabel::vector3 **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return 0; }  
  arg4 = *(OpenBabel::vector3 **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return 0; }  
  result = (double)OpenBabel::CalcTorsionAngle((OpenBabel::vector3 const &)*arg1,(OpenBabel::vector3 const &)*arg2,(OpenBabel::vector3 const &)*arg3,(OpenBabel::vector3 const &)*arg4);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_Point2PlaneSigned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ; OpenBabel::vector3 arg1 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 arg3 ; OpenBabel::vector3 arg4 ;
  OpenBabel::vector3 *argp1 ; OpenBabel::vector3 *argp2 ; OpenBabel::vector3 *argp3 ; OpenBabel::vector3 *argp4 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; argp1 = *(OpenBabel::vector3 **)&jarg1; 
  if (!argp1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3");
    return 0; }  arg1 = *argp1;  argp2 = *(OpenBabel::vector3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg2 = *argp2;  argp3 = *(OpenBabel::vector3 **)&jarg3;  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg3 = *argp3;  argp4 = *(OpenBabel::vector3 **)&jarg4;  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg4 = *argp4;  result = (double)OpenBabel::Point2PlaneSigned(arg1,arg2,arg3,arg4); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_Point2Plane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ; OpenBabel::vector3 arg1 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 arg3 ; OpenBabel::vector3 arg4 ;
  OpenBabel::vector3 *argp1 ; OpenBabel::vector3 *argp2 ; OpenBabel::vector3 *argp3 ; OpenBabel::vector3 *argp4 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; argp1 = *(OpenBabel::vector3 **)&jarg1; 
  if (!argp1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3");
    return 0; }  arg1 = *argp1;  argp2 = *(OpenBabel::vector3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg2 = *argp2;  argp3 = *(OpenBabel::vector3 **)&jarg3;  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg3 = *argp3;  argp4 = *(OpenBabel::vector3 **)&jarg4;  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg4 = *argp4;  result = (double)OpenBabel::Point2Plane(arg1,arg2,arg3,arg4); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_Point2PlaneAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ; OpenBabel::vector3 arg1 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 arg3 ; OpenBabel::vector3 arg4 ;
  OpenBabel::vector3 const *argp1 ; OpenBabel::vector3 const *argp2 ; OpenBabel::vector3 const *argp3 ;
  OpenBabel::vector3 const *argp4 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  (void)jarg4_; argp1 = *(OpenBabel::vector3 **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return 0; }  arg1 = *argp1;  argp2 = *(OpenBabel::vector3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return 0; }  arg2 = *argp2;  argp3 = *(OpenBabel::vector3 **)&jarg3;  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return 0; }  arg3 = *argp3;  argp4 = *(OpenBabel::vector3 **)&jarg4;  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return 0; }  arg4 = *argp4;  result = (double)OpenBabel::Point2PlaneAngle(arg1,arg2,arg3,arg4); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_Point2Line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ; OpenBabel::vector3 *arg1 = 0 ; OpenBabel::vector3 *arg2 = 0 ; OpenBabel::vector3 *arg3 = 0 ;
  double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::vector3 **)&jarg1;
  if (!arg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return 0; }   arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return 0; }  
  arg3 = *(OpenBabel::vector3 **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return 0; }  
  result = (double)OpenBabel::Point2Line((OpenBabel::vector3 const &)*arg1,(OpenBabel::vector3 const &)*arg2,(OpenBabel::vector3 const &)*arg3);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_VZero_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::vector3 *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::vector3 *) &OpenBabel::VZero;
  *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_VX_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::vector3 *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::vector3 *) &OpenBabel::VX;
  *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_VY_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::vector3 *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::vector3 *) &OpenBabel::VY;
  *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_VZ_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::vector3 *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::vector3 *) &OpenBabel::VZ;
  *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1matrix3x3_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::matrix3x3 *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::matrix3x3 *)new OpenBabel::matrix3x3(); *(OpenBabel::matrix3x3 **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1matrix3x3_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ; double arg1 ; OpenBabel::matrix3x3 *result = 0 ; (void)jenv; (void)jcls; arg1 = (double)jarg1; 
  result = (OpenBabel::matrix3x3 *)new OpenBabel::matrix3x3(arg1); *(OpenBabel::matrix3x3 **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1matrix3x3_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::vector3 arg1 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 arg3 ; OpenBabel::vector3 *argp1 ;
  OpenBabel::vector3 *argp2 ; OpenBabel::vector3 *argp3 ; OpenBabel::matrix3x3 *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg3_; argp1 = *(OpenBabel::vector3 **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg1 = *argp1;  argp2 = *(OpenBabel::vector3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg2 = *argp2;  argp3 = *(OpenBabel::vector3 **)&jarg3;  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg3 = *argp3;  result = (OpenBabel::matrix3x3 *)new OpenBabel::matrix3x3(arg1,arg2,arg3);
  *(OpenBabel::matrix3x3 **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1matrix3x3_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; double (*arg1)[3] ; OpenBabel::matrix3x3 *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(double (**)[3])&jarg1;  result = (OpenBabel::matrix3x3 *)new OpenBabel::matrix3x3((double (*)[3])arg1);
  *(OpenBabel::matrix3x3 **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1matrix3x3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1GetArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; double *arg2 = (double *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1;  arg2 = *(double **)&jarg2;  (arg1)->GetArray(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1inverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; OpenBabel::matrix3x3 result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1;  result = ((OpenBabel::matrix3x3 const *)arg1)->inverse();
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1transpose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; OpenBabel::matrix3x3 result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  result = ((OpenBabel::matrix3x3 const *)arg1)->transpose();
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &)result);  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1determinant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1;  result = (double)((OpenBabel::matrix3x3 const *)arg1)->determinant();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1isSymmetric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1;  result = (bool)((OpenBabel::matrix3x3 const *)arg1)->isSymmetric();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1isOrthogonal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1;  result = (bool)((OpenBabel::matrix3x3 const *)arg1)->isOrthogonal();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1isDiagonal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1;  result = (bool)((OpenBabel::matrix3x3 const *)arg1)->isDiagonal();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1isUnitMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1;  result = (bool)((OpenBabel::matrix3x3 const *)arg1)->isUnitMatrix();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1Get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ; OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; int arg2 ; int arg3 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (double)((OpenBabel::matrix3x3 const *)arg1)->Get(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1Set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jdouble jarg4) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; int arg2 ; int arg3 ; double arg4 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3;  arg4 = (double)jarg4; 
  (arg1)->Set(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1SetColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; int arg2 ; OpenBabel::vector3 *arg3 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = *(OpenBabel::vector3 **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return ; }  
  (arg1)->SetColumn(arg2,(OpenBabel::vector3 const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1SetRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; int arg2 ; OpenBabel::vector3 *arg3 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = *(OpenBabel::vector3 **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return ; }  
  (arg1)->SetRow(arg2,(OpenBabel::vector3 const &)*arg3); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1GetColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; unsigned int arg2 ; OpenBabel::vector3 result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = ((OpenBabel::matrix3x3 const *)arg1)->GetColumn(arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1GetRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; unsigned int arg2 ; OpenBabel::vector3 result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = ((OpenBabel::matrix3x3 const *)arg1)->GetRow(arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1SetupRotMat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; double arg2 ; double arg3 ; double arg4 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3;  arg4 = (double)jarg4; 
  (arg1)->SetupRotMat(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1PlaneReflection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; OpenBabel::vector3 *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return ; }  
  (arg1)->PlaneReflection((OpenBabel::vector3 const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1RotAboutAxisByAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; OpenBabel::vector3 *arg2 = 0 ; double arg3 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return ; }  
  arg3 = (double)jarg3;  (arg1)->RotAboutAxisByAngle((OpenBabel::vector3 const &)*arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1FillOrth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; double arg2 ; double arg3 ; double arg4 ; double arg5 ;
  double arg6 ; double arg7 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  arg2 = (double)jarg2;  arg3 = (double)jarg3;  arg4 = (double)jarg4;  arg5 = (double)jarg5;  arg6 = (double)jarg6; 
  arg7 = (double)jarg7;  (arg1)->FillOrth(arg2,arg3,arg4,arg5,arg6,arg7); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1findEigenvectorsIfSymmetric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ; OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::matrix3x3 result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  result = ((OpenBabel::matrix3x3 const *)arg1)->findEigenvectorsIfSymmetric(*arg2);
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_matrix3x3_1jacobi(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  unsigned int arg1 ; double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ; double *arg4 = (double *) 0 ; (void)jenv;
  (void)jcls; arg1 = (unsigned int)jarg1;  arg2 = *(double **)&jarg2;  arg3 = *(double **)&jarg3;  arg4 = *(double **)&jarg4; 
  OpenBabel::matrix3x3::jacobi(arg1,arg2,arg3,arg4); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1transform3d_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::transform3d *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::transform3d *)new OpenBabel::transform3d(); *(OpenBabel::transform3d **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1transform3d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::matrix3x3 *arg1 = 0 ; OpenBabel::vector3 *arg2 = 0 ; OpenBabel::transform3d *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::matrix3x3 **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::matrix3x3 const & reference is null"); return 0; }
    arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return 0; }  
  result = (OpenBabel::transform3d *)new OpenBabel::transform3d((OpenBabel::matrix3x3 const &)*arg1,(OpenBabel::vector3 const &)*arg2);
  *(OpenBabel::transform3d **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1transform3d_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ; double arg1 ; OpenBabel::transform3d *result = 0 ; (void)jenv; (void)jcls; arg1 = (double)jarg1; 
  result = (OpenBabel::transform3d *)new OpenBabel::transform3d(arg1); *(OpenBabel::transform3d **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1transform3d_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; OpenBabel::vector3 arg1 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 arg3 ; OpenBabel::vector3 arg4 ;
  OpenBabel::vector3 *argp1 ; OpenBabel::vector3 *argp2 ; OpenBabel::vector3 *argp3 ; OpenBabel::vector3 *argp4 ;
  OpenBabel::transform3d *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  argp1 = *(OpenBabel::vector3 **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg1 = *argp1;  argp2 = *(OpenBabel::vector3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg2 = *argp2;  argp3 = *(OpenBabel::vector3 **)&jarg3;  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg3 = *argp3;  argp4 = *(OpenBabel::vector3 **)&jarg4;  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg4 = *argp4;  result = (OpenBabel::transform3d *)new OpenBabel::transform3d(arg1,arg2,arg3,arg4);
  *(OpenBabel::transform3d **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1transform3d_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ; double (*arg1)[3] ; double *arg2 ; OpenBabel::transform3d *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(double (**)[3])&jarg1;  arg2 = *(double **)&jarg2; 
  result = (OpenBabel::transform3d *)new OpenBabel::transform3d((double (*)[3])arg1,arg2);
  *(OpenBabel::transform3d **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_transform3d_1DescribeAsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::transform3d *arg1 = (OpenBabel::transform3d *) 0 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::transform3d **)&jarg1; 
  result = ((OpenBabel::transform3d const *)arg1)->DescribeAsString(); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_transform3d_1DescribeAsValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::transform3d *arg1 = (OpenBabel::transform3d *) 0 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::transform3d **)&jarg1; 
  result = ((OpenBabel::transform3d const *)arg1)->DescribeAsValues(); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_transform3d_1Normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::transform3d *arg1 = (OpenBabel::transform3d *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::transform3d **)&jarg1;  (arg1)->Normalize(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1transform3d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::transform3d *arg1 = (OpenBabel::transform3d *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::transform3d **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1SpaceGroup(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::SpaceGroup *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::SpaceGroup *)new OpenBabel::SpaceGroup();
  *(OpenBabel::SpaceGroup **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1SpaceGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::SpaceGroup **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_SpaceGroup_1SetHMName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::SpaceGroup **)&jarg1;  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ; }  (arg1)->SetHMName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_SpaceGroup_1SetHallName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::SpaceGroup **)&jarg1;  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ; }  (arg1)->SetHallName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_SpaceGroup_1SetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::SpaceGroup **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->SetId(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_SpaceGroup_1AddTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::SpaceGroup **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->AddTransform((std::string const &)*arg2); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_SpaceGroup_1GetHMName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; std::string *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::SpaceGroup **)&jarg1; 
  result = (std::string *) &((OpenBabel::SpaceGroup const *)arg1)->GetHMName(); jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_SpaceGroup_1GetHallName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; std::string *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::SpaceGroup **)&jarg1; 
  result = (std::string *) &((OpenBabel::SpaceGroup const *)arg1)->GetHallName();
  jresult = jenv->NewStringUTF(result->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_SpaceGroup_1GetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::SpaceGroup **)&jarg1; 
  result = (unsigned int)((OpenBabel::SpaceGroup const *)arg1)->GetId(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_SpaceGroup_1GetOriginAlternative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::SpaceGroup **)&jarg1; 
  result = (unsigned int)((OpenBabel::SpaceGroup const *)arg1)->GetOriginAlternative(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_SpaceGroup_1Transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; OpenBabel::vector3 *arg2 = 0 ;
  SwigValueWrapper< std::list< OpenBabel::vector3 > > result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::SpaceGroup **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return 0; }  
  result = ((OpenBabel::SpaceGroup const *)arg1)->Transform((OpenBabel::vector3 const &)*arg2);
  *(std::list< OpenBabel::vector3 > **)&jresult = new std::list< OpenBabel::vector3 >((const std::list< OpenBabel::vector3 > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_SpaceGroup_1BeginTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; OpenBabel::transform3dIterator *arg2 = 0 ;
  OpenBabel::transform3d *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::SpaceGroup **)&jarg1; 
  arg2 = *(OpenBabel::transform3dIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::transform3dIterator & reference is null");
    return 0; }   result = (OpenBabel::transform3d *)((OpenBabel::SpaceGroup const *)arg1)->BeginTransform(*arg2);
  *(OpenBabel::transform3d **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_SpaceGroup_1NextTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; OpenBabel::transform3dIterator *arg2 = 0 ;
  OpenBabel::transform3d *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::SpaceGroup **)&jarg1; 
  arg2 = *(OpenBabel::transform3dIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::transform3dIterator & reference is null");
    return 0; }   result = (OpenBabel::transform3d *)((OpenBabel::SpaceGroup const *)arg1)->NextTransform(*arg2);
  *(OpenBabel::transform3d **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_SpaceGroup_1GetSpaceGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; OpenBabel::SpaceGroup *result = 0 ; (void)jenv; (void)jcls; arg1 = 0;
  if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = (OpenBabel::SpaceGroup *)OpenBabel::SpaceGroup::GetSpaceGroup((char const *)arg1);
  *(OpenBabel::SpaceGroup **)&jresult = result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_SpaceGroup_1GetSpaceGroup_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; unsigned int arg1 ; OpenBabel::SpaceGroup *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (unsigned int)jarg1;  result = (OpenBabel::SpaceGroup *)OpenBabel::SpaceGroup::GetSpaceGroup(arg1);
  *(OpenBabel::SpaceGroup **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_SpaceGroup_1Find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; OpenBabel::SpaceGroup *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::SpaceGroup **)&jarg1; 
  result = (OpenBabel::SpaceGroup *)OpenBabel::SpaceGroup::Find(arg1); *(OpenBabel::SpaceGroup **)&jresult = result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_SpaceGroup_1IsValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::SpaceGroup **)&jarg1;  result = (bool)((OpenBabel::SpaceGroup const *)arg1)->IsValid();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_SpaceGroup_1HEXAGONAL_1ORIGIN_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::SpaceGroup *arg1 = (OpenBabel::SpaceGroup *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::SpaceGroup **)&jarg1;  result = (int)(int) ((arg1)->HEXAGONAL_ORIGIN);
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_SETWORD_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(32); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_WORDROLL_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(5); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_WORDMASK_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(31); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_STARTWORDS_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(10); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBBitVec_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBBitVec *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBBitVec *)new OpenBabel::OBBitVec(); *(OpenBabel::OBBitVec **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBBitVec_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; unsigned int arg1 ; OpenBabel::OBBitVec *result = 0 ; (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1; 
  result = (OpenBabel::OBBitVec *)new OpenBabel::OBBitVec(arg1); *(OpenBabel::OBBitVec **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBBitVec_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBBitVec *arg1 = 0 ; OpenBabel::OBBitVec *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return 0; }  
  result = (OpenBabel::OBBitVec *)new OpenBabel::OBBitVec((OpenBabel::OBBitVec const &)*arg1);
  *(OpenBabel::OBBitVec **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1SetBitOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->SetBitOn(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1SetBitOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->SetBitOff(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1SetRangeOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int arg2 ; unsigned int arg3 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBitVec **)&jarg1;  arg2 = (unsigned int)jarg2;  arg3 = (unsigned int)jarg3; 
  (arg1)->SetRangeOn(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1SetRangeOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int arg2 ; unsigned int arg3 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBitVec **)&jarg1;  arg2 = (unsigned int)jarg2;  arg3 = (unsigned int)jarg3; 
  (arg1)->SetRangeOff(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1Fold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->Fold(arg2); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1FirstBit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ; OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int arg2 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBitVec **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (int)((OpenBabel::OBBitVec const *)arg1)->FirstBit(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1FirstBit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1;  result = (int)((OpenBabel::OBBitVec const *)arg1)->FirstBit();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1NextBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; int arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBitVec **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)((OpenBabel::OBBitVec const *)arg1)->NextBit(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1EndBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1;  result = (int)((OpenBabel::OBBitVec const *)arg1)->EndBit(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; size_t result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBitVec **)&jarg1;  result = ((OpenBabel::OBBitVec const *)arg1)->GetSize();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1CountBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBBitVec const *)arg1)->CountBits(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1IsEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBitVec **)&jarg1;  result = (bool)((OpenBabel::OBBitVec const *)arg1)->IsEmpty();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1Resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBitVec **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->Resize(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1ResizeWords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBitVec **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->ResizeWords(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1BitIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; unsigned int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBitVec **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)((OpenBabel::OBBitVec const *)arg1)->BitIsSet(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1FromVecInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; std::vector< int > *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBBitVec **)&jarg1;  arg2 = *(std::vector< int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null"); return ; }  
  (arg1)->FromVecInt((std::vector< int > const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1FromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; std::string *arg2 = 0 ; int arg3 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBitVec **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = (int)jarg3; 
  (arg1)->FromString((std::string const &)*arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1ToVecInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; std::vector< int > *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBBitVec **)&jarg1;  arg2 = *(std::vector< int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null"); return ; }  
  ((OpenBabel::OBBitVec const *)arg1)->ToVecInt(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1;  (arg1)->Clear(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1Negate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1;  (arg1)->Negate(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBitVec_1GetWords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; OpenBabel::OBBitVec::word_vector *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBitVec **)&jarg1;  arg2 = *(OpenBabel::OBBitVec::word_vector **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec::word_vector & reference is null");
    return ; }   (arg1)->GetWords(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBBitVec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  delete arg1; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_Tanimoto(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::OBBitVec *arg1 = 0 ; OpenBabel::OBBitVec *arg2 = 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBBitVec **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return 0; }  
  arg2 = *(OpenBabel::OBBitVec **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return 0; }  
  result = (double)OpenBabel::Tanimoto((OpenBabel::OBBitVec const &)*arg1,(OpenBabel::OBBitVec const &)*arg2);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReleaseVersion(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; std::string result; (void)jenv; (void)jcls; result = OpenBabel::OBReleaseVersion();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_UndefinedData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::UndefinedData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_PairData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::PairData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_EnergyData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::EnergyData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CommentData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::CommentData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ConformerData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::ConformerData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ExternalBondData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::ExternalBondData;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_RotamerList_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::RotamerList; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_VirtualBondData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::VirtualBondData;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_RingData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::RingData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_TorsionData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::TorsionData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AngleData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::AngleData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_SerialNums_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::SerialNums; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_UnitCell_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::UnitCell; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_SpinData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::SpinData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ChargeData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::ChargeData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_SymmetryData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::SymmetryData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OccupationData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::OccupationData;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_DensityData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::DensityData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ElectronicData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::ElectronicData;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_VibrationData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::VibrationData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_RotationData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::RotationData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_NuclearData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::NuclearData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_SetData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::SetData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_GridData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::GridData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_VectorData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::VectorData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_MatrixData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::MatrixData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_StereoData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::StereoData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_DOSData_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::DOSData; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ElectronicTransitionData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::ElectronicTransitionData;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CustomData0_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::CustomData0; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CustomData1_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::CustomData1; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CustomData2_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::CustomData2; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CustomData3_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::CustomData3; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CustomData4_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::CustomData4; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CustomData5_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::CustomData5; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CustomData6_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::CustomData6; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CustomData7_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::CustomData7; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CustomData8_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::CustomData8; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CustomData9_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::CustomData9; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CustomData10_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::CustomData10; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CustomData11_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::CustomData11; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CustomData12_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::CustomData12; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CustomData13_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::CustomData13; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CustomData14_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::CustomData14; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CustomData15_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBGenericDataType::CustomData15; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBGenericData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ; std::string arg1 ; unsigned int arg2 ; OpenBabel::DataOrigin arg3 ; OpenBabel::OBGenericData *result = 0 ;
  (void)jenv; (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr); jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = (unsigned int)jarg2; 
  arg3 = (OpenBabel::DataOrigin)jarg3;  result = (OpenBabel::OBGenericData *)new OpenBabel::OBGenericData(arg1,arg2,arg3);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBGenericData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ; std::string arg1 ; unsigned int arg2 ; OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls;
  if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr); jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)new OpenBabel::OBGenericData(arg1,arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBGenericData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; std::string arg1 ; OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr); jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenBabel::OBGenericData *)new OpenBabel::OBGenericData(arg1); *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBGenericData_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBGenericData *)new OpenBabel::OBGenericData(); *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGenericData_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBGenericData **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBGenericData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBGenericData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBGenericData **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGenericData_1SetAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetAttribute((std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGenericData_1SetOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::DataOrigin arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1;  arg2 = (OpenBabel::DataOrigin)jarg2;  (arg1)->SetOrigin(arg2); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGenericData_1GetAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; std::string *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (std::string *) &((OpenBabel::OBGenericData const *)arg1)->GetAttribute();
  jresult = jenv->NewStringUTF(result->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGenericData_1GetDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBGenericData const *)arg1)->GetDataType(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGenericData_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; std::string *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (std::string *) &((OpenBabel::OBGenericData const *)arg1)->GetValue();
  jresult = jenv->NewStringUTF(result->c_str());  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGenericData_1GetOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ; OpenBabel::DataOrigin result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::DataOrigin)((OpenBabel::OBGenericData const *)arg1)->GetOrigin(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBBase **)&jarg1; 
  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1;  result = (bool)(arg1)->Clear(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBBase *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; arg1 = *(OpenBabel::OBBase **)&jarg1;  arg2 = *(std::map< std::string,std::string > **)&jarg2; 
  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (OpenBabel::OBBase *)(arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  *(OpenBabel::OBBase **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1ClassDescription(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)OpenBabel::OBBase::ClassDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1GetTitle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; bool arg2 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBase **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (char *)((OpenBabel::OBBase const *)arg1)->GetTitle(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1GetTitle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; char *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBase **)&jarg1;  result = (char *)((OpenBabel::OBBase const *)arg1)->GetTitle();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1SetTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1;  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ; }  (arg1)->SetTitle((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1HasData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBase **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->HasData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1HasData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; unsigned int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBase **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->HasData(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBGenericData * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBGenericData * > & reference is null");
    return ; }   (arg1)->DeleteData(*arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1DeleteData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBase **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->DeleteData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1CloneData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (arg1)->CloneData(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; size_t result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1;  result = ((OpenBabel::OBBase const *)arg1)->DataSize(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (OpenBabel::OBGenericData *)(arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1GetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; std::string *arg2 = 0 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBase **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBGenericData *)(arg1)->GetData((std::string const &)*arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1GetAllData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; unsigned int arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (arg1)->GetAllData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1GetData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1;  result = (std::vector< OpenBabel::OBGenericData * > *) &(arg1)->GetData();
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; OpenBabel::DataOrigin arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = (OpenBabel::DataOrigin)jarg2;  result = (arg1)->GetData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1;  result = (arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBase_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1;  result = (arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBBase(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBBase *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBBase *)new OpenBabel::OBBase();
  *(OpenBabel::OBBase **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBCommentData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBCommentData *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBCommentData *)new OpenBabel::OBCommentData(); *(OpenBabel::OBCommentData **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBCommentData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBCommentData *arg1 = 0 ; OpenBabel::OBCommentData *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBCommentData **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBCommentData const & reference is null");
    return 0; }   result = (OpenBabel::OBCommentData *)new OpenBabel::OBCommentData((OpenBabel::OBCommentData const &)*arg1);
  *(OpenBabel::OBCommentData **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCommentData_1SetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBCommentData *arg1 = (OpenBabel::OBCommentData *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBCommentData **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetData((std::string const &)*arg2); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCommentData_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBCommentData *arg1 = (OpenBabel::OBCommentData *) 0 ; std::string *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBCommentData **)&jarg1; 
  result = (std::string *) &((OpenBabel::OBCommentData const *)arg1)->GetData(); jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBCommentData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBCommentData *arg1 = (OpenBabel::OBCommentData *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBCommentData **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBExternalBond_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBExternalBond *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBExternalBond *)new OpenBabel::OBExternalBond(); *(OpenBabel::OBExternalBond **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBExternalBond_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  int arg3 ; OpenBabel::OBExternalBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = *(OpenBabel::OBBond **)&jarg2;  arg3 = (int)jarg3; 
  result = (OpenBabel::OBExternalBond *)new OpenBabel::OBExternalBond(arg1,arg2,arg3);
  *(OpenBabel::OBExternalBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBExternalBond_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBExternalBond *arg1 = 0 ; OpenBabel::OBExternalBond *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBExternalBond **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBExternalBond const & reference is null");
    return 0; }   result = (OpenBabel::OBExternalBond *)new OpenBabel::OBExternalBond((OpenBabel::OBExternalBond const &)*arg1);
  *(OpenBabel::OBExternalBond **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBExternalBond(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1;  delete arg1; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBExternalBond_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  result = (int)((OpenBabel::OBExternalBond const *)arg1)->GetIdx(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBExternalBond_1GetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBExternalBond const *)arg1)->GetAtom(); *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBExternalBond_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ; OpenBabel::OBBond *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  result = (OpenBabel::OBBond *)((OpenBabel::OBExternalBond const *)arg1)->GetBond(); *(OpenBabel::OBBond **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBExternalBond_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetIdx(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBExternalBond_1SetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  (arg1)->SetAtom(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBExternalBond_1SetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ; OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2;  (arg1)->SetBond(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBExternalBondData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBExternalBondData *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBExternalBondData *)new OpenBabel::OBExternalBondData();
  *(OpenBabel::OBExternalBondData **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBExternalBondData_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  OpenBabel::OBExternalBondData *arg1 = (OpenBabel::OBExternalBondData *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; int arg4 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBExternalBondData **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = *(OpenBabel::OBBond **)&jarg3;  arg4 = (int)jarg4; 
  (arg1)->SetData(arg2,arg3,arg4); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBExternalBondData_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBExternalBondData *arg1 = (OpenBabel::OBExternalBondData *) 0 ;
  std::vector< OpenBabel::OBExternalBond > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBExternalBondData **)&jarg1;  result = (std::vector< OpenBabel::OBExternalBond > *)(arg1)->GetData();
  *(std::vector< OpenBabel::OBExternalBond > **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBExternalBondData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBExternalBondData *arg1 = (OpenBabel::OBExternalBondData *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBExternalBondData **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBPairData(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBPairData *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBPairData *)new OpenBabel::OBPairData();
  *(OpenBabel::OBPairData **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPairData_1SetValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBPairData *arg1 = (OpenBabel::OBPairData *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBPairData **)&jarg1;  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ; }  (arg1)->SetValue((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBPairData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBPairData *arg1 = (OpenBabel::OBPairData *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBPairData **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBSetData(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBSetData *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBSetData *)new OpenBabel::OBSetData();
  *(OpenBabel::OBSetData **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSetData_1AddData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ; OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (arg1)->AddData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSetData_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ; std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBGenericData * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBGenericData * > & reference is null");
    return ; }   (arg1)->SetData(*arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSetData_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ; char *arg2 = (char *) 0 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  result = (OpenBabel::OBGenericData *)(arg1)->GetData((char const *)arg2); *(OpenBabel::OBGenericData **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSetData_1GetData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  result = (std::vector< OpenBabel::OBGenericData * > *) &((OpenBabel::OBSetData const *)arg1)->GetData();
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSetData_1GetBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSetData **)&jarg1;  result = (arg1)->GetBegin();
  *(std::vector< OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector< OpenBabel::OBGenericData * >::iterator((const std::vector< OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSetData_1GetEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSetData **)&jarg1;  result = (arg1)->GetEnd();
  *(std::vector< OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector< OpenBabel::OBGenericData * >::iterator((const std::vector< OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSetData_1DeleteData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ; OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBSetData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBVirtualBond_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBVirtualBond *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBVirtualBond *)new OpenBabel::OBVirtualBond(); *(OpenBabel::OBVirtualBond **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBVirtualBond_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ; unsigned int arg1 ; unsigned int arg2 ; unsigned int arg3 ; int arg4 ;
  OpenBabel::OBVirtualBond *result = 0 ; (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1;  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3;  arg4 = (int)jarg4; 
  result = (OpenBabel::OBVirtualBond *)new OpenBabel::OBVirtualBond(arg1,arg2,arg3,arg4);
  *(OpenBabel::OBVirtualBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBVirtualBond_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ; unsigned int arg1 ; unsigned int arg2 ; unsigned int arg3 ; OpenBabel::OBVirtualBond *result = 0 ;
  (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1;  arg2 = (unsigned int)jarg2;  arg3 = (unsigned int)jarg3; 
  result = (OpenBabel::OBVirtualBond *)new OpenBabel::OBVirtualBond(arg1,arg2,arg3);
  *(OpenBabel::OBVirtualBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBVirtualBond_1GetBgn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBVirtualBond **)&jarg1;  result = (unsigned int)(arg1)->GetBgn();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBVirtualBond_1GetEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBVirtualBond **)&jarg1;  result = (unsigned int)(arg1)->GetEnd();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBVirtualBond_1GetOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBVirtualBond **)&jarg1;  result = (unsigned int)(arg1)->GetOrder();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBVirtualBond_1GetStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBVirtualBond **)&jarg1;  result = (int)(arg1)->GetStereo(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBVirtualBond(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBVirtualBond **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBRingData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBRingData *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBRingData *)new OpenBabel::OBRingData(); *(OpenBabel::OBRingData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBRingData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRingData *arg1 = 0 ; OpenBabel::OBRingData *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRingData **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBRingData const & reference is null"); return 0; }
    result = (OpenBabel::OBRingData *)new OpenBabel::OBRingData((OpenBabel::OBRingData const &)*arg1);
  *(OpenBabel::OBRingData **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBRingData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBRingData **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRingData_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ; std::vector< OpenBabel::OBRing * > *arg2 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRingData **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBRing * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBRing * > & reference is null");
    return ; }   (arg1)->SetData(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRingData_1PushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ; OpenBabel::OBRing *arg2 = (OpenBabel::OBRing *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRingData **)&jarg1;  arg2 = *(OpenBabel::OBRing **)&jarg2; 
  (arg1)->PushBack(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRingData_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  std::vector< OpenBabel::OBRing * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRingData **)&jarg1;  result = (std::vector< OpenBabel::OBRing * > *) &(arg1)->GetData();
  *(std::vector< OpenBabel::OBRing * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRingData_1BeginRings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBRing * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRingData **)&jarg1;  result = (arg1)->BeginRings();
  *(std::vector< OpenBabel::OBRing * >::iterator **)&jresult = new std::vector< OpenBabel::OBRing * >::iterator((const std::vector< OpenBabel::OBRing * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRingData_1EndRings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBRing * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRingData **)&jarg1;  result = (arg1)->EndRings();
  *(std::vector< OpenBabel::OBRing * >::iterator **)&jresult = new std::vector< OpenBabel::OBRing * >::iterator((const std::vector< OpenBabel::OBRing * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRingData_1BeginRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  std::vector< OpenBabel::OBRing * >::iterator *arg2 = 0 ; OpenBabel::OBRing *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRingData **)&jarg1;  arg2 = *(std::vector< OpenBabel::OBRing * >::iterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBRing * >::iterator & reference is null");
    return 0; }   result = (OpenBabel::OBRing *)(arg1)->BeginRing(*arg2); *(OpenBabel::OBRing **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRingData_1NextRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  std::vector< OpenBabel::OBRing * >::iterator *arg2 = 0 ; OpenBabel::OBRing *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRingData **)&jarg1;  arg2 = *(std::vector< OpenBabel::OBRing * >::iterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBRing * >::iterator & reference is null");
    return 0; }   result = (OpenBabel::OBRing *)(arg1)->NextRing(*arg2); *(OpenBabel::OBRing **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBUnitCell_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBUnitCell *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBUnitCell *)new OpenBabel::OBUnitCell(); *(OpenBabel::OBUnitCell **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBUnitCell_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBUnitCell *arg1 = 0 ; OpenBabel::OBUnitCell *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBUnitCell const & reference is null"); return 0; }
    result = (OpenBabel::OBUnitCell *)new OpenBabel::OBUnitCell((OpenBabel::OBUnitCell const &)*arg1);
  *(OpenBabel::OBUnitCell **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBUnitCell(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1SetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; double arg2 ; double arg3 ; double arg4 ; double arg5 ;
  double arg6 ; double arg7 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  arg2 = (double)jarg2;  arg3 = (double)jarg3;  arg4 = (double)jarg4;  arg5 = (double)jarg5;  arg6 = (double)jarg6; 
  arg7 = (double)jarg7;  (arg1)->SetData(arg2,arg3,arg4,arg5,arg6,arg7); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1SetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 arg3 ;
  OpenBabel::vector3 arg4 ; OpenBabel::vector3 const *argp2 ; OpenBabel::vector3 const *argp3 ;
  OpenBabel::vector3 const *argp4 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  argp2 = *(OpenBabel::vector3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return ; }  arg2 = *argp2;  argp3 = *(OpenBabel::vector3 **)&jarg3;  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return ; }  arg3 = *argp3;  argp4 = *(OpenBabel::vector3 **)&jarg4;  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return ; }  arg4 = *argp4;  (arg1)->SetData(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1SetData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::matrix3x3 arg2 ; OpenBabel::matrix3x3 const *argp2 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  argp2 = *(OpenBabel::matrix3x3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::matrix3x3 const");
    return ; }  arg2 = *argp2;  (arg1)->SetData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1SetOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 const *argp2 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  argp2 = *(OpenBabel::vector3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return ; }  arg2 = *argp2;  (arg1)->SetOffset(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1SetSpaceGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::SpaceGroup *arg2 = (OpenBabel::SpaceGroup *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  arg2 = *(OpenBabel::SpaceGroup **)&jarg2;  (arg1)->SetSpaceGroup((OpenBabel::SpaceGroup const *)arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1SetSpaceGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; std::string arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ; (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  (arg1)->SetSpaceGroup(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1SetSpaceGroup_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetSpaceGroup(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1SetLatticeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::OBUnitCell::LatticeType arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  arg2 = (OpenBabel::OBUnitCell::LatticeType)jarg2; 
  (arg1)->SetLatticeType(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1FillUnitCell(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  (arg1)->FillUnitCell(arg2); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetA_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  result = (double)(arg1)->GetA(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  result = (double)(arg1)->GetB(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetC_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  result = (double)(arg1)->GetC(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetAlpha_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  result = (double)(arg1)->GetAlpha(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetBeta_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  result = (double)(arg1)->GetBeta(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetGamma_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  result = (double)(arg1)->GetGamma(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetOffset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  result = (arg1)->GetOffset();
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetSpaceGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::SpaceGroup *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (OpenBabel::SpaceGroup *)(arg1)->GetSpaceGroup(); *(OpenBabel::SpaceGroup **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetSpaceGroupName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  result = (arg1)->GetSpaceGroupName();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetLatticeType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; int arg2 ;
  OpenBabel::OBUnitCell::LatticeType result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  arg2 = (int)jarg2;  result = (OpenBabel::OBUnitCell::LatticeType)(arg1)->GetLatticeType(arg2); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetLatticeType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::OBUnitCell::LatticeType result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (OpenBabel::OBUnitCell::LatticeType)(arg1)->GetLatticeType(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetCellVectors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; std::vector< OpenBabel::vector3 > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  result = (arg1)->GetCellVectors();
  *(std::vector< OpenBabel::vector3 > **)&jresult = new std::vector< OpenBabel::vector3 >((const std::vector< OpenBabel::vector3 > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetCellMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::matrix3x3 result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  result = (arg1)->GetCellMatrix();
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetOrthoMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::matrix3x3 result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  result = (arg1)->GetOrthoMatrix();
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetOrientationMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::matrix3x3 result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  result = (arg1)->GetOrientationMatrix();
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetFractionalMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::matrix3x3 result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  result = (arg1)->GetFractionalMatrix();
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1FractionalToCartesian_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 *argp2 ; OpenBabel::vector3 result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  argp2 = *(OpenBabel::vector3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg2 = *argp2;  result = (arg1)->FractionalToCartesian(arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1CartesianToFractional_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 *argp2 ; OpenBabel::vector3 result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  argp2 = *(OpenBabel::vector3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg2 = *argp2;  result = (arg1)->CartesianToFractional(arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1WrapCartesianCoordinate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 *argp2 ; OpenBabel::vector3 result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  argp2 = *(OpenBabel::vector3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg2 = *argp2;  result = (arg1)->WrapCartesianCoordinate(arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1WrapFractionalCoordinate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 *argp2 ; OpenBabel::vector3 result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  argp2 = *(OpenBabel::vector3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg2 = *argp2;  result = (arg1)->WrapFractionalCoordinate(arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1UnwrapCartesianNear_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 arg3 ; OpenBabel::vector3 *argp2 ; OpenBabel::vector3 *argp3 ; OpenBabel::vector3 result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  argp2 = *(OpenBabel::vector3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg2 = *argp2;  argp3 = *(OpenBabel::vector3 **)&jarg3;  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg3 = *argp3;  result = (arg1)->UnwrapCartesianNear(arg2,arg3);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1UnwrapFractionalNear_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 arg3 ; OpenBabel::vector3 *argp2 ; OpenBabel::vector3 *argp3 ; OpenBabel::vector3 result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  argp2 = *(OpenBabel::vector3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg2 = *argp2;  argp3 = *(OpenBabel::vector3 **)&jarg3;  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg3 = *argp3;  result = (arg1)->UnwrapFractionalNear(arg2,arg3);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1MinimumImageCartesian_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 *argp2 ; OpenBabel::vector3 result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  argp2 = *(OpenBabel::vector3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg2 = *argp2;  result = (arg1)->MinimumImageCartesian(arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1MinimumImageFractional_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 *argp2 ; OpenBabel::vector3 result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  argp2 = *(OpenBabel::vector3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg2 = *argp2;  result = (arg1)->MinimumImageFractional(arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetSpaceGroupNumber_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; std::string arg2 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr); jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  result = (int)(arg1)->GetSpaceGroupNumber(arg2);
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetSpaceGroupNumber_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  result = (int)(arg1)->GetSpaceGroupNumber(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1GetCellVolume_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBUnitCell **)&jarg1;  result = (double)(arg1)->GetCellVolume(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBConformerData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBConformerData *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBConformerData *)new OpenBabel::OBConformerData(); *(OpenBabel::OBConformerData **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBConformerData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConformerData *arg1 = 0 ; OpenBabel::OBConformerData *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBConformerData **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBConformerData const & reference is null");
    return 0; }  
  result = (OpenBabel::OBConformerData *)new OpenBabel::OBConformerData((OpenBabel::OBConformerData const &)*arg1);
  *(OpenBabel::OBConformerData **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBConformerData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerData_1SetDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ; SwigValueWrapper< std::vector< unsigned short > > arg2 ;
  std::vector< unsigned short > *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  argp2 = *(std::vector< unsigned short > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned short >");
    return ; }  arg2 = *argp2;  (arg1)->SetDimension(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerData_1SetEnergies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ; std::vector< double > arg2 ;
  std::vector< double > *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1;  argp2 = *(std::vector< double > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >"); return ; }
   arg2 = *argp2;  (arg1)->SetEnergies(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerData_1SetForces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ; std::vector< std::vector< OpenBabel::vector3 > > arg2 ;
  std::vector< std::vector< OpenBabel::vector3 > > *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1;  argp2 = *(std::vector< std::vector< OpenBabel::vector3 > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::vector< OpenBabel::vector3 > >");
    return ; }  arg2 = *argp2;  (arg1)->SetForces(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerData_1SetVelocities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ; std::vector< std::vector< OpenBabel::vector3 > > arg2 ;
  std::vector< std::vector< OpenBabel::vector3 > > *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1;  argp2 = *(std::vector< std::vector< OpenBabel::vector3 > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::vector< OpenBabel::vector3 > >");
    return ; }  arg2 = *argp2;  (arg1)->SetVelocities(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerData_1SetDisplacements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ; std::vector< std::vector< OpenBabel::vector3 > > arg2 ;
  std::vector< std::vector< OpenBabel::vector3 > > *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1;  argp2 = *(std::vector< std::vector< OpenBabel::vector3 > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::vector< OpenBabel::vector3 > >");
    return ; }  arg2 = *argp2;  (arg1)->SetDisplacements(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerData_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ; std::vector< std::string > arg2 ;
  std::vector< std::string > *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1;  argp2 = *(std::vector< std::string > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::string >");
    return ; }  arg2 = *argp2;  (arg1)->SetData(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerData_1GetDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper< std::vector< unsigned short > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1;  result = (arg1)->GetDimension();
  *(std::vector< unsigned short > **)&jresult = new std::vector< unsigned short >((const std::vector< unsigned short > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerData_1GetEnergies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ; std::vector< double > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConformerData **)&jarg1;  result = (arg1)->GetEnergies();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerData_1GetForces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  std::vector< std::vector< OpenBabel::vector3 > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1;  result = (arg1)->GetForces();
  *(std::vector< std::vector< OpenBabel::vector3 > > **)&jresult = new std::vector< std::vector< OpenBabel::vector3 > >((const std::vector< std::vector< OpenBabel::vector3 > > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerData_1GetVelocities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  std::vector< std::vector< OpenBabel::vector3 > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1;  result = (arg1)->GetVelocities();
  *(std::vector< std::vector< OpenBabel::vector3 > > **)&jresult = new std::vector< std::vector< OpenBabel::vector3 > >((const std::vector< std::vector< OpenBabel::vector3 > > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerData_1GetDisplacements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  std::vector< std::vector< OpenBabel::vector3 > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1;  result = (arg1)->GetDisplacements();
  *(std::vector< std::vector< OpenBabel::vector3 > > **)&jresult = new std::vector< std::vector< OpenBabel::vector3 > >((const std::vector< std::vector< OpenBabel::vector3 > > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerData_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ; std::vector< std::string > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConformerData **)&jarg1;  result = (arg1)->GetData();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBSymmetryData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBSymmetryData *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBSymmetryData *)new OpenBabel::OBSymmetryData(); *(OpenBabel::OBSymmetryData **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBSymmetryData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSymmetryData *arg1 = 0 ; OpenBabel::OBSymmetryData *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBSymmetryData **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBSymmetryData const & reference is null");
    return 0; }   result = (OpenBabel::OBSymmetryData *)new OpenBabel::OBSymmetryData((OpenBabel::OBSymmetryData const &)*arg1);
  *(OpenBabel::OBSymmetryData **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBSymmetryData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSymmetryData_1SetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ; std::string arg2 ; std::string arg3 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSymmetryData **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ; (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return ; (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  (arg1)->SetData(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSymmetryData_1SetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ; std::string arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ; (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  (arg1)->SetData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSymmetryData_1SetPointGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ; std::string arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ; (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  (arg1)->SetPointGroup(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSymmetryData_1SetSpaceGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ; std::string arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ; (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  (arg1)->SetSpaceGroup(arg2); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSymmetryData_1GetPointGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSymmetryData **)&jarg1;  result = (arg1)->GetPointGroup();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSymmetryData_1GetSpaceGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSymmetryData **)&jarg1;  result = (arg1)->GetSpaceGroup();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBTorsion_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBTorsion *arg1 = 0 ; OpenBabel::OBTorsion *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBTorsion const & reference is null"); return 0; }
    result = (OpenBabel::OBTorsion *)new OpenBabel::OBTorsion((OpenBabel::OBTorsion const &)*arg1);
  *(OpenBabel::OBTorsion **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBTorsion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsion_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1;  (arg1)->Clear(); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsion_1Empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBTorsion **)&jarg1;  result = (bool)(arg1)->Empty(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsion_1AddTorsion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ; OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg5 = (OpenBabel::OBAtom *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; (void)jarg5_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4;  arg5 = *(OpenBabel::OBAtom **)&jarg5; 
  result = (bool)(arg1)->AddTorsion(arg2,arg3,arg4,arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsion_1AddTorsion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  OpenBabel::quad< OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  arg2 = *(OpenBabel::quad< OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::quad< OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > & reference is null");
    return 0; }   result = (bool)(arg1)->AddTorsion(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsion_1SetAngle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; double arg2 ; unsigned int arg3 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTorsion **)&jarg1;  arg2 = (double)jarg2; 
  arg3 = (unsigned int)jarg3;  result = (bool)(arg1)->SetAngle(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsion_1SetAngle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; double arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTorsion **)&jarg1;  arg2 = (double)jarg2; 
  result = (bool)(arg1)->SetAngle(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsion_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1;  arg2 = *(OpenBabel::OBBond **)&jarg2;  result = (bool)(arg1)->SetData(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsion_1GetAngle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; double *arg2 = 0 ; unsigned int arg3 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTorsion **)&jarg1;  arg2 = *(double **)&jarg2;
  if (!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null"); return 0; }  
  arg3 = (unsigned int)jarg3;  result = (bool)(arg1)->GetAngle(*arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsion_1GetAngle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; double *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTorsion **)&jarg1;  arg2 = *(double **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null"); return 0; }  
  result = (bool)(arg1)->GetAngle(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsion_1GetBondIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBTorsion **)&jarg1;  result = (unsigned int)(arg1)->GetBondIdx(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsion_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; size_t result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBTorsion **)&jarg1;  result = ((OpenBabel::OBTorsion const *)arg1)->GetSize();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsion_1GetBC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  SwigValueWrapper< std::pair< OpenBabel::OBAtom *,OpenBabel::OBAtom * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1;  result = (arg1)->GetBC();
  *(std::pair< OpenBabel::OBAtom *,OpenBabel::OBAtom * > **)&jresult = new std::pair< OpenBabel::OBAtom *,OpenBabel::OBAtom * >((const std::pair< OpenBabel::OBAtom *,OpenBabel::OBAtom * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsion_1GetADs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::triple< OpenBabel::OBAtom *,OpenBabel::OBAtom *,double > > > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTorsion **)&jarg1;  result = (arg1)->GetADs();
  *(std::vector< OpenBabel::triple< OpenBabel::OBAtom *,OpenBabel::OBAtom *,double > > **)&jresult = new std::vector< OpenBabel::triple< OpenBabel::OBAtom *,OpenBabel::OBAtom *,double > >((const std::vector< OpenBabel::triple< OpenBabel::OBAtom *,OpenBabel::OBAtom *,double > > &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsion_1IsProtonRotor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBTorsion **)&jarg1;  result = (bool)(arg1)->IsProtonRotor(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsionData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1;  (arg1)->Clear(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsionData_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBTorsion > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1;  result = ((OpenBabel::OBTorsionData const *)arg1)->GetData();
  *(std::vector< OpenBabel::OBTorsion > **)&jresult = new std::vector< OpenBabel::OBTorsion >((const std::vector< OpenBabel::OBTorsion > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsionData_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ; size_t result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBTorsionData **)&jarg1;  result = ((OpenBabel::OBTorsionData const *)arg1)->GetSize();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsionData_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ; OpenBabel::OBTorsion *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBTorsionData **)&jarg1;  arg2 = *(OpenBabel::OBTorsion **)&jarg2;
  if (!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBTorsion & reference is null");
    return ; }   (arg1)->SetData(*arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsionData_1FillTorsionArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  std::vector< std::vector< unsigned int > > *arg2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1;  arg2 = *(std::vector< std::vector< unsigned int > > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< unsigned int > > & reference is null");
    return 0; }   result = (bool)(arg1)->FillTorsionArray(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBTorsionData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAngle_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAngle *arg1 = 0 ; OpenBabel::OBAngle *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAngle **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAngle const & reference is null"); return 0; }  
  result = (OpenBabel::OBAngle *)new OpenBabel::OBAngle((OpenBabel::OBAngle const &)*arg1);
  *(OpenBabel::OBAngle **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBAngle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBAngle **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAngle_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAngle **)&jarg1;  (arg1)->Clear(); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAngle_1GetAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAngle **)&jarg1;  result = (double)((OpenBabel::OBAngle const *)arg1)->GetAngle();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAngle_1SetAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAngle **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetAngle(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAngle_1SetAtoms_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; arg1 = *(OpenBabel::OBAngle **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = *(OpenBabel::OBAtom **)&jarg3;  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  (arg1)->SetAtoms(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAngle_1SetAtoms_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ;
  OpenBabel::triple< OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAngle **)&jarg1; 
  arg2 = *(OpenBabel::triple< OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::triple< OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > & reference is null");
    return ; }   (arg1)->SetAtoms(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAngleData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAngleData **)&jarg1;  (arg1)->Clear(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAngleData_1FillAngleArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ; OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ; int **arg2 = (int **) 0 ;
  unsigned int *arg3 = 0 ; unsigned int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAngleData **)&jarg1;  arg2 = *(int ***)&jarg2;  arg3 = *(unsigned int **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null"); return 0; }  
  result = (unsigned int)(arg1)->FillAngleArray(arg2,*arg3); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAngleData_1FillAngleArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ;
  std::vector< std::vector< unsigned int > > *arg2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAngleData **)&jarg1;  arg2 = *(std::vector< std::vector< unsigned int > > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< unsigned int > > & reference is null");
    return 0; }   result = (bool)(arg1)->FillAngleArray(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAngleData_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ; OpenBabel::OBAngle *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAngleData **)&jarg1;  arg2 = *(OpenBabel::OBAngle **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAngle & reference is null"); return ; }  
  (arg1)->SetData(*arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAngleData_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ; size_t result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAngleData **)&jarg1;  result = ((OpenBabel::OBAngleData const *)arg1)->GetSize();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBAngleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBAngleData **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBSerialNums_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBSerialNums *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBSerialNums *)new OpenBabel::OBSerialNums(); *(OpenBabel::OBSerialNums **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBSerialNums_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSerialNums *arg1 = 0 ; OpenBabel::OBSerialNums *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBSerialNums **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBSerialNums const & reference is null");
    return 0; }   result = (OpenBabel::OBSerialNums *)new OpenBabel::OBSerialNums((OpenBabel::OBSerialNums const &)*arg1);
  *(OpenBabel::OBSerialNums **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSerialNums_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSerialNums *arg1 = (OpenBabel::OBSerialNums *) 0 ;
  std::map< int,OpenBabel::OBAtom * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSerialNums **)&jarg1;  result = (std::map< int,OpenBabel::OBAtom * > *) &(arg1)->GetData();
  *(std::map< int,OpenBabel::OBAtom * > **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSerialNums_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBSerialNums *arg1 = (OpenBabel::OBSerialNums *) 0 ; std::map< int,OpenBabel::OBAtom * > *arg2 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSerialNums **)&jarg1;  arg2 = *(std::map< int,OpenBabel::OBAtom * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,OpenBabel::OBAtom * > & reference is null");
    return ; }   (arg1)->SetData(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBSerialNums(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSerialNums *arg1 = (OpenBabel::OBSerialNums *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBSerialNums **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBVibrationData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBVibrationData *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBVibrationData *)new OpenBabel::OBVibrationData(); *(OpenBabel::OBVibrationData **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBVibrationData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBVibrationData *arg1 = (OpenBabel::OBVibrationData *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBVibrationData **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBVibrationData_1SetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenBabel::OBVibrationData *arg1 = (OpenBabel::OBVibrationData *) 0 ;
  std::vector< std::vector< OpenBabel::vector3 > > *arg2 = 0 ; std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(OpenBabel::OBVibrationData **)&jarg1;  arg2 = *(std::vector< std::vector< OpenBabel::vector3 > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< OpenBabel::vector3 > > const & reference is null");
    return ; }   arg3 = *(std::vector< double > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null"); return ; }
    arg4 = *(std::vector< double > **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null"); return ; }
   
  (arg1)->SetData((std::vector< std::vector< OpenBabel::vector3 > > const &)*arg2,(std::vector< double > const &)*arg3,(std::vector< double > const &)*arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBVibrationData_1SetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  OpenBabel::OBVibrationData *arg1 = (OpenBabel::OBVibrationData *) 0 ;
  std::vector< std::vector< OpenBabel::vector3 > > *arg2 = 0 ; std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ; std::vector< double > *arg5 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; (void)jarg5_; arg1 = *(OpenBabel::OBVibrationData **)&jarg1; 
  arg2 = *(std::vector< std::vector< OpenBabel::vector3 > > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< OpenBabel::vector3 > > const & reference is null");
    return ; }   arg3 = *(std::vector< double > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null"); return ; }
    arg4 = *(std::vector< double > **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null"); return ; }
    arg5 = *(std::vector< double > **)&jarg5; if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null"); return ; }
   
  (arg1)->SetData((std::vector< std::vector< OpenBabel::vector3 > > const &)*arg2,(std::vector< double > const &)*arg3,(std::vector< double > const &)*arg4,(std::vector< double > const &)*arg5); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBVibrationData_1GetLx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBVibrationData *arg1 = (OpenBabel::OBVibrationData *) 0 ;
  std::vector< std::vector< OpenBabel::vector3 > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBVibrationData **)&jarg1;  result = ((OpenBabel::OBVibrationData const *)arg1)->GetLx();
  *(std::vector< std::vector< OpenBabel::vector3 > > **)&jresult = new std::vector< std::vector< OpenBabel::vector3 > >((const std::vector< std::vector< OpenBabel::vector3 > > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBVibrationData_1GetFrequencies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBVibrationData *arg1 = (OpenBabel::OBVibrationData *) 0 ; std::vector< double > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBVibrationData **)&jarg1; 
  result = ((OpenBabel::OBVibrationData const *)arg1)->GetFrequencies();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBVibrationData_1GetIntensities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBVibrationData *arg1 = (OpenBabel::OBVibrationData *) 0 ; std::vector< double > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBVibrationData **)&jarg1; 
  result = ((OpenBabel::OBVibrationData const *)arg1)->GetIntensities();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBVibrationData_1GetRamanActivities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBVibrationData *arg1 = (OpenBabel::OBVibrationData *) 0 ; std::vector< double > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBVibrationData **)&jarg1; 
  result = ((OpenBabel::OBVibrationData const *)arg1)->GetRamanActivities();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBVibrationData_1GetNumberOfFrequencies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBVibrationData *arg1 = (OpenBabel::OBVibrationData *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBVibrationData **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBVibrationData const *)arg1)->GetNumberOfFrequencies(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBDOSData(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBDOSData *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBDOSData *)new OpenBabel::OBDOSData();
  *(OpenBabel::OBDOSData **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBDOSData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBDOSData *arg1 = (OpenBabel::OBDOSData *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBDOSData **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDOSData_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  OpenBabel::OBDOSData *arg1 = (OpenBabel::OBDOSData *) 0 ; double arg2 ; std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ; std::vector< double > *arg5 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  (void)jarg4_; (void)jarg5_; arg1 = *(OpenBabel::OBDOSData **)&jarg1;  arg2 = (double)jarg2; 
  arg3 = *(std::vector< double > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null"); return ; }
    arg4 = *(std::vector< double > **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null"); return ; }
    arg5 = *(std::vector< double > **)&jarg5; if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null"); return ; }
   
  (arg1)->SetData(arg2,(std::vector< double > const &)*arg3,(std::vector< double > const &)*arg4,(std::vector< double > const &)*arg5); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDOSData_1GetFermiEnergy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBDOSData *arg1 = (OpenBabel::OBDOSData *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBDOSData **)&jarg1; 
  result = (double)((OpenBabel::OBDOSData const *)arg1)->GetFermiEnergy(); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDOSData_1GetEnergies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBDOSData *arg1 = (OpenBabel::OBDOSData *) 0 ; std::vector< double > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBDOSData **)&jarg1; 
  result = ((OpenBabel::OBDOSData const *)arg1)->GetEnergies();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDOSData_1GetDensities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBDOSData *arg1 = (OpenBabel::OBDOSData *) 0 ; std::vector< double > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBDOSData **)&jarg1; 
  result = ((OpenBabel::OBDOSData const *)arg1)->GetDensities();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDOSData_1GetIntegration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBDOSData *arg1 = (OpenBabel::OBDOSData *) 0 ; std::vector< double > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBDOSData **)&jarg1; 
  result = ((OpenBabel::OBDOSData const *)arg1)->GetIntegration();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbital_1SetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jstring jarg4) {
  OpenBabel::OBOrbital *arg1 = (OpenBabel::OBOrbital *) 0 ; double arg2 ; double arg3 ; std::string arg4 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBOrbital **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3;  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return ; (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  (arg1)->SetData(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbital_1SetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  OpenBabel::OBOrbital *arg1 = (OpenBabel::OBOrbital *) 0 ; double arg2 ; double arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBOrbital **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3;  (arg1)->SetData(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbital_1SetData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBOrbital *arg1 = (OpenBabel::OBOrbital *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBOrbital **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetData(arg2); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbital_1GetEnergy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBOrbital *arg1 = (OpenBabel::OBOrbital *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBOrbital **)&jarg1;  result = (double)((OpenBabel::OBOrbital const *)arg1)->GetEnergy();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbital_1GetOccupation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBOrbital *arg1 = (OpenBabel::OBOrbital *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBOrbital **)&jarg1; 
  result = (double)((OpenBabel::OBOrbital const *)arg1)->GetOccupation(); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbital_1GetSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBOrbital *arg1 = (OpenBabel::OBOrbital *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBOrbital **)&jarg1;  result = ((OpenBabel::OBOrbital const *)arg1)->GetSymbol();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBOrbital(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBOrbital *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBOrbital *)new OpenBabel::OBOrbital();
  *(OpenBabel::OBOrbital **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBOrbital(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBOrbital *arg1 = (OpenBabel::OBOrbital *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBOrbital **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBOrbitalData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBOrbitalData *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBOrbitalData *)new OpenBabel::OBOrbitalData(); *(OpenBabel::OBOrbitalData **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBOrbitalData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBOrbitalData **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbitalData_1SetAlphaOrbitals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBOrbital > > arg2 ; std::vector< OpenBabel::OBOrbital > *argp2 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBOrbitalData **)&jarg1; 
  argp2 = *(std::vector< OpenBabel::OBOrbital > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< OpenBabel::OBOrbital >");
    return ; }  arg2 = *argp2;  (arg1)->SetAlphaOrbitals(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbitalData_1SetBetaOrbitals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBOrbital > > arg2 ; std::vector< OpenBabel::OBOrbital > *argp2 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBOrbitalData **)&jarg1; 
  argp2 = *(std::vector< OpenBabel::OBOrbital > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< OpenBabel::OBOrbital >");
    return ; }  arg2 = *argp2;  (arg1)->SetBetaOrbitals(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbitalData_1SetHOMO_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ; int arg2 ; int arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBOrbitalData **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3;  (arg1)->SetHOMO(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbitalData_1SetHOMO_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBOrbitalData **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetHOMO(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbitalData_1SetOpenShell(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBOrbitalData **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetOpenShell(arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbitalData_1IsOpenShell(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBOrbitalData **)&jarg1;  result = (bool)(arg1)->IsOpenShell(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbitalData_1GetAlphaHOMO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBOrbitalData **)&jarg1;  result = (unsigned int)(arg1)->GetAlphaHOMO();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbitalData_1GetBetaHOMO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBOrbitalData **)&jarg1;  result = (unsigned int)(arg1)->GetBetaHOMO();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbitalData_1GetAlphaOrbitals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBOrbital > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBOrbitalData **)&jarg1;  result = (arg1)->GetAlphaOrbitals();
  *(std::vector< OpenBabel::OBOrbital > **)&jresult = new std::vector< OpenBabel::OBOrbital >((const std::vector< OpenBabel::OBOrbital > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbitalData_1GetBetaOrbitals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBOrbital > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBOrbitalData **)&jarg1;  result = (arg1)->GetBetaOrbitals();
  *(std::vector< OpenBabel::OBOrbital > **)&jresult = new std::vector< OpenBabel::OBOrbital >((const std::vector< OpenBabel::OBOrbital > &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbitalData_1LoadClosedShellOrbitals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ; std::vector< double > arg2 ;
  std::vector< std::string > arg3 ; unsigned int arg4 ; std::vector< double > *argp2 ; std::vector< std::string > *argp3 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBOrbitalData **)&jarg1; 
  argp2 = *(std::vector< double > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >"); return ; }
   arg2 = *argp2;  argp3 = *(std::vector< std::string > **)&jarg3;  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::string >");
    return ; }  arg3 = *argp3;  arg4 = (unsigned int)jarg4;  (arg1)->LoadClosedShellOrbitals(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbitalData_1LoadAlphaOrbitals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ; std::vector< double > arg2 ;
  std::vector< std::string > arg3 ; unsigned int arg4 ; std::vector< double > *argp2 ; std::vector< std::string > *argp3 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBOrbitalData **)&jarg1; 
  argp2 = *(std::vector< double > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >"); return ; }
   arg2 = *argp2;  argp3 = *(std::vector< std::string > **)&jarg3;  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::string >");
    return ; }  arg3 = *argp3;  arg4 = (unsigned int)jarg4;  (arg1)->LoadAlphaOrbitals(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbitalData_1LoadBetaOrbitals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  OpenBabel::OBOrbitalData *arg1 = (OpenBabel::OBOrbitalData *) 0 ; std::vector< double > arg2 ;
  std::vector< std::string > arg3 ; unsigned int arg4 ; std::vector< double > *argp2 ; std::vector< std::string > *argp3 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBOrbitalData **)&jarg1; 
  argp2 = *(std::vector< double > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >"); return ; }
   arg2 = *argp2;  argp3 = *(std::vector< std::string > **)&jarg3;  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::string >");
    return ; }  arg3 = *argp3;  arg4 = (unsigned int)jarg4;  (arg1)->LoadBetaOrbitals(arg2,arg3,arg4); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBElectronicTransitionData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBElectronicTransitionData *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBElectronicTransitionData *)new OpenBabel::OBElectronicTransitionData();
  *(OpenBabel::OBElectronicTransitionData **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBElectronicTransitionData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBElectronicTransitionData **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBElectronicTransitionData_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ; std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(OpenBabel::OBElectronicTransitionData **)&jarg1;  arg2 = *(std::vector< double > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null"); return ; }
    arg3 = *(std::vector< double > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null"); return ; }
    (arg1)->SetData((std::vector< double > const &)*arg2,(std::vector< double > const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBElectronicTransitionData_1SetEDipole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ; std::vector< double > *arg2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBElectronicTransitionData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null"); return ; }
    (arg1)->SetEDipole((std::vector< double > const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBElectronicTransitionData_1SetRotatoryStrengthsVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ; std::vector< double > *arg2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBElectronicTransitionData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null"); return ; }
    (arg1)->SetRotatoryStrengthsVelocity((std::vector< double > const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBElectronicTransitionData_1SetRotatoryStrengthsLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ; std::vector< double > *arg2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBElectronicTransitionData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null"); return ; }
    (arg1)->SetRotatoryStrengthsLength((std::vector< double > const &)*arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBElectronicTransitionData_1GetWavelengths(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ;
  std::vector< double > result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBElectronicTransitionData **)&jarg1; 
  result = ((OpenBabel::OBElectronicTransitionData const *)arg1)->GetWavelengths();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBElectronicTransitionData_1GetForces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ;
  std::vector< double > result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBElectronicTransitionData **)&jarg1; 
  result = ((OpenBabel::OBElectronicTransitionData const *)arg1)->GetForces();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBElectronicTransitionData_1GetEDipole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ;
  std::vector< double > result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBElectronicTransitionData **)&jarg1; 
  result = ((OpenBabel::OBElectronicTransitionData const *)arg1)->GetEDipole();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBElectronicTransitionData_1GetRotatoryStrengthsVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ;
  std::vector< double > result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBElectronicTransitionData **)&jarg1; 
  result = ((OpenBabel::OBElectronicTransitionData const *)arg1)->GetRotatoryStrengthsVelocity();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBElectronicTransitionData_1GetRotatoryStrengthsLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBElectronicTransitionData *arg1 = (OpenBabel::OBElectronicTransitionData *) 0 ;
  std::vector< double > result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBElectronicTransitionData **)&jarg1; 
  result = ((OpenBabel::OBElectronicTransitionData const *)arg1)->GetRotatoryStrengthsLength();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBRotationData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBRotationData *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBRotationData *)new OpenBabel::OBRotationData(); *(OpenBabel::OBRotationData **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBRotationData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRotationData *arg1 = (OpenBabel::OBRotationData *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBRotationData **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotationData_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  OpenBabel::OBRotationData *arg1 = (OpenBabel::OBRotationData *) 0 ; OpenBabel::OBRotationData::RType arg2 ;
  std::vector< double > arg3 ; int arg4 ; std::vector< double > *argp3 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(OpenBabel::OBRotationData **)&jarg1;  arg2 = (OpenBabel::OBRotationData::RType)jarg2; 
  argp3 = *(std::vector< double > **)&jarg3;  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >"); return ; }
   arg3 = *argp3;  arg4 = (int)jarg4;  (arg1)->SetData(arg2,arg3,arg4); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotationData_1GetRotConsts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotationData *arg1 = (OpenBabel::OBRotationData *) 0 ; std::vector< double > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotationData **)&jarg1; 
  result = ((OpenBabel::OBRotationData const *)arg1)->GetRotConsts();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result);  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotationData_1GetSymmetryNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBRotationData *arg1 = (OpenBabel::OBRotationData *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRotationData **)&jarg1; 
  result = (int)((OpenBabel::OBRotationData const *)arg1)->GetSymmetryNumber(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotationData_1GetRotorType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBRotationData *arg1 = (OpenBabel::OBRotationData *) 0 ;
  OpenBabel::OBRotationData::RType result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotationData **)&jarg1; 
  result = (OpenBabel::OBRotationData::RType)((OpenBabel::OBRotationData const *)arg1)->GetRotorType(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBVectorData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBVectorData *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBVectorData *)new OpenBabel::OBVectorData(); *(OpenBabel::OBVectorData **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBVectorData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBVectorData *arg1 = (OpenBabel::OBVectorData *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBVectorData **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBVectorData_1SetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBVectorData *arg1 = (OpenBabel::OBVectorData *) 0 ; double arg2 ; double arg3 ; double arg4 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBVectorData **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  arg4 = (double)jarg4;  (arg1)->SetData(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBVectorData_1SetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBVectorData *arg1 = (OpenBabel::OBVectorData *) 0 ; OpenBabel::vector3 arg2 ; OpenBabel::vector3 *argp2 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBVectorData **)&jarg1; 
  argp2 = *(OpenBabel::vector3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return ; } 
  arg2 = *argp2;  (arg1)->SetData(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBVectorData_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBVectorData *arg1 = (OpenBabel::OBVectorData *) 0 ; OpenBabel::vector3 result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBVectorData **)&jarg1; 
  result = ((OpenBabel::OBVectorData const *)arg1)->GetData();
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMatrixData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBMatrixData *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBMatrixData *)new OpenBabel::OBMatrixData(); *(OpenBabel::OBMatrixData **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBMatrixData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMatrixData *arg1 = (OpenBabel::OBMatrixData *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBMatrixData **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMatrixData_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMatrixData *arg1 = (OpenBabel::OBMatrixData *) 0 ; OpenBabel::matrix3x3 arg2 ; OpenBabel::matrix3x3 *argp2 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMatrixData **)&jarg1; 
  argp2 = *(OpenBabel::matrix3x3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::matrix3x3"); return ; }
   arg2 = *argp2;  (arg1)->SetData(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMatrixData_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMatrixData *arg1 = (OpenBabel::OBMatrixData *) 0 ; OpenBabel::matrix3x3 result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMatrixData **)&jarg1; 
  result = ((OpenBabel::OBMatrixData const *)arg1)->GetData();
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBFreeGridPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBFreeGridPoint *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBFreeGridPoint *)new OpenBabel::OBFreeGridPoint(); *(OpenBabel::OBFreeGridPoint **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBFreeGridPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ; double arg1 ; double arg2 ; double arg3 ; double arg4 ; OpenBabel::OBFreeGridPoint *result = 0 ;
  (void)jenv; (void)jcls; arg1 = (double)jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3;  arg4 = (double)jarg4; 
  result = (OpenBabel::OBFreeGridPoint *)new OpenBabel::OBFreeGridPoint(arg1,arg2,arg3,arg4);
  *(OpenBabel::OBFreeGridPoint **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBFreeGridPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBFreeGridPoint **)&jarg1;  delete arg1; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFreeGridPoint_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFreeGridPoint **)&jarg1;  result = (double)(arg1)->GetX();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFreeGridPoint_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFreeGridPoint **)&jarg1;  result = (double)(arg1)->GetY();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFreeGridPoint_1GetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFreeGridPoint **)&jarg1;  result = (double)(arg1)->GetZ();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFreeGridPoint_1GetV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFreeGridPoint **)&jarg1;  result = (double)(arg1)->GetV();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFreeGridPoint_1SetX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFreeGridPoint **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetX(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFreeGridPoint_1SetY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFreeGridPoint **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetY(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFreeGridPoint_1SetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFreeGridPoint **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetZ(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFreeGridPoint_1SetV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBFreeGridPoint *arg1 = (OpenBabel::OBFreeGridPoint *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFreeGridPoint **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetV(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBFreeGrid(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBFreeGrid *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBFreeGrid *)new OpenBabel::OBFreeGrid();
  *(OpenBabel::OBFreeGrid **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBFreeGrid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBFreeGrid *arg1 = (OpenBabel::OBFreeGrid *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBFreeGrid **)&jarg1; 
  delete arg1; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFreeGrid_1NumPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBFreeGrid *arg1 = (OpenBabel::OBFreeGrid *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFreeGrid **)&jarg1;  result = (int)(arg1)->NumPoints(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFreeGrid_1AddPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  OpenBabel::OBFreeGrid *arg1 = (OpenBabel::OBFreeGrid *) 0 ; double arg2 ; double arg3 ; double arg4 ; double arg5 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFreeGrid **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  arg4 = (double)jarg4;  arg5 = (double)jarg5;  (arg1)->AddPoint(arg2,arg3,arg4,arg5); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFreeGrid_1BeginPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFreeGrid *arg1 = (OpenBabel::OBFreeGrid *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBFreeGridPoint * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFreeGrid **)&jarg1;  result = (arg1)->BeginPoints();
  *(OpenBabel::OBFreeGridPointIterator **)&jresult = new OpenBabel::OBFreeGridPointIterator((const OpenBabel::OBFreeGridPointIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFreeGrid_1EndPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFreeGrid *arg1 = (OpenBabel::OBFreeGrid *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBFreeGridPoint * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFreeGrid **)&jarg1;  result = (arg1)->EndPoints();
  *(OpenBabel::OBFreeGridPointIterator **)&jresult = new OpenBabel::OBFreeGridPointIterator((const OpenBabel::OBFreeGridPointIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFreeGrid_1BeginPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBFreeGrid *arg1 = (OpenBabel::OBFreeGrid *) 0 ; OpenBabel::OBFreeGridPointIterator *arg2 = 0 ;
  OpenBabel::OBFreeGridPoint *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFreeGrid **)&jarg1; 
  arg2 = *(OpenBabel::OBFreeGridPointIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBFreeGridPointIterator & reference is null");
    return 0; }   result = (OpenBabel::OBFreeGridPoint *)(arg1)->BeginPoint(*arg2);
  *(OpenBabel::OBFreeGridPoint **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFreeGrid_1NextPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBFreeGrid *arg1 = (OpenBabel::OBFreeGrid *) 0 ; OpenBabel::OBFreeGridPointIterator *arg2 = 0 ;
  OpenBabel::OBFreeGridPoint *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFreeGrid **)&jarg1; 
  arg2 = *(OpenBabel::OBFreeGridPointIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBFreeGridPointIterator & reference is null");
    return 0; }   result = (OpenBabel::OBFreeGridPoint *)(arg1)->NextPoint(*arg2);
  *(OpenBabel::OBFreeGridPoint **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFreeGrid_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBFreeGrid *arg1 = (OpenBabel::OBFreeGrid *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFreeGrid **)&jarg1;  (arg1)->Clear(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBPcharge(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBPcharge *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBPcharge *)new OpenBabel::OBPcharge();
  *(OpenBabel::OBPcharge **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBPcharge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBPcharge *arg1 = (OpenBabel::OBPcharge *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBPcharge **)&jarg1; 
  delete arg1; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPcharge_1NumPartialCharges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBPcharge *arg1 = (OpenBabel::OBPcharge *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBPcharge **)&jarg1;  result = (int)(arg1)->NumPartialCharges(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPcharge_1AddPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBPcharge *arg1 = (OpenBabel::OBPcharge *) 0 ; std::vector< double > arg2 ; std::vector< double > *argp2 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBPcharge **)&jarg1; 
  argp2 = *(std::vector< double > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >"); return ; }
   arg2 = *argp2;  (arg1)->AddPartialCharge(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPcharge_1GetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBPcharge *arg1 = (OpenBabel::OBPcharge *) 0 ; std::vector< double > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBPcharge **)&jarg1;  result = (arg1)->GetPartialCharge();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBGridData(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBGridData *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBGridData *)new OpenBabel::OBGridData();
  *(OpenBabel::OBGridData **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBGridData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBGridData **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetAxes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; double *arg2 ; double *arg3 ; double *arg4 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4;  ((OpenBabel::OBGridData const *)arg1)->GetAxes(arg2,arg3,arg4); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetXAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; OpenBabel::vector3 result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1; 
  result = ((OpenBabel::OBGridData const *)arg1)->GetXAxis();
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetYAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; OpenBabel::vector3 result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1; 
  result = ((OpenBabel::OBGridData const *)arg1)->GetYAxis();
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetZAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; OpenBabel::vector3 result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1; 
  result = ((OpenBabel::OBGridData const *)arg1)->GetZAxis();
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetAxes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; OpenBabel::vector3 *arg2 = 0 ; OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 *arg4 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(OpenBabel::OBGridData **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return ; }  
  arg3 = *(OpenBabel::vector3 **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return ; }  
  arg4 = *(OpenBabel::vector3 **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return ; }  
  ((OpenBabel::OBGridData const *)arg1)->GetAxes(*arg2,*arg3,*arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetNumberOfPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; int *arg2 = 0 ; int *arg3 = 0 ; int *arg4 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1;  arg2 = *(int **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null"); return ; }  
  arg3 = *(int **)&jarg3; if (!arg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ; }   arg4 = *(int **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null"); return ; }  
  ((OpenBabel::OBGridData const *)arg1)->GetNumberOfPoints(*arg2,*arg3,*arg4); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetNumberOfPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1; 
  result = (int)((OpenBabel::OBGridData const *)arg1)->GetNumberOfPoints(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetNumberOfSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; int *arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBGridData **)&jarg1;  arg2 = *(int **)&jarg2; 
  ((OpenBabel::OBGridData const *)arg1)->GetNumberOfSteps(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; std::vector< double > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1; 
  result = ((OpenBabel::OBGridData const *)arg1)->GetValues();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result);  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jdouble jresult = 0 ; OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; int arg2 ; int arg3 ; int arg4 ;
  double result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  result = (double)((OpenBabel::OBGridData const *)arg1)->GetValue(arg2,arg3,arg4);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 *argp2 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBGridData **)&jarg1;  argp2 = *(OpenBabel::vector3 **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3"); return 0; } 
  arg2 = *argp2;  result = (double)((OpenBabel::OBGridData const *)arg1)->GetValue(arg2); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; OpenBabel::OBGridData::Unit result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1; 
  result = (OpenBabel::OBGridData::Unit)((OpenBabel::OBGridData const *)arg1)->GetUnit(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetMinValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1; 
  result = (double)((OpenBabel::OBGridData const *)arg1)->GetMinValue(); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetMaxValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1; 
  result = (double)((OpenBabel::OBGridData const *)arg1)->GetMaxValue(); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetOriginVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; OpenBabel::vector3 result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1; 
  result = ((OpenBabel::OBGridData const *)arg1)->GetOriginVector();
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetOriginVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; double *arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBGridData **)&jarg1;  arg2 = *(double **)&jarg2; 
  ((OpenBabel::OBGridData const *)arg1)->GetOriginVector(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetMaxVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; OpenBabel::vector3 result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1; 
  result = ((OpenBabel::OBGridData const *)arg1)->GetMaxVector();
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetUnrestricted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1; 
  result = (bool)((OpenBabel::OBGridData const *)arg1)->GetUnrestricted(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1GetNumSymmetries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1; 
  result = (int)((OpenBabel::OBGridData const *)arg1)->GetNumSymmetries(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1SetNumberOfPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; int arg2 ; int arg3 ; int arg4 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3;  arg4 = (int)jarg4; 
  (arg1)->SetNumberOfPoints(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1SetLimits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; OpenBabel::vector3 *arg2 = 0 ; OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 *arg4 = 0 ; OpenBabel::vector3 *arg5 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; (void)jarg5_; arg1 = *(OpenBabel::OBGridData **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if (!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return ; }   arg3 = *(OpenBabel::vector3 **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return ; }  
  arg4 = *(OpenBabel::vector3 **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return ; }  
  arg5 = *(OpenBabel::vector3 **)&jarg5; if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return ; }  
  (arg1)->SetLimits((OpenBabel::vector3 const &)*arg2,(OpenBabel::vector3 const &)*arg3,(OpenBabel::vector3 const &)*arg4,(OpenBabel::vector3 const &)*arg5); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1SetLimits_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; double *arg2 ; double *arg3 ; double *arg4 ; double *arg5 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1;  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3;  arg4 = *(double **)&jarg4;  arg5 = *(double **)&jarg5; 
  (arg1)->SetLimits((double const (*))arg2,(double const (*))arg3,(double const (*))arg4,(double const (*))arg5); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1SetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jdouble jarg5) {
  jboolean jresult = 0 ; OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; int arg2 ; int arg3 ; int arg4 ;
  double arg5 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1; 
  arg2 = (int)jarg2;  arg3 = (int)jarg3;  arg4 = (int)jarg4;  arg5 = (double)jarg5; 
  result = (bool)(arg1)->SetValue(arg2,arg3,arg4,arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1SetValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; std::vector< double > *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBGridData **)&jarg1;  arg2 = *(std::vector< double > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null"); return ; }
    (arg1)->SetValues((std::vector< double > const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1SetUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; OpenBabel::OBGridData::Unit arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBGridData **)&jarg1;  arg2 = (OpenBabel::OBGridData::Unit)jarg2;  (arg1)->SetUnit(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1SetUnrestricted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBGridData **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetUnrestricted(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1SetNumSymmetries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBGridData *arg1 = (OpenBabel::OBGridData *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBGridData **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetNumSymmetries(arg2); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_MaxMonoAtom_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(20); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_MaxMonoBond_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(20); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBChainsParser(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBChainsParser *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBChainsParser *)new OpenBabel::OBChainsParser(); *(OpenBabel::OBChainsParser **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBChainsParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBChainsParser *arg1 = (OpenBabel::OBChainsParser *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBChainsParser **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBChainsParser_1PerceiveChains_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBChainsParser *arg1 = (OpenBabel::OBChainsParser *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBChainsParser **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = jarg3 ? true : false;  result = (bool)(arg1)->PerceiveChains(*arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBChainsParser_1PerceiveChains_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBChainsParser *arg1 = (OpenBabel::OBChainsParser *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBChainsParser **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->PerceiveChains(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_chainsparser_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBChainsParser *arg1 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBChainsParser **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBChainsParser const & reference is null");
    return ; }   OpenBabel::chainsparser = *arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_chainsparser_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBChainsParser *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBChainsParser *) &OpenBabel::chainsparser; *(OpenBabel::OBChainsParser **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAtomTyper_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBAtomTyper *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBAtomTyper *)new OpenBabel::OBAtomTyper(); *(OpenBabel::OBAtomTyper **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAtomTyper_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomTyper *arg1 = 0 ; OpenBabel::OBAtomTyper *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomTyper **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtomTyper const & reference is null"); return 0; }
    result = (OpenBabel::OBAtomTyper *)new OpenBabel::OBAtomTyper((OpenBabel::OBAtomTyper const &)*arg1);
  *(OpenBabel::OBAtomTyper **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBAtomTyper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomTyper *arg1 = (OpenBabel::OBAtomTyper *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBAtomTyper **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomTyper_1AssignHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomTyper *arg1 = (OpenBabel::OBAtomTyper *) 0 ; OpenBabel::OBMol *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtomTyper **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  (arg1)->AssignHyb(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomTyper_1AssignTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomTyper *arg1 = (OpenBabel::OBAtomTyper *) 0 ; OpenBabel::OBMol *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtomTyper **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  (arg1)->AssignTypes(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_atomtyper_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomTyper *arg1 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomTyper **)&jarg1;
  if (!arg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtomTyper const & reference is null");
    return ; }   OpenBabel::atomtyper = *arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_atomtyper_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBAtomTyper *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBAtomTyper *) &OpenBabel::atomtyper;
  *(OpenBabel::OBAtomTyper **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAromaticTyper(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBAromaticTyper *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBAromaticTyper *)new OpenBabel::OBAromaticTyper(); *(OpenBabel::OBAromaticTyper **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBAromaticTyper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBAromaticTyper **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAromaticTyper_1AssignAromaticFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ; OpenBabel::OBMol *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAromaticTyper **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  (arg1)->AssignAromaticFlags(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_aromtyper_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAromaticTyper *arg1 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAromaticTyper **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAromaticTyper const & reference is null");
    return ; }   OpenBabel::aromtyper = *arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_aromtyper_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBAromaticTyper *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBAromaticTyper *) &OpenBabel::aromtyper; *(OpenBabel::OBAromaticTyper **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBRingTyper(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBRingTyper *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBRingTyper *)new OpenBabel::OBRingTyper();
  *(OpenBabel::OBRingTyper **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBRingTyper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRingTyper *arg1 = (OpenBabel::OBRingTyper *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBRingTyper **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRingTyper_1AssignTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRingTyper *arg1 = (OpenBabel::OBRingTyper *) 0 ; OpenBabel::OBMol *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRingTyper **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  (arg1)->AssignTypes(*arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1dummy(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  std::binary_function< char const *,char const *,bool > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::binary_function< char const *,char const *,bool > *)new std::binary_function< char const *,char const *,bool >();
  *(std::binary_function< char const *,char const *,bool > **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1dummy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::binary_function< char const *,char const *,bool > *arg1 = (std::binary_function< char const *,char const *,bool > *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(std::binary_function< char const *,char const *,bool > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1CharPtrLess(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::CharPtrLess *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::CharPtrLess *)new OpenBabel::CharPtrLess();
  *(OpenBabel::CharPtrLess **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1CharPtrLess(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::CharPtrLess *arg1 = (OpenBabel::CharPtrLess *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::CharPtrLess **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBPlugin **)&jarg1; 
  delete arg1; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1Description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ; char *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBPlugin **)&jarg1;  result = (char *)(arg1)->Description();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1TypeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ; char *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBPlugin **)&jarg1;  result = (char *)(arg1)->TypeID();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1Display_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ; std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ; char *arg4 = (char *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBPlugin **)&jarg1;  arg2 = *(std::string **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }   arg3 = 0;
  if (jarg3) { arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; }  arg4 = 0; if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0); if (!arg4) return 0; } 
  result = (bool)(arg1)->Display(*arg2,(char const *)arg3,(char const *)arg4); jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1Display_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ; std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBPlugin **)&jarg1; 
  arg2 = *(std::string **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }   arg3 = 0;
  if (jarg3) { arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; } 
  result = (bool)(arg1)->Display(*arg2,(char const *)arg3); jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1MakeInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ; std::vector< std::string > *arg2 = 0 ;
  OpenBabel::OBPlugin *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBPlugin **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0; }   result = (OpenBabel::OBPlugin *)(arg1)->MakeInstance((std::vector< std::string > const &)*arg2);
  *(OpenBabel::OBPlugin **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBPlugin **)&jarg1;  (arg1)->Init(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1GetPlugin(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ; OpenBabel::OBPlugin *result = 0 ; (void)jenv;
  (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; }  arg2 = 0;
  if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  result = (OpenBabel::OBPlugin *)OpenBabel::OBPlugin::GetPlugin((char const *)arg1,(char const *)arg2);
  *(OpenBabel::OBPlugin **)&jresult = result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1GetID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ; char *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBPlugin **)&jarg1;  result = (char *)((OpenBabel::OBPlugin const *)arg1)->GetID();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1ListAsVector(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ; std::vector< std::string > *arg3 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg3_; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0; }  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  arg3 = *(std::vector< std::string > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null"); return 0; }
    result = (bool)OpenBabel::OBPlugin::ListAsVector((char const *)arg1,(char const *)arg2,*arg3); jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1List_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ; std::ostream *arg3 = (std::ostream *) 0 ; (void)jenv; (void)jcls;
  arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return ; }  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; }  arg3 = *(std::ostream **)&jarg3; 
  OpenBabel::OBPlugin::List((char const *)arg1,(char const *)arg2,arg3);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1List_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return ; }  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; } 
  OpenBabel::OBPlugin::List((char const *)arg1,(char const *)arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1List_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  OpenBabel::OBPlugin::List((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1ListAsString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jstring jresult = 0 ; char *arg1 = (char *) 0 ; char *arg2 = (char *) 0 ; std::string result; (void)jenv; (void)jcls;
  arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; }  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  result = OpenBabel::OBPlugin::ListAsString((char const *)arg1,(char const *)arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1ListAsString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ; char *arg1 = (char *) 0 ; std::string result; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = OpenBabel::OBPlugin::ListAsString((char const *)arg1); jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1FirstLine(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ; char *arg1 = (char *) 0 ; std::string result; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = OpenBabel::OBPlugin::FirstLine((char const *)arg1); jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1Begin(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ;
  SwigValueWrapper< std::map< char const *,OpenBabel::OBPlugin *,OpenBabel::CharPtrLess >::const_iterator > result; (void)jenv;
  (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = OpenBabel::OBPlugin::Begin((char const *)arg1);
  *(OpenBabel::OBPlugin::PluginIterator **)&jresult = new OpenBabel::OBPlugin::PluginIterator((const OpenBabel::OBPlugin::PluginIterator &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1End(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ;
  SwigValueWrapper< std::map< char const *,OpenBabel::OBPlugin *,OpenBabel::CharPtrLess >::const_iterator > result; (void)jenv;
  (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = OpenBabel::OBPlugin::End((char const *)arg1);
  *(OpenBabel::OBPlugin::PluginIterator **)&jresult = new OpenBabel::OBPlugin::PluginIterator((const OpenBabel::OBPlugin::PluginIterator &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1GetMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBPlugin *arg1 = (OpenBabel::OBPlugin *) 0 ; OpenBabel::OBPlugin::PluginMapType *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBPlugin **)&jarg1; 
  result = (OpenBabel::OBPlugin::PluginMapType *) &((OpenBabel::OBPlugin const *)arg1)->GetMap();
  *(OpenBabel::OBPlugin::PluginMapType **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPlugin_1LoadAllPlugins(JNIEnv *jenv, jclass jcls) { (void)jenv;
  (void)jcls; OpenBabel::OBPlugin::LoadAllPlugins(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1stringbuf(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  std::stringbuf *result = 0 ; (void)jenv; (void)jcls; result = (std::stringbuf *)new std::stringbuf();
  *(std::stringbuf **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1stringbuf(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::stringbuf *arg1 = (std::stringbuf *) 0 ; (void)jenv; (void)jcls; arg1 = *(std::stringbuf **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBError_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jint jarg6) {
  jlong jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; std::string *arg4 = 0 ;
  std::string *arg5 = 0 ; OpenBabel::obMessageLevel arg6 ; OpenBabel::OBError *result = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (OpenBabel::obMessageLevel)jarg6; 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
  *(OpenBabel::OBError **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBError_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; std::string *arg4 = 0 ;
  std::string *arg5 = 0 ; OpenBabel::OBError *result = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  *(OpenBabel::OBError **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBError_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; std::string *arg4 = 0 ;
  OpenBabel::OBError *result = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  *(OpenBabel::OBError **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBError_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; OpenBabel::OBError *result = 0 ;
  (void)jenv; (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  *(OpenBabel::OBError **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBError_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; OpenBabel::OBError *result = 0 ; (void)jenv; (void)jcls;
  if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2);
  *(OpenBabel::OBError **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBError_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; std::string *arg1 = 0 ; OpenBabel::OBError *result = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1); *(OpenBabel::OBError **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBError_1_1SWIG_16(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBError *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBError *)new OpenBabel::OBError(); *(OpenBabel::OBError **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBError_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBError **)&jarg1;  result = ((OpenBabel::OBError const *)arg1)->message();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBError_1GetMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBError **)&jarg1;  result = ((OpenBabel::OBError const *)arg1)->GetMethod();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBError_1GetError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBError **)&jarg1;  result = ((OpenBabel::OBError const *)arg1)->GetError();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBError_1GetExplanation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBError **)&jarg1;  result = ((OpenBabel::OBError const *)arg1)->GetExplanation();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBError_1GetPossibleCause(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBError **)&jarg1;  result = ((OpenBabel::OBError const *)arg1)->GetPossibleCause();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBError_1GetSuggestedRemedy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBError **)&jarg1;  result = ((OpenBabel::OBError const *)arg1)->GetSuggestedRemedy();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBError_1GetLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ; OpenBabel::obMessageLevel result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBError **)&jarg1; 
  result = (OpenBabel::obMessageLevel)((OpenBabel::OBError const *)arg1)->GetLevel(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBError **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMessageHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBMessageHandler *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBMessageHandler *)new OpenBabel::OBMessageHandler();
  *(OpenBabel::OBMessageHandler **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBMessageHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1ThrowError_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; OpenBabel::OBError arg2 ;
  OpenBabel::errorQualifier arg3 ; OpenBabel::OBError *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1;  argp2 = *(OpenBabel::OBError **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::OBError"); return ; } 
  arg2 = *argp2;  arg3 = (OpenBabel::errorQualifier)jarg3;  (arg1)->ThrowError(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1ThrowError_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; OpenBabel::OBError arg2 ; OpenBabel::OBError *argp2 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  argp2 = *(OpenBabel::OBError **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::OBError"); return ; } 
  arg2 = *argp2;  (arg1)->ThrowError(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1ThrowError_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jint jarg5) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  OpenBabel::obMessageLevel arg4 ; OpenBabel::errorQualifier arg5 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (OpenBabel::obMessageLevel)jarg4;  arg5 = (OpenBabel::errorQualifier)jarg5; 
  (arg1)->ThrowError((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1ThrowError_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  OpenBabel::obMessageLevel arg4 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (OpenBabel::obMessageLevel)jarg4;  (arg1)->ThrowError((std::string const &)*arg2,(std::string const &)*arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1ThrowError_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->ThrowError((std::string const &)*arg2,(std::string const &)*arg3); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1GetMessagesOfLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; OpenBabel::obMessageLevel arg2 ;
  std::vector< std::string > result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  arg2 = (OpenBabel::obMessageLevel)jarg2;  result = (arg1)->GetMessagesOfLevel(arg2);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1StartLogging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1;  (arg1)->StartLogging(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1StopLogging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1;  (arg1)->StopLogging(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1SetMaxLogEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->SetMaxLogEntries(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1GetMaxLogEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1;  result = (unsigned int)(arg1)->GetMaxLogEntries();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1ClearLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1;  (arg1)->ClearLog(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1SetOutputLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; OpenBabel::obMessageLevel arg2 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1;  arg2 = (OpenBabel::obMessageLevel)jarg2; 
  (arg1)->SetOutputLevel(arg2); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1GetOutputLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; OpenBabel::obMessageLevel result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (OpenBabel::obMessageLevel)(arg1)->GetOutputLevel(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1SetOutputStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; std::ostream *arg2 = (std::ostream *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1;  arg2 = *(std::ostream **)&jarg2; 
  (arg1)->SetOutputStream(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1GetOutputStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; std::ostream *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (std::ostream *)(arg1)->GetOutputStream(); *(std::ostream **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1StartErrorWrap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1;  result = (bool)(arg1)->StartErrorWrap();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1StopErrorWrap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1;  result = (bool)(arg1)->StopErrorWrap();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1GetErrorMessageCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (unsigned int)(arg1)->GetErrorMessageCount(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1GetWarningMessageCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (unsigned int)(arg1)->GetWarningMessageCount(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1GetInfoMessageCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (unsigned int)(arg1)->GetInfoMessageCount(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1GetAuditMessageCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (unsigned int)(arg1)->GetAuditMessageCount(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1GetDebugMessageCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (unsigned int)(arg1)->GetDebugMessageCount(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMessageHandler_1GetMessageSummary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1;  result = (arg1)->GetMessageSummary();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_obErrorLog_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMessageHandler *arg1 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMessageHandler **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMessageHandler const & reference is null");
    return ; }   OpenBabel::obErrorLog = *arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_obErrorLog_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBMessageHandler *) &OpenBabel::obErrorLog; *(OpenBabel::OBMessageHandler **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1obLogBuf(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::obLogBuf *arg1 = (OpenBabel::obLogBuf *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::obLogBuf **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1obLogBuf(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::obLogBuf *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::obLogBuf *)new OpenBabel::obLogBuf();
  *(OpenBabel::obLogBuf **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_NOTREADABLE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(0x01); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_READONEONLY_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(0x02); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_READBINARY_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(0x04); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ZEROATOMSOK_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(0x08); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_NOTWRITABLE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(0x10); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_WRITEONEONLY_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(0x20); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_WRITEBINARY_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(0x40); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_READXML_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(0x80); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_DEPICTION2D_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(0x100); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_DEFAULTFORMAT_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(0x4000); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1Default(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBFormat **result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBFormat **) &OpenBabel::OBFormat::Default(); *(OpenBabel::OBFormat ***)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1FindType(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; OpenBabel::OBFormat *result = 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = (OpenBabel::OBFormat *)OpenBabel::OBFormat::FindType((char const *)arg1);
  *(OpenBabel::OBFormat **)&jresult = result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1ReadMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2;  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (bool)(arg1)->ReadMolecule(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1ReadChemObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBFormat **)&jarg1;  arg2 = *(OpenBabel::OBConversion **)&jarg2; 
  result = (bool)(arg1)->ReadChemObject(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1WriteMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2;  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (bool)(arg1)->WriteMolecule(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1WriteChemObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBFormat **)&jarg1;  arg2 = *(OpenBabel::OBConversion **)&jarg2; 
  result = (bool)(arg1)->WriteChemObject(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1TargetClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; char *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFormat **)&jarg1;  result = (char *)(arg1)->TargetClassDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; std::type_info *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFormat **)&jarg1;  result = (std::type_info *) &(arg1)->GetType();
  *(std::type_info **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1SpecificationURL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; char *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFormat **)&jarg1;  result = (char *)(arg1)->SpecificationURL();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1GetMIMEType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; char *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFormat **)&jarg1;  result = (char *)(arg1)->GetMIMEType();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1Flags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFormat **)&jarg1;  result = (unsigned int)(arg1)->Flags(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1SkipObjects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ; OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; int arg2 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg3_; arg1 = *(OpenBabel::OBFormat **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (int)(arg1)->SkipObjects(arg2,arg3); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1MakeNewInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; OpenBabel::OBFormat *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFormat **)&jarg1;  result = (OpenBabel::OBFormat *)(arg1)->MakeNewInstance();
  *(OpenBabel::OBFormat **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1RegisterFormat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ; OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; char *arg2 = (char *) 0 ; char *arg3 = (char *) 0 ;
  int result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFormat **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; }  arg3 = 0; if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; } 
  result = (int)(arg1)->RegisterFormat((char const *)arg2,(char const *)arg3); jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3); return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1RegisterFormat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ; OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; char *arg2 = (char *) 0 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFormat **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  result = (int)(arg1)->RegisterFormat((char const *)arg2); jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1Display_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ; char *arg4 = (char *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFormat **)&jarg1;  arg2 = *(std::string **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }   arg3 = 0;
  if (jarg3) { arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; }  arg4 = 0; if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0); if (!arg4) return 0; } 
  result = (bool)(arg1)->Display(*arg2,(char const *)arg3,(char const *)arg4); jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1Display_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  arg2 = *(std::string **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }   arg3 = 0;
  if (jarg3) { arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; } 
  result = (bool)(arg1)->Display(*arg2,(char const *)arg3); jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1FormatFromMIME(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; OpenBabel::OBFormat *result = 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = (OpenBabel::OBFormat *)OpenBabel::OBFormat::FormatFromMIME((char const *)arg1);
  *(OpenBabel::OBFormat **)&jresult = result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBFormat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBConversion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ; std::istream *arg1 = (std::istream *) 0 ; std::ostream *arg2 = (std::ostream *) 0 ;
  OpenBabel::OBConversion *result = 0 ; (void)jenv; (void)jcls; arg1 = *(std::istream **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion(arg1,arg2);
  *(OpenBabel::OBConversion **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBConversion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::istream *arg1 = (std::istream *) 0 ; OpenBabel::OBConversion *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::istream **)&jarg1;  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion(arg1);
  *(OpenBabel::OBConversion **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBConversion_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBConversion *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion(); *(OpenBabel::OBConversion **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBConversion_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ; std::string arg1 ; std::string arg2 ; OpenBabel::OBConversion *result = 0 ; (void)jenv; (void)jcls;
  if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr); jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr); jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion(arg1,arg2); *(OpenBabel::OBConversion **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBConversion_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; std::string arg1 ; OpenBabel::OBConversion *result = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr); jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion(arg1); *(OpenBabel::OBConversion **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBConversion_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConversion *arg1 = 0 ; OpenBabel::OBConversion *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBConversion const & reference is null");
    return 0; }   result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion((OpenBabel::OBConversion const &)*arg1);
  *(OpenBabel::OBConversion **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBConversion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  delete arg1; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1RegisterFormat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ; char *arg1 = (char *) 0 ; OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; char *arg3 = (char *) 0 ;
  int result; (void)jenv; (void)jcls; (void)jarg2_; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0; }  arg2 = *(OpenBabel::OBFormat **)&jarg2;  arg3 = 0; if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; } 
  result = (int)OpenBabel::OBConversion::RegisterFormat((char const *)arg1,arg2,(char const *)arg3); jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3); return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1RegisterFormat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; char *arg1 = (char *) 0 ; OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; int result; (void)jenv;
  (void)jcls; (void)jarg2_; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  arg2 = *(OpenBabel::OBFormat **)&jarg2;  result = (int)OpenBabel::OBConversion::RegisterFormat((char const *)arg1,arg2);
  jresult = (jint)result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1FindFormat(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; std::string arg1 ; OpenBabel::OBFormat *result = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr); jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FindFormat(arg1); *(OpenBabel::OBFormat **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1FormatFromExt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; bool *arg2 = 0 ; OpenBabel::OBFormat *result = 0 ; (void)jenv; (void)jcls;
  arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; }  arg2 = *(bool **)&jarg2;
  if (!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null"); return 0; }  
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FormatFromExt((char const *)arg1,*arg2);
  *(OpenBabel::OBFormat **)&jresult = result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1FormatFromExt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; std::string arg1 ; OpenBabel::OBFormat *result = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr); jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FormatFromExt(arg1); *(OpenBabel::OBFormat **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1FormatFromMIME(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; OpenBabel::OBFormat *result = 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FormatFromMIME((char const *)arg1);
  *(OpenBabel::OBFormat **)&jresult = result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1Description(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)OpenBabel::OBConversion::Description();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetInStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; std::istream *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (std::istream *)((OpenBabel::OBConversion const *)arg1)->GetInStream(); *(std::istream **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetOutStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; std::ostream *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (std::ostream *)((OpenBabel::OBConversion const *)arg1)->GetOutStream(); *(std::ostream **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetInStream_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; std::istream *arg2 = (std::istream *) 0 ; bool arg3 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(std::istream **)&jarg2; 
  arg3 = jarg3 ? true : false;  (arg1)->SetInStream(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetInStream_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; std::istream *arg2 = (std::istream *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(std::istream **)&jarg2; 
  (arg1)->SetInStream(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetOutStream_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; std::ostream *arg2 = (std::ostream *) 0 ; bool arg3 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(std::ostream **)&jarg2; 
  arg3 = jarg3 ? true : false;  (arg1)->SetOutStream(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetOutStream_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; std::ostream *arg2 = (std::ostream *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(std::ostream **)&jarg2; 
  (arg1)->SetOutStream(arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetInAndOutFormats_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4, jboolean jarg5) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ; bool arg4 ; bool arg5 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0; }  arg3 = 0; if (jarg3) { arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; } 
  arg4 = jarg4 ? true : false;  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->SetInAndOutFormats((char const *)arg2,(char const *)arg3,arg4,arg5); jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetInAndOutFormats_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ; bool arg4 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0; }  arg3 = 0; if (jarg3) { arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; } 
  arg4 = jarg4 ? true : false;  result = (bool)(arg1)->SetInAndOutFormats((char const *)arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result;  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetInAndOutFormats_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; }  arg3 = 0; if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; } 
  result = (bool)(arg1)->SetInAndOutFormats((char const *)arg2,(char const *)arg3); jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetInAndOutFormats_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; OpenBabel::OBFormat *arg3 = (OpenBabel::OBFormat *) 0 ; bool arg4 ;
  bool arg5 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(OpenBabel::OBFormat **)&jarg2;  arg3 = *(OpenBabel::OBFormat **)&jarg3; 
  arg4 = jarg4 ? true : false;  arg5 = jarg5 ? true : false;  result = (bool)(arg1)->SetInAndOutFormats(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetInAndOutFormats_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; OpenBabel::OBFormat *arg3 = (OpenBabel::OBFormat *) 0 ; bool arg4 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBFormat **)&jarg2;  arg3 = *(OpenBabel::OBFormat **)&jarg3;  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->SetInAndOutFormats(arg2,arg3,arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetInAndOutFormats_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; OpenBabel::OBFormat *arg3 = (OpenBabel::OBFormat *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBFormat **)&jarg2;  arg3 = *(OpenBabel::OBFormat **)&jarg3; 
  result = (bool)(arg1)->SetInAndOutFormats(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetInFormat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *arg2 = (char *) 0 ; bool arg3 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; }  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->SetInFormat((char const *)arg2,arg3); jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetInFormat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *arg2 = (char *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  result = (bool)(arg1)->SetInFormat((char const *)arg2); jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetInFormat_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; bool arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  arg3 = jarg3 ? true : false;  result = (bool)(arg1)->SetInFormat(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetInFormat_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  result = (bool)(arg1)->SetInFormat(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetOutFormat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *arg2 = (char *) 0 ; bool arg3 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; }  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->SetOutFormat((char const *)arg2,arg3); jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetOutFormat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *arg2 = (char *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  result = (bool)(arg1)->SetOutFormat((char const *)arg2); jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetOutFormat_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; bool arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  arg3 = jarg3 ? true : false;  result = (bool)(arg1)->SetOutFormat(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetOutFormat_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  result = (bool)(arg1)->SetOutFormat(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetInFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBFormat *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (OpenBabel::OBFormat *)((OpenBabel::OBConversion const *)arg1)->GetInFormat();
  *(OpenBabel::OBFormat **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetOutFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBFormat *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (OpenBabel::OBFormat *)((OpenBabel::OBConversion const *)arg1)->GetOutFormat();
  *(OpenBabel::OBFormat **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetInGzipped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (bool)((OpenBabel::OBConversion const *)arg1)->GetInGzipped(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetOutGzipped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (bool)((OpenBabel::OBConversion const *)arg1)->GetOutGzipped(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetInFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = ((OpenBabel::OBConversion const *)arg1)->GetInFilename(); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetOutFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = ((OpenBabel::OBConversion const *)arg1)->GetOutFilename(); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetInPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; std::streampos result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = ((OpenBabel::OBConversion const *)arg1)->GetInPos();
  *(std::streampos **)&jresult = new std::streampos((const std::streampos &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetInLen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; size_t result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  result = ((OpenBabel::OBConversion const *)arg1)->GetInLen();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (char *)((OpenBabel::OBConversion const *)arg1)->GetTitle();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetAuxConv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBConversion *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (OpenBabel::OBConversion *)((OpenBabel::OBConversion const *)arg1)->GetAuxConv();
  *(OpenBabel::OBConversion **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetAuxConv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(OpenBabel::OBConversion **)&jarg2;  (arg1)->SetAuxConv(arg2); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1IsOption_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jstring jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *arg2 = (char *) 0 ;
  OpenBabel::OBConversion::Option_type arg3 ; char *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0; }  arg3 = (OpenBabel::OBConversion::Option_type)jarg3; 
  result = (char *)(arg1)->IsOption((char const *)arg2,arg3); if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1IsOption_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *arg2 = (char *) 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  result = (char *)(arg1)->IsOption((char const *)arg2); if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBConversion::Option_type arg2 ; std::map< std::string,std::string > *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = (OpenBabel::OBConversion::Option_type)jarg2; 
  result = (std::map< std::string,std::string > *)(arg1)->GetOptions(arg2);
  *(std::map< std::string,std::string > **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1AddOption_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *arg2 = (char *) 0 ;
  OpenBabel::OBConversion::Option_type arg3 ; char *arg4 = (char *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ; }  arg3 = (OpenBabel::OBConversion::Option_type)jarg3;  arg4 = 0; if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0); if (!arg4) return ; } 
  (arg1)->AddOption((char const *)arg2,arg3,(char const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1AddOption_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *arg2 = (char *) 0 ;
  OpenBabel::OBConversion::Option_type arg3 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; } 
  arg3 = (OpenBabel::OBConversion::Option_type)jarg3;  (arg1)->AddOption((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1AddOption_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; }  (arg1)->AddOption((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1RemoveOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *arg2 = (char *) 0 ;
  OpenBabel::OBConversion::Option_type arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0; }  arg3 = (OpenBabel::OBConversion::Option_type)jarg3; 
  result = (bool)(arg1)->RemoveOption((char const *)arg2,arg3); jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; char *arg2 = (char *) 0 ;
  OpenBabel::OBConversion::Option_type arg3 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; } 
  arg3 = (OpenBabel::OBConversion::Option_type)jarg3;  (arg1)->SetOptions((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1RegisterOptionParam_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  std::string arg1 ; OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; int arg3 ;
  OpenBabel::OBConversion::Option_type arg4 ; (void)jenv; (void)jcls; (void)jarg2_; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return ; (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = *(OpenBabel::OBFormat **)&jarg2;  arg3 = (int)jarg3; 
  arg4 = (OpenBabel::OBConversion::Option_type)jarg4;  OpenBabel::OBConversion::RegisterOptionParam(arg1,arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1RegisterOptionParam_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  std::string arg1 ; OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; int arg3 ; (void)jenv; (void)jcls; (void)jarg2_;
  if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return ; (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = *(OpenBabel::OBFormat **)&jarg2;  arg3 = (int)jarg3; 
  OpenBabel::OBConversion::RegisterOptionParam(arg1,arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1RegisterOptionParam_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string arg1 ; OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ; (void)jenv; (void)jcls; (void)jarg2_; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return ; (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  OpenBabel::OBConversion::RegisterOptionParam(arg1,arg2); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetOptionParams(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jint jresult = 0 ; std::string arg1 ; OpenBabel::OBConversion::Option_type arg2 ; int result; (void)jenv; (void)jcls;
  if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr); jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (OpenBabel::OBConversion::Option_type)jarg2;  result = (int)OpenBabel::OBConversion::GetOptionParams(arg1,arg2);
  jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1CopyOptions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBConversion::Option_type arg3 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBConversion **)&jarg2;  arg3 = (OpenBabel::OBConversion::Option_type)jarg3; 
  (arg1)->CopyOptions(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1CopyOptions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(OpenBabel::OBConversion **)&jarg2;  (arg1)->CopyOptions(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetSupportedInputFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; std::vector< std::string > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  result = (arg1)->GetSupportedInputFormat();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetSupportedOutputFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; std::vector< std::string > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (arg1)->GetSupportedOutputFormat();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1Convert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; std::istream *arg2 = (std::istream *) 0 ;
  std::ostream *arg3 = (std::ostream *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(std::istream **)&jarg2;  arg3 = *(std::ostream **)&jarg3; 
  result = (int)(arg1)->Convert(arg2,arg3); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1Convert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  result = (int)(arg1)->Convert(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1FullConvert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector< std::string > *arg4 = 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg4_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(std::vector< std::string > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null"); return 0; }
    arg3 = *(std::string **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  arg4 = *(std::vector< std::string > **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null"); return 0; }
    result = (int)(arg1)->FullConvert(*arg2,*arg3,*arg4); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1AddChemObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2;  result = (int)(arg1)->AddChemObject(arg2);
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetChemObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBBase *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (OpenBabel::OBBase *)(arg1)->GetChemObject(); *(OpenBabel::OBBase **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1IsLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  result = (bool)(arg1)->IsLast(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1IsFirstInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  result = (bool)(arg1)->IsFirstInput(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetFirstInput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetFirstInput(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetFirstInput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  (arg1)->SetFirstInput(); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetOutputIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (int)((OpenBabel::OBConversion const *)arg1)->GetOutputIndex(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetOutputIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetOutputIndex(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetMoreFilesToCome(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  (arg1)->SetMoreFilesToCome(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetOneObjectOnly_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetOneObjectOnly(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetOneObjectOnly_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  (arg1)->SetOneObjectOnly(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1SetLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetLast(arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1IsLastFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  result = (bool)(arg1)->IsLastFile(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  result = (int)((OpenBabel::OBConversion const *)arg1)->GetCount();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1GetDefaultFormat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBFormat *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::GetDefaultFormat(); *(OpenBabel::OBFormat **)&jresult = result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1Write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::ostream *arg3 = (std::ostream *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::ostream **)&jarg3;  result = (bool)(arg1)->Write(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1Write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2;  result = (bool)(arg1)->Write(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1WriteString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jstring jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; bool arg3 ; std::string result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = jarg3 ? true : false;  result = (arg1)->WriteString(arg2,arg3); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1WriteString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::string result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2;  result = (arg1)->WriteString(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1WriteFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::string arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2;  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr); jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  result = (bool)(arg1)->WriteFile(arg2,arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1CloseOutFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  (arg1)->CloseOutFile(); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1Read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::istream *arg3 = (std::istream *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::istream **)&jarg3;  result = (bool)(arg1)->Read(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1Read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2;  result = (bool)(arg1)->Read(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1ReadString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::string arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2;  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr); jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  result = (bool)(arg1)->ReadString(arg2,arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1ReadFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::string arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2;  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr); jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  result = (bool)(arg1)->ReadFile(arg2,arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1OpenInAndOutFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; std::string arg2 ; std::string arg3 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr); jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr); jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->OpenInAndOutFiles(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1ReportNumberConverted_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; int arg2 ;
  OpenBabel::OBFormat *arg3 = (OpenBabel::OBFormat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(OpenBabel::OBFormat **)&jarg3; 
  (arg1)->ReportNumberConverted(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1ReportNumberConverted_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;  arg2 = (int)jarg2;  (arg1)->ReportNumberConverted(arg2); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConversion_1NumInputObjects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBConversion **)&jarg1;  result = (int)(arg1)->NumInputObjects(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBResidue_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBResidue *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBResidue *)new OpenBabel::OBResidue(); *(OpenBabel::OBResidue **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBResidue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidue *arg1 = 0 ; OpenBabel::OBResidue *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBResidue const & reference is null"); return 0; }
    result = (OpenBabel::OBResidue *)new OpenBabel::OBResidue((OpenBabel::OBResidue const &)*arg1);
  *(OpenBabel::OBResidue **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBResidue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1AddAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->AddAtom(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1InsertAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->InsertAtom(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1RemoveAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->RemoveAtom(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1SetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetName((std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1SetNum_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->SetNum(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1SetNum_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; std::string arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ; (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  (arg1)->SetNum(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1SetChain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; char arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = (char)jarg2;  (arg1)->SetChain(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1SetChainNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->SetChainNum(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->SetIdx(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1SetInsertionCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; char arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = (char)jarg2;  (arg1)->SetInsertionCode(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1SetAtomID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  std::string *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->SetAtomID(arg2,(std::string const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1SetHetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool arg3 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = jarg3 ? true : false;  (arg1)->SetHetAtom(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1SetSerialNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  unsigned int arg3 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = (unsigned int)jarg3;  (arg1)->SetSerialNum(arg2,arg3); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidue **)&jarg1;  result = ((OpenBabel::OBResidue const *)arg1)->GetName();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1GetNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  result = (int)(arg1)->GetNum(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1GetNumString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidue **)&jarg1;  result = (arg1)->GetNumString();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1GetNumAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetNumAtoms(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jchar JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1GetChain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; char result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidue **)&jarg1;  result = (char)((OpenBabel::OBResidue const *)arg1)->GetChain();
  jresult = (jchar)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1GetChainNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetChainNum(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidue **)&jarg1;  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1GetResKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetResKey(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1GetAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBAtom * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  result = ((OpenBabel::OBResidue const *)arg1)->GetAtoms();
  *(std::vector< OpenBabel::OBAtom * > **)&jresult = new std::vector< OpenBabel::OBAtom * >((const std::vector< OpenBabel::OBAtom * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1GetBonds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; bool arg2 ;
  SwigValueWrapper< std::vector< OpenBabel::OBBond * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = ((OpenBabel::OBResidue const *)arg1)->GetBonds(arg2);
  *(std::vector< OpenBabel::OBBond * > **)&jresult = new std::vector< OpenBabel::OBBond * >((const std::vector< OpenBabel::OBBond * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1GetBonds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBBond * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  result = ((OpenBabel::OBResidue const *)arg1)->GetBonds();
  *(std::vector< OpenBabel::OBBond * > **)&jresult = new std::vector< OpenBabel::OBBond * >((const std::vector< OpenBabel::OBBond * > &)result); 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1GetAtomID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; std::string result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = ((OpenBabel::OBResidue const *)arg1)->GetAtomID(arg2); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1GetSerialNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetSerialNum(arg2); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jchar JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1GetInsertionCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; char result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (char)((OpenBabel::OBResidue const *)arg1)->GetInsertionCode(); jresult = (jchar)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1GetAminoAcidProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)((OpenBabel::OBResidue const *)arg1)->GetAminoAcidProperty(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1GetAtomProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; int arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = (int)jarg3; 
  result = (bool)((OpenBabel::OBResidue const *)arg1)->GetAtomProperty(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1GetResidueProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)((OpenBabel::OBResidue const *)arg1)->GetResidueProperty(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1IsHetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)((OpenBabel::OBResidue const *)arg1)->IsHetAtom(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1IsResidueType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)((OpenBabel::OBResidue const *)arg1)->IsResidueType(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1BeginAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBAtom * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  result = (arg1)->BeginAtoms();
  *(OpenBabel::OBAtomIterator **)&jresult = new OpenBabel::OBAtomIterator((const OpenBabel::OBAtomIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1EndAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBAtom * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  result = (arg1)->EndAtoms();
  *(OpenBabel::OBAtomIterator **)&jresult = new OpenBabel::OBAtomIterator((const OpenBabel::OBAtomIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1BeginAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  std::vector< OpenBabel::OBAtom * >::iterator *arg2 = 0 ; OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = *(std::vector< OpenBabel::OBAtom * >::iterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBAtom * >::iterator & reference is null");
    return 0; }   result = (OpenBabel::OBAtom *)(arg1)->BeginAtom(*arg2); *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1NextAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  std::vector< OpenBabel::OBAtom * >::iterator *arg2 = 0 ; OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;  arg2 = *(std::vector< OpenBabel::OBAtom * >::iterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBAtom * >::iterator & reference is null");
    return 0; }   result = (OpenBabel::OBAtom *)(arg1)->NextAtom(*arg2); *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_MAXSETNO_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(40); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_MAXELEM_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(29); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_MAXRES_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(54); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1ALA_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 1)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1GLY_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 2)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1LEU_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 3)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1SER_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 4)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1VAL_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 5)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1THR_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 6)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1LYS_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 7)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1ASP_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 8)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1ILE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 9)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1ASN_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 10)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1GLU_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 11)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1PRO_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 12)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1ARG_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 13)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1PHE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 14)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1GLN_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 15)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1TYR_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 16)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1HIS_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 17)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1CYS_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 18)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1MET_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 19)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AA_1TRP_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 20)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ACIDIC_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBAminoAcidProperty::ACIDIC; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ACYCLIC_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBAminoAcidProperty::ACYCLIC; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ALIPHATIC_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBAminoAcidProperty::ALIPHATIC; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AROMATIC_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBAminoAcidProperty::AROMATIC; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_BASIC_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBAminoAcidProperty::BASIC; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_BURIED_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBAminoAcidProperty::BURIED; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CHARGED_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBAminoAcidProperty::CHARGED; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CYCLIC_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBAminoAcidProperty::CYCLIC; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_HYDROPHOBIC_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBAminoAcidProperty::HYDROPHOBIC; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_LARGE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBAminoAcidProperty::LARGE; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_MEDIUM_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBAminoAcidProperty::MEDIUM; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_NEGATIVE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBAminoAcidProperty::NEGATIVE; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_NEUTRAL_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBAminoAcidProperty::NEUTRAL; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_POLAR_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBAminoAcidProperty::POLAR; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_POSITIVE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBAminoAcidProperty::POSITIVE; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_SMALL_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBAminoAcidProperty::SMALL; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_SURFACE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBAminoAcidProperty::SURFACE; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ALPHA_1CARBON_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueAtomProperty::ALPHA_CARBON; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AMINO_1BACKBONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueAtomProperty::AMINO_BACKBONE;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_BACKBONE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueAtomProperty::BACKBONE; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CYSTEINE_1SULPHUR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueAtomProperty::CYSTEINE_SULPHUR;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_LIGAND_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueAtomProperty::LIGAND; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_NUCLEIC_1BACKBONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueAtomProperty::NUCLEIC_BACKBONE;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_SHAPELY_1BACKBONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueAtomProperty::SHAPELY_BACKBONE;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_SHAPELY_1SPECIAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueAtomProperty::SHAPELY_SPECIAL;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_SIDECHAIN_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueAtomProperty::SIDECHAIN; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_SUGAR_1PHOSPHATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueAtomProperty::SUGAR_PHOSPHATE;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ALA_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::ALA; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_GLY_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::GLY; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_LEU_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::LEU; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_SER_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::SER; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_VAL_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::VAL; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_THR_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::THR; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_LYS_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::LYS; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ASP_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::ASP; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ILE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::ILE; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ASN_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::ASN; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_GLU_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::GLU; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_PRO_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::PRO; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ARG_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::ARG; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_PHE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::PHE; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_GLN_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::GLN; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_TYR_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::TYR; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_HIS_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::HIS; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_CYS_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::CYS; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_MET_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::MET; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_TRP_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::TRP; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ASX_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::ASX; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_GLX_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::GLX; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_PCA_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::PCA; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_HYP_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::HYP; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_A_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ; int result;
  (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::A; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_resC_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::C; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_G_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ; int result;
  (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::G; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_T_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ; int result;
  (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::T; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_resU_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::U; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_UPLUS_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::UPLUS; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_resI_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::I; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI__11MA_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::_1MA; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI__15MC_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::_5MC; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OMC_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::OMC; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI__11MG_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::_1MG; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI__12MG_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::_2MG; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_M2G_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::M2G; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI__17MG_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::_7MG; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OMG_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::OMG; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_YG_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::YG; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_H2U_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::H2U; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI__15MU_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::_5MU; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_PSU_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::PSU; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_UNK_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::UNK; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ACE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::ACE; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_FOR_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::FOR; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_HOH_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::HOH; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_DOD_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::DOD; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_SO4_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::SO4; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_PO4_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::PO4; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_NAD_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::NAD; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_COA_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::COA; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_NAP_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::NAP; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_NDP_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueIndex::NDP; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AMINO_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueProperty::AMINO; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_AMINO_1NUCLEO_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueProperty::AMINO_NUCLEO; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_COENZYME_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueProperty::COENZYME; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_ION_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueProperty::ION; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_NUCLEO_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueProperty::NUCLEO; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_PROTEIN_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueProperty::PROTEIN; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_PURINE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueProperty::PURINE; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_PYRIMIDINE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueProperty::PYRIMIDINE; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_SOLVENT_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueProperty::SOLVENT; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_WATER_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBResidueProperty::WATER; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBInternalCoord_1_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBInternalCoord **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  if (arg1) (arg1)->_a = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBInternalCoord_1_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBInternalCoord **)&jarg1; 
  result = (OpenBabel::OBAtom *) ((arg1)->_a); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBInternalCoord_1_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBInternalCoord **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  if (arg1) (arg1)->_b = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBInternalCoord_1_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBInternalCoord **)&jarg1; 
  result = (OpenBabel::OBAtom *) ((arg1)->_b); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBInternalCoord_1_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBInternalCoord **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  if (arg1) (arg1)->_c = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBInternalCoord_1_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBInternalCoord **)&jarg1; 
  result = (OpenBabel::OBAtom *) ((arg1)->_c); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBInternalCoord_1_1dst_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBInternalCoord **)&jarg1;  arg2 = (double)jarg2;  if (arg1) (arg1)->_dst = arg2; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBInternalCoord_1_1dst_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBInternalCoord **)&jarg1;  result = (double) ((arg1)->_dst);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBInternalCoord_1_1ang_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBInternalCoord **)&jarg1;  arg2 = (double)jarg2;  if (arg1) (arg1)->_ang = arg2; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBInternalCoord_1_1ang_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBInternalCoord **)&jarg1;  result = (double) ((arg1)->_ang);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBInternalCoord_1_1tor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBInternalCoord **)&jarg1;  arg2 = (double)jarg2;  if (arg1) (arg1)->_tor = arg2; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBInternalCoord_1_1tor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBInternalCoord **)&jarg1;  result = (double) ((arg1)->_tor);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBInternalCoord_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; double arg4 ; double arg5 ; double arg6 ;
  OpenBabel::OBInternalCoord *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = (double)jarg4;  arg5 = (double)jarg5;  arg6 = (double)jarg6; 
  result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord(arg1,arg2,arg3,arg4,arg5,arg6);
  *(OpenBabel::OBInternalCoord **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBInternalCoord_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; double arg4 ; double arg5 ; OpenBabel::OBInternalCoord *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = *(OpenBabel::OBAtom **)&jarg3;  arg4 = (double)jarg4;  arg5 = (double)jarg5; 
  result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord(arg1,arg2,arg3,arg4,arg5);
  *(OpenBabel::OBInternalCoord **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBInternalCoord_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; double arg4 ; OpenBabel::OBInternalCoord *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = *(OpenBabel::OBAtom **)&jarg3;  arg4 = (double)jarg4; 
  result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord(arg1,arg2,arg3,arg4);
  *(OpenBabel::OBInternalCoord **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBInternalCoord_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBInternalCoord *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3;  result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord(arg1,arg2,arg3);
  *(OpenBabel::OBInternalCoord **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBInternalCoord_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBInternalCoord *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord(arg1,arg2);
  *(OpenBabel::OBInternalCoord **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBInternalCoord_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBInternalCoord *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord(arg1);
  *(OpenBabel::OBInternalCoord **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBInternalCoord_1_1SWIG_16(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBInternalCoord *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord(); *(OpenBabel::OBInternalCoord **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBInternalCoord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBInternalCoord **)&jarg1;  delete arg1; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_GetSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ; unsigned int arg1 ; char *result = 0 ; (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1; 
  result = (char *)OpenBabel::OBElements::GetSymbol(arg1); if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_GetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ; unsigned int arg1 ; char *result = 0 ; (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1; 
  result = (char *)OpenBabel::OBElements::GetName(arg1); if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_GetMass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ; unsigned int arg1 ; double result; (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1; 
  result = (double)OpenBabel::OBElements::GetMass(arg1); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_GetExactMass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ; unsigned int arg1 ; unsigned int arg2 ; double result; (void)jenv; (void)jcls;
  arg1 = (unsigned int)jarg1;  arg2 = (unsigned int)jarg2;  result = (double)OpenBabel::OBElements::GetExactMass(arg1,arg2);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_GetExactMass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ; unsigned int arg1 ; double result; (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1; 
  result = (double)OpenBabel::OBElements::GetExactMass(arg1); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_GetAtomicNum(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; unsigned int result; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = (unsigned int)OpenBabel::OBElements::GetAtomicNum((char const *)arg1); jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_GetAllredRochowElectroNeg(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ; unsigned int arg1 ; double result; (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1; 
  result = (double)OpenBabel::OBElements::GetAllredRochowElectroNeg(arg1); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_GetCovalentRad(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ; unsigned int arg1 ; double result; (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1; 
  result = (double)OpenBabel::OBElements::GetCovalentRad(arg1); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_GetVdwRad(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ; unsigned int arg1 ; double result; (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1; 
  result = (double)OpenBabel::OBElements::GetVdwRad(arg1); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_GetElectronAffinity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ; unsigned int arg1 ; double result; (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1; 
  result = (double)OpenBabel::OBElements::GetElectronAffinity(arg1); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_GetIonization(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ; unsigned int arg1 ; double result; (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1; 
  result = (double)OpenBabel::OBElements::GetIonization(arg1); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_GetMaxBonds(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; unsigned int arg1 ; unsigned int result; (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1; 
  result = (unsigned int)OpenBabel::OBElements::GetMaxBonds(arg1); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_GetElectroNeg(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ; unsigned int arg1 ; double result; (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1; 
  result = (double)OpenBabel::OBElements::GetElectroNeg(arg1); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_GetRGB(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  unsigned int arg1 ; double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ; double *arg4 = (double *) 0 ; (void)jenv;
  (void)jcls; arg1 = (unsigned int)jarg1;  arg2 = *(double **)&jarg2;  arg3 = *(double **)&jarg3;  arg4 = *(double **)&jarg4; 
  OpenBabel::OBElements::GetRGB(arg1,arg2,arg3,arg4); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Dummy_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Dummy;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Hydrogen_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Hydrogen;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_H_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::H;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Helium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Helium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_He_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::He;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Lithium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Lithium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Li_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Li;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Beryllium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Beryllium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Be_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Be;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Boron_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Boron;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_B_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::B;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Carbon_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Carbon;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_C_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::C;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Nitrogen_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Nitrogen;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_N_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::N;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Oxygen_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Oxygen;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_O_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::O;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Fluorine_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Fluorine;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_F_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::F;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Neon_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Neon;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ne_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ne;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Sodium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Sodium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Na_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Na;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Magnesium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Magnesium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Mg_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Mg;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Aluminium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Aluminium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Al_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Al;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Silicon_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Silicon;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Si_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Si;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Phosphorus_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Phosphorus;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_P_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::P;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Sulfur_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Sulfur;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_S_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::S;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Chlorine_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Chlorine;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Cl_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Cl;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Argon_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Argon;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ar_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ar;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Potassium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Potassium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_K_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::K;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Calcium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Calcium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ca_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ca;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Scandium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Scandium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Sc_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Sc;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Titanium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Titanium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ti_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ti;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Vanadium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Vanadium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_V_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::V;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Chromium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Chromium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Cr_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Cr;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Manganese_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Manganese;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Mn_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Mn;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Iron_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Iron;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Fe_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Fe;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Cobalt_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Cobalt;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Co_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Co;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Nickel_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Nickel;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ni_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ni;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Copper_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Copper;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Cu_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Cu;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Zinc_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Zinc;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Zn_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Zn;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Gallium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Gallium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ga_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ga;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Germanium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Germanium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ge_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ge;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Arsenic_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Arsenic;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_As_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::As;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Selenium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Selenium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Se_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Se;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Bromine_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Bromine;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Br_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Br;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Krypton_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Krypton;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Kr_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Kr;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Rubidium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Rubidium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Rb_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Rb;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Strontium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Strontium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Sr_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Sr;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Yttrium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Yttrium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Y_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Y;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Zirconium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Zirconium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Zr_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Zr;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Niobium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Niobium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Nb_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Nb;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Molybdenum_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Molybdenum;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Mo_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Mo;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Technetium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Technetium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Tc_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Tc;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ruthenium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ruthenium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ru_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ru;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Rhodium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Rhodium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Rh_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Rh;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Palladium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Palladium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Pd_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Pd;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Silver_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Silver;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ag_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ag;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Cadmium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Cadmium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Cd_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Cd;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Indium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Indium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_In_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::In;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Tin_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Tin;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Sn_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Sn;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Antimony_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Antimony;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Sb_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Sb;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Tellurium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Tellurium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Te_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Te;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Iodine_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Iodine;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_I_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::I;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Xenon_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Xenon;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Xe_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Xe;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Caesium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Caesium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Cs_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Cs;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Barium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Barium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ba_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ba;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Lanthanum_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Lanthanum;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_La_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::La;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Cerium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Cerium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ce_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ce;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Praseodymium_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; unsigned int result; (void)jenv; (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBElements::Praseodymium; jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Pr_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Pr;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Neodymium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Neodymium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Nd_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Nd;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Promethium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Promethium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Pm_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Pm;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Samarium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Samarium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Sm_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Sm;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Europium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Europium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Eu_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Eu;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Gadolinium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Gadolinium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Gd_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Gd;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Terbium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Terbium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Tb_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Tb;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Dysprosium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Dysprosium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Dy_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Dy;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Holmium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Holmium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ho_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ho;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Erbium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Erbium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Er_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Er;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Thulium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Thulium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Tm_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Tm;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ytterbium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ytterbium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Yb_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Yb;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Lutetium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Lutetium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Lu_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Lu;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Hafnium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Hafnium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Hf_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Hf;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Tantalum_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Tantalum;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ta_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ta;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Tungsten_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Tungsten;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_W_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::W;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Rhenium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Rhenium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Re_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Re;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Osmium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Osmium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Os_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Os;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Iridium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Iridium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ir_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ir;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Platinum_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Platinum;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Pt_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Pt;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Gold_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Gold;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Au_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Au;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Mercury_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Mercury;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Hg_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Hg;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Thallium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Thallium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Tl_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Tl;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Lead_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Lead;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Pb_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Pb;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Bismuth_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Bismuth;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Bi_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Bi;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Polonium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Polonium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Po_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Po;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Astatine_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Astatine;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_At_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::At;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Radon_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Radon;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Rn_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Rn;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Francium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Francium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Fr_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Fr;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Radium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Radium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ra_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ra;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Actinium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Actinium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ac_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ac;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Thorium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Thorium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Th_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Th;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Protactinium_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; unsigned int result; (void)jenv; (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBElements::Protactinium; jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Pa_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Pa;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Uranium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Uranium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_U_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::U;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Neptunium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Neptunium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Np_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Np;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Plutonium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Plutonium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Pu_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Pu;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Americium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Americium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Am_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Am;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Curium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Curium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Cm_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Cm;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Berkelium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Berkelium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Bk_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Bk;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Californium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Californium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Cf_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Cf;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Einsteinium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Einsteinium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Es_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Es;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Fermium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Fermium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Fm_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Fm;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Mendelevium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Mendelevium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Md_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Md;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Nobelium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Nobelium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_No_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::No;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Lawrencium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Lawrencium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Lr_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Lr;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Rutherfordium_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; unsigned int result; (void)jenv; (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBElements::Rutherfordium; jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Rf_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Rf;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Dubnium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Dubnium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Db_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Db;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Seaborgium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Seaborgium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Sg_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Sg;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Bohrium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Bohrium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Bh_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Bh;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Hassium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Hassium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Hs_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Hs;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Meitnerium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Meitnerium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Mt_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Mt;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Darmstadtium_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; unsigned int result; (void)jenv; (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBElements::Darmstadtium; jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ds_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ds;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Roentgenium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Roentgenium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Rg_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Rg;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Copernicium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Copernicium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Cn_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Cn;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Nihonium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Nihonium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Nh_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Nh;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Flerovium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Flerovium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Fl_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Fl;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Moscovium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Moscovium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Mc_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Mc;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Livermorium_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Livermorium;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Lv_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Lv;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Tennessine_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Tennessine;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Ts_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Ts;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Oganesson_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Oganesson;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_Og_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned int result; (void)jenv; (void)jcls; result = (unsigned int)(unsigned int)OpenBabel::OBElements::Og;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_14RING_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 1)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_13RING_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 2)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1AROMATIC_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 3)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1RING_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 4)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1DONOR_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 7)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1ACCEPTOR_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 8)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBATOM_1TYPE_1LEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)(6); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = jarg2 ? true : false;  if (arg1) (arg1)->Visit = arg2; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool) ((arg1)->Visit); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAtom(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBAtom *)new OpenBabel::OBAtom();
  *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBAtom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1Duplicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->Duplicate(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetIdx(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned long arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (unsigned long)jarg2;  (arg1)->SetId(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetHyb(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetAtomicNum(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->SetIsotope(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetImplicitHCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->SetImplicitHCount(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetFormalCharge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; short arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (short)jarg2;  (arg1)->SetSpinMultiplicity(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetType((std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetPartialCharge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::vector3 *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return ; }  
  (arg1)->SetVector((OpenBabel::vector3 const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double arg2 ; double arg3 ; double arg4 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3;  arg4 = (double)jarg4; 
  (arg1)->SetVector(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double **arg2 = (double **) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = *(double ***)&jarg2;  (arg1)->SetCoordPtr(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  (arg1)->SetVector(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (arg1)->SetResidue(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  (arg1)->SetParent(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetAromatic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetAromatic(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetAromatic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  (arg1)->SetAromatic(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetInRing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetInRing(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetInRing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  (arg1)->SetInRing(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1ClearCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  (arg1)->ClearCoordPtr(); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (int)((OpenBabel::OBAtom const *)arg1)->GetFormalCharge();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetAtomicNum();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned short result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (unsigned short)((OpenBabel::OBAtom const *)arg1)->GetIsotope();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (int)((OpenBabel::OBAtom const *)arg1)->GetSpinMultiplicity();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetAtomicMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (double)((OpenBabel::OBAtom const *)arg1)->GetAtomicMass();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetExactMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (double)((OpenBabel::OBAtom const *)arg1)->GetExactMass();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetIndex();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned long result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (unsigned long)((OpenBabel::OBAtom const *)arg1)->GetId();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetCoordinateIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetCoordinateIdx(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetExplicitDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetExplicitDegree(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetTotalDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetTotalDegree(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetExplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetExplicitValence(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetTotalValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetTotalValence(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetHyb();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jshort JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetImplicitHCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned char result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned char)((OpenBabel::OBAtom const *)arg1)->GetImplicitHCount(); jresult = (jshort)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetHvyDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetHvyDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetHeteroDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetHeteroDegree(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; char *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (char *)(arg1)->GetType();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (double)((OpenBabel::OBAtom const *)arg1)->GetX(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (double)((OpenBabel::OBAtom const *)arg1)->GetY(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (double)((OpenBabel::OBAtom const *)arg1)->GetZ(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (double)((OpenBabel::OBAtom const *)arg1)->x(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (double)((OpenBabel::OBAtom const *)arg1)->y(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (double)((OpenBabel::OBAtom const *)arg1)->z(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (double *)(arg1)->GetCoordinate();
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::vector3 *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (OpenBabel::vector3 *) &(arg1)->GetVector();
  *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (double)(arg1)->GetPartialCharge(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBResidue *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (OpenBabel::OBResidue *)(arg1)->GetResidue();
  *(OpenBabel::OBResidue **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBMol *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (OpenBabel::OBMol *)(arg1)->GetParent();
  *(OpenBabel::OBMol **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetNewBondVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::vector3 *arg2 = 0 ; double arg3 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg3 = (double)jarg3;  result = (bool)(arg1)->GetNewBondVector(*arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (OpenBabel::OBBond *)(arg1)->GetBond(arg2);
  *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1BeginBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (arg1)->BeginBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1EndBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (arg1)->EndBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1BeginBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBBond *)(arg1)->BeginBond(*arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1NextBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBBond *)(arg1)->NextBond(*arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1BeginNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBAtom *)(arg1)->BeginNbrAtom(*arg2); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1NextNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBAtom *)(arg1)->NextNbrAtom(*arg2); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (int)jarg2;  result = (double)(arg1)->GetDistance(arg2);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (double)(arg1)->GetDistance(arg2); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetDistance_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 *arg2 = (OpenBabel::vector3 *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2;  result = (double)(arg1)->GetDistance(arg2);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetAngle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int arg2 ; int arg3 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (double)(arg1)->GetAngle(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1GetAngle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3;  result = (double)(arg1)->GetAngle(arg2,arg3); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1NewResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  (arg1)->NewResidue(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1AddResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (arg1)->AddResidue(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1DeleteResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  (arg1)->DeleteResidue(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1AddBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (arg1)->AddBond(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1InsertBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return ; }  
  arg3 = *(OpenBabel::OBBond **)&jarg3;  (arg1)->InsertBond(*arg2,arg3); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1DeleteBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2;  result = (bool)(arg1)->DeleteBond(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1ClearBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  (arg1)->ClearBond(); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1HtoMethyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->HtoMethyl(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SetHybAndGeom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (int)jarg2;  result = (bool)(arg1)->SetHybAndGeom(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1CountFreeOxygens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->CountFreeOxygens(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1CountFreeSulfurs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->CountFreeSulfurs(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1ExplicitHydrogenCount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool arg2 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->ExplicitHydrogenCount(arg2); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1ExplicitHydrogenCount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->ExplicitHydrogenCount(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1MemberOfRingCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->MemberOfRingCount(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1MemberOfRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->MemberOfRingSize(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1CountRingBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->CountRingBonds(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SmallestBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (double)(arg1)->SmallestBondAngle(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1AverageBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (double)(arg1)->AverageBondAngle(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1LewisAcidBaseCounts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; SwigValueWrapper< std::pair< int,int > > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = ((OpenBabel::OBAtom const *)arg1)->LewisAcidBaseCounts();
  *(std::pair< int,int > **)&jresult = new std::pair< int,int >((const std::pair< int,int > &)result);  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1HasResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->HasResidue(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsHetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->IsHetAtom(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)((OpenBabel::OBAtom const *)arg1)->IsElement(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)((OpenBabel::OBAtom const *)arg1)->IsAromatic();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)((OpenBabel::OBAtom const *)arg1)->IsInRing();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsInRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)((OpenBabel::OBAtom const *)arg1)->IsInRingSize(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsHeteroatom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->IsHeteroatom(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (bool)(arg1)->IsConnected(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsOneThree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (bool)(arg1)->IsOneThree(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsOneFour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (bool)(arg1)->IsOneFour(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsCarboxylOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->IsCarboxylOxygen(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsPhosphateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->IsPhosphateOxygen(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsSulfateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->IsSulfateOxygen(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsNitroOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->IsNitroOxygen(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsAmideNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->IsAmideNitrogen(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->IsPolarHydrogen(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsNonPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->IsNonPolarHydrogen(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsAromaticNOxide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->IsAromaticNOxide(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->IsChiral(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)((OpenBabel::OBAtom const *)arg1)->IsPeriodic();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsAxial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->IsAxial(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsHbondAcceptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->IsHbondAcceptor(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsHbondAcceptorSimple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->IsHbondAcceptorSimple(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsHbondDonor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->IsHbondDonor(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsHbondDonorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->IsHbondDonorH(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1IsMetal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->IsMetal(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1HasAlphaBetaUnsat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->HasAlphaBetaUnsat(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1HasAlphaBetaUnsat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->HasAlphaBetaUnsat(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1HasBondOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->HasBondOfOrder(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1CountBondsOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; unsigned int arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->CountBondsOfOrder(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1HighestBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (int)(arg1)->HighestBondOrder(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1HasNonSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->HasNonSingleBond(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1HasSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->HasSingleBond(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1HasDoubleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->HasDoubleBond(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1HasAromaticBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = (bool)(arg1)->HasAromaticBond(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1MatchesSMARTS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; char *arg2 = (char *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  result = (bool)(arg1)->MatchesSMARTS((char const *)arg2); jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1AROMATIC_1BOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 1)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1WEDGE_1BOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 2)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1HASH_1BOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 3)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1RING_1BOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 4)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1CLOSURE_1BOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 10)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1WEDGE_1OR_1HASH_1BOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 11)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1Aromatic_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBBond::Flag result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBBond::Flag)OpenBabel::OBBond::Aromatic; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1Ring_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  OpenBabel::OBBond::Flag result; (void)jenv; (void)jcls; result = (OpenBabel::OBBond::Flag)OpenBabel::OBBond::Ring;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1Closure_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBBond::Flag result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBBond::Flag)OpenBabel::OBBond::Closure; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1Wedge_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  OpenBabel::OBBond::StereoFlag result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBBond::StereoFlag)OpenBabel::OBBond::Wedge; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1Hash_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  OpenBabel::OBBond::StereoFlag result; (void)jenv; (void)jcls; result = (OpenBabel::OBBond::StereoFlag)OpenBabel::OBBond::Hash;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1WedgeOrHash_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBBond::StereoFlag result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBBond::StereoFlag)OpenBabel::OBBond::WedgeOrHash; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1CisOrTrans_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBBond::StereoFlag result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBBond::StereoFlag)OpenBabel::OBBond::CisOrTrans; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  arg2 = jarg2 ? true : false;  if (arg1) (arg1)->Visit = arg2; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (bool) ((arg1)->Visit); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBBond(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBBond *)new OpenBabel::OBBond();
  *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBBond(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBBond **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetIdx(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; unsigned long arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  arg2 = (unsigned long)jarg2;  (arg1)->SetId(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetBondOrder(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBBond **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->SetBegin(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBBond **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->SetEnd(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBBond **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  (arg1)->SetParent(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetLength_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; double arg3 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = (double)jarg3;  (arg1)->SetLength(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetLength_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetLength(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1Set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jint jarg6) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; int arg2 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; int arg5 ; int arg6 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  (void)jarg4_; arg1 = *(OpenBabel::OBBond **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4;  arg5 = (int)jarg5;  arg6 = (int)jarg6;  (arg1)->Set(arg2,arg3,arg4,arg5,arg6); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetAromatic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetAromatic(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetAromatic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  (arg1)->SetAromatic(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetWedge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetWedge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetWedge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  (arg1)->SetWedge(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetHash_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetHash(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetHash_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  (arg1)->SetHash(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetWedgeOrHash_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetWedgeOrHash(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetWedgeOrHash_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  (arg1)->SetWedgeOrHash(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetInRing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetInRing(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetInRing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  (arg1)->SetInRing(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetClosure_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetClosure(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SetClosure_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  (arg1)->SetClosure(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1GetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; unsigned long result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (unsigned long)((OpenBabel::OBBond const *)arg1)->GetId();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1GetBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetBondOrder();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1GetFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetFlags();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1GetBeginAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetBeginAtomIdx(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1GetEndAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetEndAtomIdx(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1GetBeginAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; OpenBabel::OBAtom *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (OpenBabel::OBAtom *)(arg1)->GetBeginAtom();
  *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1GetEndAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; OpenBabel::OBAtom *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (OpenBabel::OBAtom *)(arg1)->GetEndAtom();
  *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1GetNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (OpenBabel::OBAtom *)(arg1)->GetNbrAtom(arg2);
  *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; OpenBabel::OBMol *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (OpenBabel::OBMol *)(arg1)->GetParent();
  *(OpenBabel::OBMol **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1GetEquibLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (double)((OpenBabel::OBBond const *)arg1)->GetEquibLength();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1GetLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (double)((OpenBabel::OBBond const *)arg1)->GetLength();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1GetNbrAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (unsigned int)(arg1)->GetNbrAtomIdx(arg2); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1FindSmallestRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; OpenBabel::OBRing *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (OpenBabel::OBRing *)((OpenBabel::OBBond const *)arg1)->FindSmallestRing();
  *(OpenBabel::OBRing **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (bool)((OpenBabel::OBBond const *)arg1)->IsAromatic();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (bool)((OpenBabel::OBBond const *)arg1)->IsInRing();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1IsRotor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBond **)&jarg1;  arg2 = jarg2 ? true : false;  result = (bool)(arg1)->IsRotor(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1IsRotor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (bool)(arg1)->IsRotor(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1IsPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (bool)((OpenBabel::OBBond const *)arg1)->IsPeriodic();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1IsAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (bool)(arg1)->IsAmide(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1IsPrimaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (bool)(arg1)->IsPrimaryAmide(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1IsSecondaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (bool)(arg1)->IsSecondaryAmide(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1IsTertiaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (bool)(arg1)->IsTertiaryAmide(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1IsEster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (bool)(arg1)->IsEster(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1IsCarbonyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (bool)(arg1)->IsCarbonyl(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1IsClosure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (bool)(arg1)->IsClosure(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1IsWedge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (bool)(arg1)->IsWedge(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1IsHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (bool)(arg1)->IsHash(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1IsWedgeOrHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (bool)((OpenBabel::OBBond const *)arg1)->IsWedgeOrHash();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1IsCisOrTrans(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (bool)((OpenBabel::OBBond const *)arg1)->IsCisOrTrans();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1IsDoubleBondGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1;  result = (bool)(arg1)->IsDoubleBondGeometry(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBReaction(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBReaction *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBReaction *)new OpenBabel::OBReaction();
  *(OpenBabel::OBReaction **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1NumReactants(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBReaction **)&jarg1;  result = (int)((OpenBabel::OBReaction const *)arg1)->NumReactants();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1NumProducts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBReaction **)&jarg1;  result = (int)((OpenBabel::OBReaction const *)arg1)->NumProducts();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1NumAgents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBReaction **)&jarg1;  result = (int)((OpenBabel::OBReaction const *)arg1)->NumAgents();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1AddReactant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; SwigValueWrapper< obsharedptr< OpenBabel::OBMol > > arg2 ;
  obsharedptr< OpenBabel::OBMol > const *argp2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBReaction **)&jarg1;  argp2 = *(obsharedptr< OpenBabel::OBMol > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null obsharedptr< OpenBabel::OBMol > const");
    return ; }  arg2 = *argp2;  (arg1)->AddReactant(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1AddProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; SwigValueWrapper< obsharedptr< OpenBabel::OBMol > > arg2 ;
  obsharedptr< OpenBabel::OBMol > const *argp2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBReaction **)&jarg1;  argp2 = *(obsharedptr< OpenBabel::OBMol > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null obsharedptr< OpenBabel::OBMol > const");
    return ; }  arg2 = *argp2;  (arg1)->AddProduct(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1SetTransitionState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; SwigValueWrapper< obsharedptr< OpenBabel::OBMol > > arg2 ;
  obsharedptr< OpenBabel::OBMol > const *argp2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBReaction **)&jarg1;  argp2 = *(obsharedptr< OpenBabel::OBMol > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null obsharedptr< OpenBabel::OBMol > const");
    return ; }  arg2 = *argp2;  (arg1)->SetTransitionState(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1AddAgent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; SwigValueWrapper< obsharedptr< OpenBabel::OBMol > > arg2 ;
  obsharedptr< OpenBabel::OBMol > const *argp2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBReaction **)&jarg1;  argp2 = *(obsharedptr< OpenBabel::OBMol > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null obsharedptr< OpenBabel::OBMol > const");
    return ; }  arg2 = *argp2;  (arg1)->AddAgent(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1GetReactant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; unsigned int arg2 ;
  SwigValueWrapper< obsharedptr< OpenBabel::OBMol > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBReaction **)&jarg1;  arg2 = (unsigned int)jarg2;  result = (arg1)->GetReactant(arg2);
  *(obsharedptr< OpenBabel::OBMol > **)&jresult = new obsharedptr< OpenBabel::OBMol >((const obsharedptr< OpenBabel::OBMol > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1GetProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; unsigned int arg2 ;
  SwigValueWrapper< obsharedptr< OpenBabel::OBMol > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBReaction **)&jarg1;  arg2 = (unsigned int)jarg2;  result = (arg1)->GetProduct(arg2);
  *(obsharedptr< OpenBabel::OBMol > **)&jresult = new obsharedptr< OpenBabel::OBMol >((const obsharedptr< OpenBabel::OBMol > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1GetAgent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; unsigned int arg2 ;
  SwigValueWrapper< obsharedptr< OpenBabel::OBMol > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBReaction **)&jarg1;  arg2 = (unsigned int)jarg2;  result = (arg1)->GetAgent(arg2);
  *(obsharedptr< OpenBabel::OBMol > **)&jresult = new obsharedptr< OpenBabel::OBMol >((const obsharedptr< OpenBabel::OBMol > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1GetTransitionState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ;
  SwigValueWrapper< obsharedptr< OpenBabel::OBMol > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBReaction **)&jarg1;  result = ((OpenBabel::OBReaction const *)arg1)->GetTransitionState();
  *(obsharedptr< OpenBabel::OBMol > **)&jresult = new obsharedptr< OpenBabel::OBMol >((const obsharedptr< OpenBabel::OBMol > &)result); 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1GetTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBReaction **)&jarg1;  result = ((OpenBabel::OBReaction const *)arg1)->GetTitle();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1GetComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBReaction **)&jarg1;  result = ((OpenBabel::OBReaction const *)arg1)->GetComment();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1SetTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBReaction **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetTitle((std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1SetComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBReaction **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetComment((std::string const &)*arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1IsReversible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBReaction **)&jarg1;  result = (bool)((OpenBabel::OBReaction const *)arg1)->IsReversible();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1SetReversible_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBReaction **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetReversible(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1SetReversible_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBReaction **)&jarg1;  (arg1)->SetReversible(); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1ClassDescription(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)OpenBabel::OBReaction::ClassDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBReaction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBReaction *arg1 = (OpenBabel::OBReaction *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBReaction **)&jarg1; 
  delete arg1; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1SSSR_1MOL_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 1)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1RINGFLAGS_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 2)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1AROMATIC_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 3)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1ATOMTYPES_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 4)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1CHIRALITY_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 5)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1PCHARGE_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 6)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1HYBRID_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 8)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1CLOSURE_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 11)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1H_1ADDED_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 12)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1PH_1CORRECTED_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 13)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1CHAINS_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 15)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1TCHARGE_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 16)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1TSPIN_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 17)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1RINGTYPES_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 18)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1PATTERN_1STRUCTURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 19)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1LSSR_1MOL_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 20)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1ATOMSPIN_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 21)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1REACTION_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 22)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1PERIODIC_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 23)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OB_1CURRENT_1CONFORMER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)(-1); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMol_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBMol *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBMol *)new OpenBabel::OBMol(); *(OpenBabel::OBMol **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = 0 ; OpenBabel::OBMol *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol const & reference is null"); return 0; }  
  result = (OpenBabel::OBMol *)new OpenBabel::OBMol((OpenBabel::OBMol const &)*arg1); *(OpenBabel::OBMol **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBMol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBMol **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1ReserveAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2;  (arg1)->ReserveAtoms(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1DestroyAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->DestroyAtom(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1DestroyBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (arg1)->DestroyBond(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1DestroyResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (arg1)->DestroyResidue(arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddAtom_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *arg2 = 0 ; bool arg3 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtom & reference is null"); return 0; }  
  arg3 = jarg3 ? true : false;  result = (bool)(arg1)->AddAtom(*arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddAtom_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtom & reference is null"); return 0; }  
  result = (bool)(arg1)->AddAtom(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1InsertAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtom & reference is null"); return 0; }  
  result = (bool)(arg1)->InsertAtom(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddBond_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; int arg3 ; int arg4 ; int arg5 ;
  int arg6 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  arg5 = (int)jarg5;  arg6 = (int)jarg6; 
  result = (bool)(arg1)->AddBond(arg2,arg3,arg4,arg5,arg6); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddBond_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; int arg3 ; int arg4 ; int arg5 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  arg5 = (int)jarg5;  result = (bool)(arg1)->AddBond(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddBond_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; int arg3 ; int arg4 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  arg4 = (int)jarg4;  result = (bool)(arg1)->AddBond(arg2,arg3,arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddBond_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBBond *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBond & reference is null"); return 0; }  
  result = (bool)(arg1)->AddBond(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBResidue *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBResidue & reference is null"); return 0; }  
  result = (bool)(arg1)->AddResidue(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1NewAtom_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (OpenBabel::OBAtom *)(arg1)->NewAtom();
  *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1NewAtom_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned long arg2 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (unsigned long)jarg2; 
  result = (OpenBabel::OBAtom *)(arg1)->NewAtom(arg2); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1NewBond_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (OpenBabel::OBBond *)(arg1)->NewBond();
  *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1NewBond_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned long arg2 ; OpenBabel::OBBond *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (unsigned long)jarg2; 
  result = (OpenBabel::OBBond *)(arg1)->NewBond(arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1NewResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBResidue *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (OpenBabel::OBResidue *)(arg1)->NewResidue();
  *(OpenBabel::OBResidue **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1DeleteAtom_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = jarg3 ? true : false;  result = (bool)(arg1)->DeleteAtom(arg2,arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1DeleteAtom_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (bool)(arg1)->DeleteAtom(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1DeleteBond_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2;  arg3 = jarg3 ? true : false;  result = (bool)(arg1)->DeleteBond(arg2,arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1DeleteBond_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2;  result = (bool)(arg1)->DeleteBond(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1DeleteResidue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; bool arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBResidue **)&jarg2;  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->DeleteResidue(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1DeleteResidue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBResidue **)&jarg2;  result = (bool)(arg1)->DeleteResidue(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1BeginModify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->BeginModify(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1EndModify_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->EndModify(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1EndModify_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->EndModify(); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetMod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (int)(arg1)->GetMod(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1IncrementMod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->IncrementMod(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1DecrementMod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->DecrementMod(); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (int)(arg1)->GetFlags(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetTitle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; char *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (char *)((OpenBabel::OBMol const *)arg1)->GetTitle(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetTitle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; char *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (char *)((OpenBabel::OBMol const *)arg1)->GetTitle();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1NumAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (unsigned int)((OpenBabel::OBMol const *)arg1)->NumAtoms();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1NumBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (unsigned int)((OpenBabel::OBMol const *)arg1)->NumBonds();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1NumHvyAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (unsigned int)(arg1)->NumHvyAtoms(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1NumResidues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (unsigned int)((OpenBabel::OBMol const *)arg1)->NumResidues();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1NumRotors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (unsigned int)(arg1)->NumRotors(arg2); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1NumRotors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (unsigned int)(arg1)->NumRotors(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; OpenBabel::OBAtom *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMol const *)arg1)->GetAtom(arg2); *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetAtomById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned long arg2 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (unsigned long)jarg2; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMol const *)arg1)->GetAtomById(arg2); *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetFirstAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMol const *)arg1)->GetFirstAtom(); *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetBond_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; OpenBabel::OBBond *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2; 
  result = (OpenBabel::OBBond *)((OpenBabel::OBMol const *)arg1)->GetBond(arg2); *(OpenBabel::OBBond **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetBondById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned long arg2 ; OpenBabel::OBBond *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (unsigned long)jarg2; 
  result = (OpenBabel::OBBond *)((OpenBabel::OBMol const *)arg1)->GetBondById(arg2); *(OpenBabel::OBBond **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetBond_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; int arg3 ; OpenBabel::OBBond *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (OpenBabel::OBBond *)((OpenBabel::OBMol const *)arg1)->GetBond(arg2,arg3); *(OpenBabel::OBBond **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetBond_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3;  result = (OpenBabel::OBBond *)((OpenBabel::OBMol const *)arg1)->GetBond(arg2,arg3);
  *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; OpenBabel::OBResidue *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2; 
  result = (OpenBabel::OBResidue *)((OpenBabel::OBMol const *)arg1)->GetResidue(arg2);
  *(OpenBabel::OBResidue **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetInternalCoord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< OpenBabel::OBInternalCoord * > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (arg1)->GetInternalCoord();
  *(std::vector< OpenBabel::OBInternalCoord * > **)&jresult = new std::vector< OpenBabel::OBInternalCoord * >((const std::vector< OpenBabel::OBInternalCoord * > &)result); 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetTorsion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jdouble jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; int arg3 ; int arg4 ; int arg5 ;
  double result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  arg5 = (int)jarg5;  result = (double)(arg1)->GetTorsion(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetTorsion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jdouble jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg5 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; (void)jarg5_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3;  arg4 = *(OpenBabel::OBAtom **)&jarg4;  arg5 = *(OpenBabel::OBAtom **)&jarg5; 
  result = (double)(arg1)->GetTorsion(arg2,arg3,arg4,arg5); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = *(OpenBabel::OBAtom **)&jarg3;  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  result = (double)(arg1)->GetAngle(arg2,arg3,arg4); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AreInSameRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3;  result = (int)(arg1)->AreInSameRing(arg2,arg3); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetFormula(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (arg1)->GetFormula();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetSpacedFormula_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jboolean jarg4) {
  jstring jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; char *arg3 = (char *) 0 ; bool arg4 ;
  std::string result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2;  arg3 = 0;
  if (jarg3) { arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; }  arg4 = jarg4 ? true : false; 
  result = (arg1)->GetSpacedFormula(arg2,(char const *)arg3,arg4); jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetSpacedFormula_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; char *arg3 = (char *) 0 ;
  std::string result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2;  arg3 = 0;
  if (jarg3) { arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; } 
  result = (arg1)->GetSpacedFormula(arg2,(char const *)arg3); jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetSpacedFormula_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2;  result = (arg1)->GetSpacedFormula(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetSpacedFormula_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (arg1)->GetSpacedFormula();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetEnergy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (double)((OpenBabel::OBMol const *)arg1)->GetEnergy();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetMolWt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  result = (double)(arg1)->GetMolWt(arg2);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetMolWt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (double)(arg1)->GetMolWt(); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetExactMass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  result = (double)(arg1)->GetExactMass(arg2);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetExactMass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (double)(arg1)->GetExactMass(); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetTotalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (int)(arg1)->GetTotalCharge(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetTotalSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (unsigned int)(arg1)->GetTotalSpinMultiplicity();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned short result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (unsigned short)((OpenBabel::OBMol const *)arg1)->GetDimension();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (double *)(arg1)->GetCoordinates();
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetSSSR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< OpenBabel::OBRing * > *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (std::vector< OpenBabel::OBRing * > *) &(arg1)->GetSSSR();
  *(std::vector< OpenBabel::OBRing * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetLSSR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< OpenBabel::OBRing * > *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (std::vector< OpenBabel::OBRing * > *) &(arg1)->GetLSSR();
  *(std::vector< OpenBabel::OBRing * > **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AutomaticFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->AutomaticFormalCharge(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AutomaticPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->AutomaticPartialCharge(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetTitle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ; }  (arg1)->SetTitle((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetTitle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(std::string **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return ; }  
  (arg1)->SetTitle(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetFormula(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::string arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ; (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  (arg1)->SetFormula(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetEnergy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetEnergy(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned short arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (unsigned short)jarg2;  (arg1)->SetDimension(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetTotalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetTotalCharge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetTotalSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->SetTotalSpinMultiplicity(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetInternalCoord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< OpenBabel::OBInternalCoord * > arg2 ;
  std::vector< OpenBabel::OBInternalCoord * > *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  argp2 = *(std::vector< OpenBabel::OBInternalCoord * > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< OpenBabel::OBInternalCoord * >");
    return ; }  arg2 = *argp2;  (arg1)->SetInternalCoord(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetAutomaticFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetAutomaticFormalCharge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetAutomaticPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetAutomaticPartialCharge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetAromaticPerceived_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetAromaticPerceived(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetAromaticPerceived_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetAromaticPerceived(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetSSSRPerceived_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetSSSRPerceived(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetSSSRPerceived_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetSSSRPerceived(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetLSSRPerceived_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetLSSRPerceived(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetLSSRPerceived_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetLSSRPerceived(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetRingAtomsAndBondsPerceived_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetRingAtomsAndBondsPerceived(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetRingAtomsAndBondsPerceived_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetRingAtomsAndBondsPerceived(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetAtomTypesPerceived_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetAtomTypesPerceived(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetAtomTypesPerceived_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetAtomTypesPerceived(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetRingTypesPerceived_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetRingTypesPerceived(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetRingTypesPerceived_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetRingTypesPerceived(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetChainsPerceived_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetChainsPerceived(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetChainsPerceived_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetChainsPerceived(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetChiralityPerceived_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetChiralityPerceived(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetChiralityPerceived_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetChiralityPerceived(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetPartialChargesPerceived_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetPartialChargesPerceived(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetPartialChargesPerceived_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetPartialChargesPerceived(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetHybridizationPerceived_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetHybridizationPerceived(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetHybridizationPerceived_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetHybridizationPerceived(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetClosureBondsPerceived_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetClosureBondsPerceived(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetClosureBondsPerceived_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetClosureBondsPerceived(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetHydrogensAdded_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetHydrogensAdded(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetHydrogensAdded_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetHydrogensAdded(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetCorrectedForPH_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetCorrectedForPH(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetCorrectedForPH_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetCorrectedForPH(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetSpinMultiplicityAssigned_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetSpinMultiplicityAssigned(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetSpinMultiplicityAssigned_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetSpinMultiplicityAssigned(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetIsPatternStructure_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetIsPatternStructure(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetIsPatternStructure_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetIsPatternStructure(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetIsReaction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetIsReaction(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetIsReaction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetIsReaction(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetPeriodicMol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetPeriodicMol(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetPeriodicMol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetPeriodicMol(); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1HasFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2;  result = (bool)(arg1)->HasFlag(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetFlag(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1UnsetFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2;  (arg1)->UnsetFlag(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetFlags(arg2); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1ClassDescription(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)OpenBabel::OBMol::ClassDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1RenumberAtoms_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< OpenBabel::OBAtom * > *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(std::vector< OpenBabel::OBAtom * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBAtom * > & reference is null");
    return ; }   (arg1)->RenumberAtoms(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1RenumberAtoms_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< int > arg2 ; std::vector< int > *argp2 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1;  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return ; }  arg2 = *argp2;  (arg1)->RenumberAtoms(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double *arg2 = (double *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(double **)&jarg2;  (arg1)->SetCoordinates(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1ToInertialFrame_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; double *arg3 = (double *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(double **)&jarg3; 
  (arg1)->ToInertialFrame(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1ToInertialFrame_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->ToInertialFrame(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1Translate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::vector3 *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return ; }  
  (arg1)->Translate((OpenBabel::vector3 const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1Translate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::vector3 *arg2 = 0 ; int arg3 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return ; }  
  arg3 = (int)jarg3;  (arg1)->Translate((OpenBabel::vector3 const &)*arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1Rotate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double (*arg2)[3] ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(double (**)[3])&jarg2;  (arg1)->Rotate((double const (*)[3])arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1Rotate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double *arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(double **)&jarg2;  (arg1)->Rotate((double const (*))arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1Rotate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double *arg2 ; int arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = (int)jarg3; 
  (arg1)->Rotate((double const (*))arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1Center_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->Center(); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1DeleteHydrogens_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->DeleteHydrogens(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1DeleteHydrogens_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (bool)(arg1)->DeleteHydrogens(arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1DeletePolarHydrogens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->DeletePolarHydrogens(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1DeleteNonPolarHydrogens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->DeleteNonPolarHydrogens(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1DeleteHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (bool)(arg1)->DeleteHydrogen(arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddHydrogens_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jdouble jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; bool arg3 ; double arg4 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false;  arg4 = (double)jarg4;  result = (bool)(arg1)->AddHydrogens(arg2,arg3,arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddHydrogens_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; bool arg3 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->AddHydrogens(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddHydrogens_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  result = (bool)(arg1)->AddHydrogens(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddHydrogens_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->AddHydrogens(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddHydrogens_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (bool)(arg1)->AddHydrogens(arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddPolarHydrogens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->AddPolarHydrogens(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddNonPolarHydrogens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->AddNonPolarHydrogens(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddNewHydrogens_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3, jdouble jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::HydrogenType arg2 ; bool arg3 ;
  double arg4 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (OpenBabel::HydrogenType)jarg2;  arg3 = jarg3 ? true : false;  arg4 = (double)jarg4; 
  result = (bool)(arg1)->AddNewHydrogens(arg2,arg3,arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddNewHydrogens_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::HydrogenType arg2 ; bool arg3 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (OpenBabel::HydrogenType)jarg2;  arg3 = jarg3 ? true : false;  result = (bool)(arg1)->AddNewHydrogens(arg2,arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddNewHydrogens_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::HydrogenType arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (OpenBabel::HydrogenType)jarg2; 
  result = (bool)(arg1)->AddNewHydrogens(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1StripSalts_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->StripSalts(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1StripSalts_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->StripSalts(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1Separate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; std::vector< OpenBabel::OBMol > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2; 
  result = (arg1)->Separate(arg2);
  *(std::vector< OpenBabel::OBMol > **)&jresult = new std::vector< OpenBabel::OBMol >((const std::vector< OpenBabel::OBMol > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1Separate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< OpenBabel::OBMol > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (arg1)->Separate();
  *(std::vector< OpenBabel::OBMol > **)&jresult = new std::vector< OpenBabel::OBMol >((const std::vector< OpenBabel::OBMol > &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetNextFragment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBMolAtomDFSIter *arg2 = 0 ;
  OpenBabel::OBMol *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBMolAtomDFSIter **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolAtomDFSIter & reference is null"); return 0; }
    arg3 = *(OpenBabel::OBMol **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->GetNextFragment(*arg2,*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1CopySubstructure_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBitVec *arg3 = (OpenBabel::OBBitVec *) 0 ; OpenBabel::OBBitVec *arg4 = (OpenBabel::OBBitVec *) 0 ;
  unsigned int arg5 ; std::vector< unsigned int > *arg6 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int > *arg7 = (std::vector< unsigned int > *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; (void)jarg3_; (void)jarg4_; (void)jarg6_; (void)jarg7_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = *(OpenBabel::OBBitVec **)&jarg3;  arg4 = *(OpenBabel::OBBitVec **)&jarg4;  arg5 = (unsigned int)jarg5; 
  arg6 = *(std::vector< unsigned int > **)&jarg6;  arg7 = *(std::vector< unsigned int > **)&jarg7; 
  result = (bool)(arg1)->CopySubstructure(*arg2,arg3,arg4,arg5,arg6,arg7); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1CopySubstructure_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBitVec *arg3 = (OpenBabel::OBBitVec *) 0 ; OpenBabel::OBBitVec *arg4 = (OpenBabel::OBBitVec *) 0 ;
  unsigned int arg5 ; std::vector< unsigned int > *arg6 = (std::vector< unsigned int > *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; (void)jarg6_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = *(OpenBabel::OBBitVec **)&jarg3;  arg4 = *(OpenBabel::OBBitVec **)&jarg4;  arg5 = (unsigned int)jarg5; 
  arg6 = *(std::vector< unsigned int > **)&jarg6;  result = (bool)(arg1)->CopySubstructure(*arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1CopySubstructure_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBitVec *arg3 = (OpenBabel::OBBitVec *) 0 ; OpenBabel::OBBitVec *arg4 = (OpenBabel::OBBitVec *) 0 ;
  unsigned int arg5 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = *(OpenBabel::OBBitVec **)&jarg3;  arg4 = *(OpenBabel::OBBitVec **)&jarg4;  arg5 = (unsigned int)jarg5; 
  result = (bool)(arg1)->CopySubstructure(*arg2,arg3,arg4,arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1CopySubstructure_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBitVec *arg3 = (OpenBabel::OBBitVec *) 0 ; OpenBabel::OBBitVec *arg4 = (OpenBabel::OBBitVec *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = *(OpenBabel::OBBitVec **)&jarg3;  arg4 = *(OpenBabel::OBBitVec **)&jarg4; 
  result = (bool)(arg1)->CopySubstructure(*arg2,arg3,arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1CopySubstructure_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBitVec *arg3 = (OpenBabel::OBBitVec *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = *(OpenBabel::OBBitVec **)&jarg3;  result = (bool)(arg1)->CopySubstructure(*arg2,arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1ConvertDativeBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->ConvertDativeBonds(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1MakeDativeBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->MakeDativeBonds(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1ConvertZeroBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->ConvertZeroBonds(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1CorrectForPH_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (double)jarg2;  result = (bool)(arg1)->CorrectForPH(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1CorrectForPH_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->CorrectForPH(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AssignSpinMultiplicity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->AssignSpinMultiplicity(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AssignSpinMultiplicity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->AssignSpinMultiplicity(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AssignTotalChargeToAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2;  result = (bool)(arg1)->AssignTotalChargeToAtoms(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1Center_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; OpenBabel::vector3 result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2;  result = (arg1)->Center(arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetTorsion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jdouble jarg6) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg5 = (OpenBabel::OBAtom *) 0 ; double arg6 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; (void)jarg5_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3;  arg4 = *(OpenBabel::OBAtom **)&jarg4;  arg5 = *(OpenBabel::OBAtom **)&jarg5; 
  arg6 = (double)jarg6;  (arg1)->SetTorsion(arg2,arg3,arg4,arg5,arg6); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1FindSSSR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->FindSSSR(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1FindLSSR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->FindLSSR(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1FindRingAtomsAndBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->FindRingAtomsAndBonds(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1FindChildren_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< int > *arg2 = 0 ; int arg3 ; int arg4 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(std::vector< int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null"); return ; }  
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  (arg1)->FindChildren(*arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1FindChildren_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< OpenBabel::OBAtom * > *arg2 = 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBAtom * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBAtom * > & reference is null");
    return ; }   arg3 = *(OpenBabel::OBAtom **)&jarg3;  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  (arg1)->FindChildren(*arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1FindLargestFragment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBBitVec *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBBitVec **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null"); return ; }  
  (arg1)->FindLargestFragment(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1ContigFragList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< std::vector< int > > *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(std::vector< std::vector< int > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > > & reference is null");
    return ; }   (arg1)->ContigFragList(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1Align(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; OpenBabel::vector3 *arg4 = 0 ; OpenBabel::vector3 *arg5 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; (void)jarg5_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = *(OpenBabel::OBAtom **)&jarg3;  arg4 = *(OpenBabel::vector3 **)&jarg4;
  if (!arg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return ; }
    arg5 = *(OpenBabel::vector3 **)&jarg5; if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return ; }  
  (arg1)->Align(arg2,arg3,*arg4,*arg5); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1ConnectTheDots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->ConnectTheDots(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1PerceiveBondOrders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->PerceiveBondOrders(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1FindAngles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->FindAngles(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1FindTorsions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->FindTorsions(); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetGTDVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< int > *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null"); return 0; }  
  result = (bool)(arg1)->GetGTDVector(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetGIVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< unsigned int > *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(std::vector< unsigned int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null"); return ; }
    (arg1)->GetGIVector(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetGIDVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< unsigned int > *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(std::vector< unsigned int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null"); return ; }
    (arg1)->GetGIDVector(*arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1Has2D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  result = (bool)(arg1)->Has2D(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1Has2D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->Has2D(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1Has3D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->Has3D(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1HasNonZeroCoords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->HasNonZeroCoords(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1HasAromaticPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->HasAromaticPerceived(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1HasSSSRPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->HasSSSRPerceived(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1HasLSSRPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->HasLSSRPerceived(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1HasRingAtomsAndBondsPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->HasRingAtomsAndBondsPerceived(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1HasAtomTypesPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->HasAtomTypesPerceived(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1HasRingTypesPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->HasRingTypesPerceived(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1HasChiralityPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->HasChiralityPerceived(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1HasPartialChargesPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->HasPartialChargesPerceived(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1HasHybridizationPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->HasHybridizationPerceived(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1HasClosureBondsPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->HasClosureBondsPerceived(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1HasChainsPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->HasChainsPerceived(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1HasHydrogensAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->HasHydrogensAdded(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1IsCorrectedForPH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->IsCorrectedForPH(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1HasSpinMultiplicityAssigned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->HasSpinMultiplicityAssigned(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1IsReaction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->IsReaction(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1IsPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->IsPeriodic(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1Empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (bool)(arg1)->Empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1NumConformers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (int)(arg1)->NumConformers(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetConformers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< double * > *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(std::vector< double * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double * > & reference is null"); return ; }  
  (arg1)->SetConformers(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1AddConformer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double *arg2 = (double *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(double **)&jarg2;  (arg1)->AddConformer(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetConformer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->SetConformer(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1CopyConformer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; double *arg2 = (double *) 0 ; int arg3 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = (int)jarg3; 
  (arg1)->CopyConformer(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1DeleteConformer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2;  (arg1)->DeleteConformer(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetConformer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; double *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2;  result = (double *)(arg1)->GetConformer(arg2);
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SetEnergies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< double > *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(std::vector< double > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null"); return ; }  
  (arg1)->SetEnergies(*arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetEnergies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< double > result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (arg1)->GetEnergies();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result);  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetEnergy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2;  result = (double)(arg1)->GetEnergy(arg2);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1BeginConformer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< double * >::iterator *arg2 = 0 ;
  double *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector< double * >::iterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double * >::iterator & reference is null");
    return 0; }   result = (double *)(arg1)->BeginConformer(*arg2); *(double **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1NextConformer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< double * >::iterator *arg2 = 0 ;
  double *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector< double * >::iterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double * >::iterator & reference is null");
    return 0; }   result = (double *)(arg1)->NextConformer(*arg2); *(double **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1GetConformers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< double * > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (std::vector< double * > *) &(arg1)->GetConformers();
  *(std::vector< double * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1BeginInternalCoord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBInternalCoord * >::iterator *arg2 = 0 ; OpenBabel::OBInternalCoord *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBInternalCoord * >::iterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBInternalCoord * >::iterator & reference is null");
    return 0; }   result = (OpenBabel::OBInternalCoord *)(arg1)->BeginInternalCoord(*arg2);
  *(OpenBabel::OBInternalCoord **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1NextInternalCoord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBInternalCoord * >::iterator *arg2 = 0 ; OpenBabel::OBInternalCoord *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBInternalCoord * >::iterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBInternalCoord * >::iterator & reference is null");
    return 0; }   result = (OpenBabel::OBInternalCoord *)(arg1)->NextInternalCoord(*arg2);
  *(OpenBabel::OBInternalCoord **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_ThrowError_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  OpenBabel::ThrowError(arg1); if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_ThrowError_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::string *arg1 = 0 ; (void)jenv; (void)jcls; arg1 = *(std::string **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return ; }  
  OpenBabel::ThrowError(*arg1); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_CartesianToInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OpenBabel::OBInternalCoord * > *arg1 = 0 ; OpenBabel::OBMol *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(std::vector< OpenBabel::OBInternalCoord * > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBInternalCoord * > & reference is null");
    return ; }   arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  OpenBabel::CartesianToInternal(*arg1,*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_InternalToCartesian(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OpenBabel::OBInternalCoord * > *arg1 = 0 ; OpenBabel::OBMol *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(std::vector< OpenBabel::OBInternalCoord * > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBInternalCoord * > & reference is null");
    return ; }   arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  OpenBabel::InternalToCartesian(*arg1,*arg2); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_NewExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jstring jresult = 0 ; std::string *arg1 = 0 ; char *arg2 = (char *) 0 ; std::string result; (void)jenv; (void)jcls;
  arg1 = *(std::string **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }   arg2 = 0;
  if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  result = OpenBabel::NewExtension(*arg1,arg2); jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_NoId_1get(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  unsigned long result; (void)jenv; (void)jcls; result = (unsigned long)(unsigned long)OpenBabel::NoId;
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_BUFF_1SIZE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(32768); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_get_1rmat(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ; int arg4 ; (void)jenv; (void)jcls;
  arg1 = *(double **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = *(double **)&jarg3;  arg4 = (int)jarg4; 
  OpenBabel::get_rmat(arg1,arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_ob_1make_1rmat(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  double (*arg1)[3] ; double *arg2 ; (void)jenv; (void)jcls; arg1 = *(double (**)[3])&jarg1;  arg2 = *(double **)&jarg2; 
  OpenBabel::ob_make_rmat((double (*)[3])arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_qtrfit(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4) {
  double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; int arg3 ; double (*arg4)[3] ; (void)jenv; (void)jcls;
  arg1 = *(double **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = (int)jarg3;  arg4 = *(double (**)[3])&jarg4; 
  OpenBabel::qtrfit(arg1,arg2,arg3,(double (*)[3])arg4); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_superimpose(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jdouble jresult = 0 ; double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; int arg3 ; double result; (void)jenv;
  (void)jcls; arg1 = *(double **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = (int)jarg3; 
  result = (double)OpenBabel::superimpose(arg1,arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1ring_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRing **)&jarg1;  arg2 = (int)jarg2;  if (arg1) (arg1)->ring_id = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1ring_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRing **)&jarg1;  result = (int) ((arg1)->ring_id); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; std::vector< int > *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBRing **)&jarg1;  arg2 = *(std::vector< int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null"); return ; }  
  if (arg1) (arg1)->_path = *arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; std::vector< int > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRing **)&jarg1;  result = (std::vector< int > *) & ((arg1)->_path);
  *(std::vector< int > **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1_1pathset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; OpenBabel::OBBitVec *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBRing **)&jarg1;  arg2 = *(OpenBabel::OBBitVec **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return ; }  
  if (arg1) (arg1)->_pathset = *arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1_1pathset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; OpenBabel::OBBitVec *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRing **)&jarg1;  result = (OpenBabel::OBBitVec *) & ((arg1)->_pathset);
  *(OpenBabel::OBBitVec **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBRing_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBRing *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBRing *)new OpenBabel::OBRing(); *(OpenBabel::OBRing **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBRing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< int > *arg1 = 0 ; int arg2 ; OpenBabel::OBRing *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< int > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null"); return 0; }  
  arg2 = (int)jarg2;  result = (OpenBabel::OBRing *)new OpenBabel::OBRing(*arg1,arg2);
  *(OpenBabel::OBRing **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBRing_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; std::vector< int > *arg1 = 0 ; OpenBabel::OBBitVec arg2 ; OpenBabel::OBBitVec *argp2 ;
  OpenBabel::OBRing *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(std::vector< int > **)&jarg1;
  if (!arg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0; }   argp2 = *(OpenBabel::OBBitVec **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::OBBitVec"); return 0; }
   arg2 = *argp2;  result = (OpenBabel::OBRing *)new OpenBabel::OBRing(*arg1,arg2); *(OpenBabel::OBRing **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBRing_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRing *arg1 = 0 ; OpenBabel::OBRing *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRing **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBRing const & reference is null"); return 0; }  
  result = (OpenBabel::OBRing *)new OpenBabel::OBRing((OpenBabel::OBRing const &)*arg1);
  *(OpenBabel::OBRing **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1Size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; size_t result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRing **)&jarg1;  result = ((OpenBabel::OBRing const *)arg1)->Size(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1PathSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; size_t result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRing **)&jarg1;  result = ((OpenBabel::OBRing const *)arg1)->PathSize(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRing **)&jarg1;  result = (bool)(arg1)->IsAromatic(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1SetType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRing **)&jarg1;  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ; }  (arg1)->SetType(arg2); if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1SetType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRing **)&jarg1;  arg2 = *(std::string **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return ; }  
  (arg1)->SetType(*arg2); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; char *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRing **)&jarg1;  result = (char *)(arg1)->GetType();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1GetRootAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRing **)&jarg1;  result = (unsigned int)(arg1)->GetRootAtom(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1IsMember_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (bool)(arg1)->IsMember(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1IsMember_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2;  result = (bool)(arg1)->IsMember(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; int arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRing **)&jarg1;  arg2 = (int)jarg2;  result = (bool)(arg1)->IsInRing(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRing **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  (arg1)->SetParent(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; OpenBabel::OBMol *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRing **)&jarg1;  result = (OpenBabel::OBMol *)(arg1)->GetParent();
  *(OpenBabel::OBMol **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRing_1findCenterAndNormal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ; OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 *arg3 = 0 ; OpenBabel::vector3 *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; arg1 = *(OpenBabel::OBRing **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg3 = *(OpenBabel::vector3 **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg4 = *(OpenBabel::vector3 **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  result = (bool)(arg1)->findCenterAndNormal(*arg2,*arg3,*arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBRing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBRing **)&jarg1; 
  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_CompareRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ; OpenBabel::OBRing *arg2 = (OpenBabel::OBRing *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = *(OpenBabel::OBRing **)&jarg2; 
  result = (bool)OpenBabel::CompareRingSize((OpenBabel::OBRing const *)arg1,(OpenBabel::OBRing const *)arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBRingSearch(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBRingSearch *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBRingSearch *)new OpenBabel::OBRingSearch(); *(OpenBabel::OBRingSearch **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBRingSearch(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRingSearch_1SortRings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1;  (arg1)->SortRings(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRingSearch_1RemoveRedundant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1;  arg2 = (int)jarg2;  (arg1)->RemoveRedundant(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRingSearch_1AddRingFromClosure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  arg3 = *(OpenBabel::OBBond **)&jarg3;  (arg1)->AddRingFromClosure(*arg2,arg3); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRingSearch_1SaveUniqueRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ; std::deque< int > *arg2 = 0 ;
  std::deque< int > *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRingSearch **)&jarg1; 
  arg2 = *(std::deque< int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< int > & reference is null"); return 0; }  
  arg3 = *(std::deque< int > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< int > & reference is null"); return 0; }  
  result = (bool)(arg1)->SaveUniqueRing(*arg2,*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRingSearch_1WriteRings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1;  (arg1)->WriteRings(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRingSearch_1BeginRings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBRing * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1;  result = (arg1)->BeginRings();
  *(std::vector< OpenBabel::OBRing * >::iterator **)&jresult = new std::vector< OpenBabel::OBRing * >::iterator((const std::vector< OpenBabel::OBRing * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRingSearch_1EndRings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBRing * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1;  result = (arg1)->EndRings();
  *(std::vector< OpenBabel::OBRing * >::iterator **)&jresult = new std::vector< OpenBabel::OBRing * >::iterator((const std::vector< OpenBabel::OBRing * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBRTree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBRTree *arg2 = (OpenBabel::OBRTree *) 0 ;
  OpenBabel::OBRTree *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBRTree **)&jarg2;  result = (OpenBabel::OBRTree *)new OpenBabel::OBRTree(arg1,arg2);
  *(OpenBabel::OBRTree **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBRTree(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRTree *arg1 = (OpenBabel::OBRTree *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBRTree **)&jarg1; 
  delete arg1; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRTree_1GetAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBRTree *arg1 = (OpenBabel::OBRTree *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRTree **)&jarg1;  result = (int)(arg1)->GetAtomIdx(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRTree_1PathToRoot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBRTree *arg1 = (OpenBabel::OBRTree *) 0 ; std::vector< OpenBabel::OBAtom * > *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRTree **)&jarg1;  arg2 = *(std::vector< OpenBabel::OBAtom * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBAtom * > & reference is null");
    return ; }   (arg1)->PathToRoot(*arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBSmartsPattern_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBSmartsPattern *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBSmartsPattern *)new OpenBabel::OBSmartsPattern(); *(OpenBabel::OBSmartsPattern **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBSmartsPattern(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBSmartsPattern_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = 0 ; OpenBabel::OBSmartsPattern *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBSmartsPattern const & reference is null");
    return 0; }  
  result = (OpenBabel::OBSmartsPattern *)new OpenBabel::OBSmartsPattern((OpenBabel::OBSmartsPattern const &)*arg1);
  *(OpenBabel::OBSmartsPattern **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1Init_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; char *arg2 = (char *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; }  result = (bool)(arg1)->Init((char const *)arg2);
  jresult = (jboolean)result;  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1GetSMARTS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; std::string *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (std::string *) &((OpenBabel::OBSmartsPattern const *)arg1)->GetSMARTS();
  jresult = jenv->NewStringUTF(result->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1Empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (bool)((OpenBabel::OBSmartsPattern const *)arg1)->Empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1IsValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (bool)((OpenBabel::OBSmartsPattern const *)arg1)->IsValid(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1NumAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBSmartsPattern const *)arg1)->NumAtoms(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1NumBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBSmartsPattern const *)arg1)->NumBonds(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; int *arg2 = 0 ; int *arg3 = 0 ; int *arg4 = 0 ;
  int arg5 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;  arg2 = *(int **)&jarg2;
  if (!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null"); return ; }  
  arg3 = *(int **)&jarg3; if (!arg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ; }   arg4 = *(int **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null"); return ; }   arg5 = (int)jarg5; 
  (arg1)->GetBond(*arg2,*arg3,*arg4,arg5); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1GetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; int arg2 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetAtomicNum(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1GetCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; int arg2 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetCharge(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1GetVectorBinding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; int arg2 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)((OpenBabel::OBSmartsPattern const *)arg1)->GetVectorBinding(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1Match_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = jarg3 ? true : false;  result = (bool)(arg1)->Match(*arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1Match_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->Match(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1Match_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  std::vector< std::vector< int > > *arg3 = 0 ; OpenBabel::OBSmartsPattern::MatchType arg4 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = *(std::vector< std::vector< int > > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > > & reference is null");
    return 0; }   arg4 = (OpenBabel::OBSmartsPattern::MatchType)jarg4; 
  result = (bool)((OpenBabel::OBSmartsPattern const *)arg1)->Match(*arg2,*arg3,arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1Match_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  std::vector< std::vector< int > > *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = *(std::vector< std::vector< int > > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > > & reference is null");
    return 0; }   result = (bool)((OpenBabel::OBSmartsPattern const *)arg1)->Match(*arg2,*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1HasMatch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)((OpenBabel::OBSmartsPattern const *)arg1)->HasMatch(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1RestrictedMatch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  std::vector< std::pair< int,int > > *arg3 = 0 ; bool arg4 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = *(std::vector< std::pair< int,int > > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< int,int > > & reference is null");
    return 0; }   arg4 = jarg4 ? true : false;  result = (bool)(arg1)->RestrictedMatch(*arg2,*arg3,arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1RestrictedMatch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  std::vector< std::pair< int,int > > *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = *(std::vector< std::pair< int,int > > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< int,int > > & reference is null");
    return 0; }   result = (bool)(arg1)->RestrictedMatch(*arg2,*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1RestrictedMatch_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBitVec *arg3 = 0 ; bool arg4 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = *(OpenBabel::OBBitVec **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null"); return 0; }  
  arg4 = jarg4 ? true : false;  result = (bool)(arg1)->RestrictedMatch(*arg2,*arg3,arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1RestrictedMatch_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBitVec *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = *(OpenBabel::OBBitVec **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null"); return 0; }  
  result = (bool)(arg1)->RestrictedMatch(*arg2,*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1NumMatches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBSmartsPattern const *)arg1)->NumMatches(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1GetMapList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  std::vector< std::vector< int > > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;  result = (std::vector< std::vector< int > > *) &(arg1)->GetMapList();
  *(std::vector< std::vector< int > > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1BeginMList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  SwigValueWrapper< std::vector< std::vector< int > >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;  result = (arg1)->BeginMList();
  *(std::vector< std::vector< int > >::iterator **)&jresult = new std::vector< std::vector< int > >::iterator((const std::vector< std::vector< int > >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1EndMList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  SwigValueWrapper< std::vector< std::vector< int > >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;  result = (arg1)->EndMList();
  *(std::vector< std::vector< int > >::iterator **)&jresult = new std::vector< std::vector< int > >::iterator((const std::vector< std::vector< int > >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1GetUMapList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  std::vector< std::vector< int > > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;  result = (std::vector< std::vector< int > > *) &(arg1)->GetUMapList();
  *(std::vector< std::vector< int > > **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsPattern_1WriteMapList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ; std::ostream *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;  arg2 = *(std::ostream **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null"); return ; }  
  (arg1)->WriteMapList(*arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBSmartsMatcher(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBSmartsMatcher *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBSmartsMatcher *)new OpenBabel::OBSmartsMatcher(); *(OpenBabel::OBSmartsMatcher **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBSmartsMatcher(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSmartsMatcher *arg1 = (OpenBabel::OBSmartsMatcher *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBSmartsMatcher **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsMatcher_1match_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jboolean jresult = 0 ; OpenBabel::OBSmartsMatcher *arg1 = (OpenBabel::OBSmartsMatcher *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::Pattern *arg3 = (OpenBabel::Pattern *) 0 ; std::vector< std::vector< int > > *arg4 = 0 ; bool arg5 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg4_; arg1 = *(OpenBabel::OBSmartsMatcher **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = *(OpenBabel::Pattern **)&jarg3;  arg4 = *(std::vector< std::vector< int > > **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > > & reference is null");
    return 0; }   arg5 = jarg5 ? true : false;  result = (bool)(arg1)->match(*arg2,(OpenBabel::Pattern const *)arg3,*arg4,arg5);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSmartsMatcher_1match_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ; OpenBabel::OBSmartsMatcher *arg1 = (OpenBabel::OBSmartsMatcher *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::Pattern *arg3 = (OpenBabel::Pattern *) 0 ; std::vector< std::vector< int > > *arg4 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg4_; arg1 = *(OpenBabel::OBSmartsMatcher **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = *(OpenBabel::Pattern **)&jarg3;  arg4 = *(std::vector< std::vector< int > > **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > > & reference is null");
    return 0; }   result = (bool)(arg1)->match(*arg2,(OpenBabel::Pattern const *)arg3,*arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBSSMatch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = 0 ; OpenBabel::Pattern *arg2 = (OpenBabel::Pattern *) 0 ;
  OpenBabel::OBSSMatch *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg2 = *(OpenBabel::Pattern **)&jarg2; 
  result = (OpenBabel::OBSSMatch *)new OpenBabel::OBSSMatch(*arg1,(OpenBabel::Pattern const *)arg2);
  *(OpenBabel::OBSSMatch **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBSSMatch(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSSMatch *arg1 = (OpenBabel::OBSSMatch *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBSSMatch **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSSMatch_1Match_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  OpenBabel::OBSSMatch *arg1 = (OpenBabel::OBSSMatch *) 0 ; std::vector< std::vector< int > > *arg2 = 0 ; int arg3 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBSSMatch **)&jarg1; 
  arg2 = *(std::vector< std::vector< int > > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > > & reference is null");
    return ; }   arg3 = (int)jarg3;  (arg1)->Match(*arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSSMatch_1Match_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBSSMatch *arg1 = (OpenBabel::OBSSMatch *) 0 ; std::vector< std::vector< int > > *arg2 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBSSMatch **)&jarg1; 
  arg2 = *(std::vector< std::vector< int > > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > > & reference is null");
    return ; }   (arg1)->Match(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_SmartsLexReplace(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::string *arg1 = 0 ; std::vector< std::pair< std::string,std::string > > *arg2 = 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::string **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return ; }  
  arg2 = *(std::vector< std::pair< std::string,std::string > > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::string,std::string > > & reference is null");
    return ; }   OpenBabel::SmartsLexReplace(*arg1,*arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_AliasDataType_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; unsigned int result; (void)jenv; (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::AliasDataType; jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1AliasData(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::AliasData *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::AliasData *)new OpenBabel::AliasData();
  *(OpenBabel::AliasData **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_AliasData_1SetAlias_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::AliasData *arg1 = (OpenBabel::AliasData *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::AliasData **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetAlias((std::string const &)*arg2); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_AliasData_1GetAlias_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ; OpenBabel::AliasData *arg1 = (OpenBabel::AliasData *) 0 ; bool arg2 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::AliasData **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = ((OpenBabel::AliasData const *)arg1)->GetAlias(arg2); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_AliasData_1GetAlias_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::AliasData *arg1 = (OpenBabel::AliasData *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::AliasData **)&jarg1;  result = ((OpenBabel::AliasData const *)arg1)->GetAlias();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_AliasData_1GetColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::AliasData *arg1 = (OpenBabel::AliasData *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::AliasData **)&jarg1;  result = ((OpenBabel::AliasData const *)arg1)->GetColor();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_AliasData_1SetColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::AliasData *arg1 = (OpenBabel::AliasData *) 0 ; std::string arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::AliasData **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ; (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  (arg1)->SetColor(arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_AliasData_1IsExpanded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::AliasData *arg1 = (OpenBabel::AliasData *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::AliasData **)&jarg1;  result = (bool)((OpenBabel::AliasData const *)arg1)->IsExpanded();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_AliasData_1RevertToAliasForm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  OpenBabel::AliasData::RevertToAliasForm(*arg1); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_AliasData_1Expand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ; OpenBabel::AliasData *arg1 = (OpenBabel::AliasData *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  unsigned int arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::AliasData **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = (unsigned int)jarg3;  result = (bool)(arg1)->Expand(*arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1AliasData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::AliasData *arg1 = (OpenBabel::AliasData *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::AliasData **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1Default(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBFingerprint **result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBFingerprint **) &OpenBabel::OBFingerprint::Default();
  *(OpenBabel::OBFingerprint ***)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1FindType(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; OpenBabel::OBFingerprint *result = 0 ; (void)jenv; (void)jcls; arg1 = 0;
  if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = (OpenBabel::OBFingerprint *)OpenBabel::OBFingerprint::FindType((char const *)arg1);
  *(OpenBabel::OBFingerprint **)&jresult = result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBFingerprint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBFingerprint **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1SetBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ; std::vector< unsigned int > *arg2 = 0 ; unsigned int arg3 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBFingerprint **)&jarg1; 
  arg2 = *(std::vector< unsigned int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null"); return ; }
    arg3 = (unsigned int)jarg3;  (arg1)->SetBit(*arg2,arg3); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1GetBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ; unsigned int arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBFingerprint **)&jarg1;  arg2 = *(std::vector< unsigned int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > const & reference is null");
    return 0; }   arg3 = (unsigned int)jarg3;  result = (bool)(arg1)->GetBit((std::vector< unsigned int > const &)*arg2,arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1Fold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ; std::vector< unsigned int > *arg2 = 0 ; unsigned int arg3 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBFingerprint **)&jarg1; 
  arg2 = *(std::vector< unsigned int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null"); return ; }
    arg3 = (unsigned int)jarg3;  (arg1)->Fold(*arg2,arg3); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1GetFingerprint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::vector< unsigned int > *arg3 = 0 ; int arg4 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBFingerprint **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2;  arg3 = *(std::vector< unsigned int > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null"); return 0; }
    arg4 = (int)jarg4;  result = (bool)(arg1)->GetFingerprint(arg2,*arg3,arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1GetFingerprint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::vector< unsigned int > *arg3 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBFingerprint **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2;  arg3 = *(std::vector< unsigned int > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null"); return 0; }
    result = (bool)(arg1)->GetFingerprint(arg2,*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1FPT_1UNIQUEBITS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBFingerprint::FptFlag result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBFingerprint::FptFlag)OpenBabel::OBFingerprint::FPT_UNIQUEBITS; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1FPT_1NOINFO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBFingerprint::FptFlag result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBFingerprint::FptFlag)OpenBabel::OBFingerprint::FPT_NOINFO; jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1Flags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFingerprint **)&jarg1;  result = (unsigned int)(arg1)->Flags();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1SetFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFingerprint **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->SetFlags(arg2); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1DescribeBits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jstring jresult = 0 ; OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ; std::vector< unsigned int > arg2 ;
  bool arg3 ; std::vector< unsigned int > const *argp2 ; std::string result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBFingerprint **)&jarg1;  argp2 = *(std::vector< unsigned int > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned int > const");
    return 0; }  arg2 = *argp2;  arg3 = jarg3 ? true : false;  result = (arg1)->DescribeBits(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1DescribeBits_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ; OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ; std::vector< unsigned int > arg2 ;
  std::vector< unsigned int > const *argp2 ; std::string result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBFingerprint **)&jarg1;  argp2 = *(std::vector< unsigned int > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned int > const");
    return 0; }  arg2 = *argp2;  result = (arg1)->DescribeBits(arg2); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1Tanimoto_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; std::vector< unsigned int > *arg1 = 0 ; std::vector< unsigned int > *arg2 = 0 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(std::vector< unsigned int > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > const & reference is null");
    return 0; }   arg2 = *(std::vector< unsigned int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > const & reference is null");
    return 0; }  
  result = (double)OpenBabel::OBFingerprint::Tanimoto((std::vector< unsigned int > const &)*arg1,(std::vector< unsigned int > const &)*arg2);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1Tanimoto_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ; std::vector< unsigned int > *arg1 = 0 ; unsigned int *arg2 = (unsigned int *) 0 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< unsigned int > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > const & reference is null");
    return 0; }   arg2 = *(unsigned int **)&jarg2; 
  result = (double)OpenBabel::OBFingerprint::Tanimoto((std::vector< unsigned int > const &)*arg1,(unsigned int const *)arg2);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1Getbitsperint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; unsigned int result; (void)jenv; (void)jcls;
  result = (unsigned int)OpenBabel::OBFingerprint::Getbitsperint(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1FindFingerprint(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; OpenBabel::OBFingerprint *result = 0 ; (void)jenv; (void)jcls; arg1 = 0;
  if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = (OpenBabel::OBFingerprint *)OpenBabel::OBFingerprint::FindFingerprint((char const *)arg1);
  *(OpenBabel::OBFingerprint **)&jresult = result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_FptIndexHeader_1headerlength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1;  arg2 = (unsigned int)jarg2;  if (arg1) (arg1)->headerlength = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_FptIndexHeader_1headerlength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::FptIndexHeader **)&jarg1;  result = (unsigned int) ((arg1)->headerlength);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_FptIndexHeader_1nEntries_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1;  arg2 = (unsigned int)jarg2;  if (arg1) (arg1)->nEntries = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_FptIndexHeader_1nEntries_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::FptIndexHeader **)&jarg1;  result = (unsigned int) ((arg1)->nEntries);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_FptIndexHeader_1words_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1;  arg2 = (unsigned int)jarg2;  if (arg1) (arg1)->words = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_FptIndexHeader_1words_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::FptIndexHeader **)&jarg1;  result = (unsigned int) ((arg1)->words);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_FptIndexHeader_1fpid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ; char *arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1;  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ; }  { if(arg2) { strncpy((char*)arg1->fpid, (const char *)arg2, 15-1); arg1->fpid[15-1] = 0; }  else {
      arg1->fpid[0] = 0; }  }  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_FptIndexHeader_1fpid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::FptIndexHeader **)&jarg1;  result = (char *)(char *) ((arg1)->fpid);
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_FptIndexHeader_1seek64_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ; char arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1;  arg2 = (char)jarg2;  if (arg1) (arg1)->seek64 = arg2; }
SWIGEXPORT jchar JNICALL Java_org_openbabel_openbabel_1javaJNI_FptIndexHeader_1seek64_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ; OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ; char result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::FptIndexHeader **)&jarg1;  result = (char) ((arg1)->seek64); jresult = (jchar)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_FptIndexHeader_1datafilename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ; char *arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1;  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ; }  { if(arg2) { strncpy((char*)arg1->datafilename, (const char *)arg2, 256-1);
      arg1->datafilename[256-1] = 0; }  else { arg1->datafilename[0] = 0; }  } 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_FptIndexHeader_1datafilename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::FptIndexHeader **)&jarg1;  result = (char *)(char *) ((arg1)->datafilename);
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1FptIndexHeader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::FptIndexHeader *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::FptIndexHeader *)new OpenBabel::FptIndexHeader(); *(OpenBabel::FptIndexHeader **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1FptIndexHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1;  delete arg1; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_FastSearch_1ReadIndexFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ; OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ; std::string arg2 ; std::string result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::FastSearch **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr); jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  result = (arg1)->ReadIndexFile(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_FastSearch_1ReadIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ; OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ; std::istream *arg2 = (std::istream *) 0 ;
  std::string result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  arg2 = *(std::istream **)&jarg2;  result = (arg1)->ReadIndex(arg2); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1FastSearch(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_FastSearch_1Find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ; OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::vector< unsigned long > *arg3 = 0 ; unsigned int arg4 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2;  arg3 = *(std::vector< unsigned long > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned long > & reference is null"); return 0; }
    arg4 = (unsigned int)jarg4;  result = (bool)(arg1)->Find(arg2,*arg3,arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_FastSearch_1FindMatch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ; OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::vector< unsigned long > *arg3 = 0 ; unsigned int arg4 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2;  arg3 = *(std::vector< unsigned long > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned long > & reference is null"); return 0; }
    arg4 = (unsigned int)jarg4;  result = (bool)(arg1)->FindMatch(arg2,*arg3,arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_FastSearch_1FindSimilar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jboolean jresult = 0 ; OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::multimap< double,unsigned long > *arg3 = 0 ; double arg4 ;
  double arg5 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2;  arg3 = *(std::multimap< double,unsigned long > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::multimap< double,unsigned long > & reference is null");
    return 0; }   arg4 = (double)jarg4;  arg5 = (double)jarg5;  result = (bool)(arg1)->FindSimilar(arg2,*arg3,arg4,arg5);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_FastSearch_1FindSimilar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  jboolean jresult = 0 ; OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::multimap< double,unsigned long > *arg3 = 0 ; double arg4 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2;  arg3 = *(std::multimap< double,unsigned long > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::multimap< double,unsigned long > & reference is null");
    return 0; }   arg4 = (double)jarg4;  result = (bool)(arg1)->FindSimilar(arg2,*arg3,arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_FastSearch_1FindSimilar_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  jboolean jresult = 0 ; OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::multimap< double,unsigned long > *arg3 = 0 ; int arg4 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2;  arg3 = *(std::multimap< double,unsigned long > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::multimap< double,unsigned long > & reference is null");
    return 0; }   arg4 = (int)jarg4;  result = (bool)(arg1)->FindSimilar(arg2,*arg3,arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_FastSearch_1FindSimilar_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ; OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::multimap< double,unsigned long > *arg3 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::FastSearch **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::multimap< double,unsigned long > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::multimap< double,unsigned long > & reference is null");
    return 0; }   result = (bool)(arg1)->FindSimilar(arg2,*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_FastSearch_1GetFingerprint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ; OpenBabel::OBFingerprint *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  result = (OpenBabel::OBFingerprint *)((OpenBabel::FastSearch const *)arg1)->GetFingerprint();
  *(OpenBabel::OBFingerprint **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_FastSearch_1GetIndexHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ; OpenBabel::FptIndexHeader *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  result = (OpenBabel::FptIndexHeader *) &((OpenBabel::FastSearch const *)arg1)->GetIndexHeader();
  *(OpenBabel::FptIndexHeader **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1FastSearch(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::FastSearch *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::FastSearch *)new OpenBabel::FastSearch();
  *(OpenBabel::FastSearch **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1FastSearchIndexer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ; std::string *arg1 = 0 ; std::ostream *arg2 = (std::ostream *) 0 ; std::string *arg3 = 0 ; int arg4 ;
  int arg5 ; OpenBabel::FastSearchIndexer *result = 0 ; (void)jenv; (void)jcls; arg1 = *(std::string **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  arg2 = *(std::ostream **)&jarg2;  arg3 = *(std::string **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  arg4 = (int)jarg4;  arg5 = (int)jarg5; 
  result = (OpenBabel::FastSearchIndexer *)new OpenBabel::FastSearchIndexer(*arg1,arg2,*arg3,arg4,arg5);
  *(OpenBabel::FastSearchIndexer **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1FastSearchIndexer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ; std::string *arg1 = 0 ; std::ostream *arg2 = (std::ostream *) 0 ; std::string *arg3 = 0 ; int arg4 ;
  OpenBabel::FastSearchIndexer *result = 0 ; (void)jenv; (void)jcls; arg1 = *(std::string **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  arg2 = *(std::ostream **)&jarg2;  arg3 = *(std::string **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  arg4 = (int)jarg4;  result = (OpenBabel::FastSearchIndexer *)new OpenBabel::FastSearchIndexer(*arg1,arg2,*arg3,arg4);
  *(OpenBabel::FastSearchIndexer **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1FastSearchIndexer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ; std::string *arg1 = 0 ; std::ostream *arg2 = (std::ostream *) 0 ; std::string *arg3 = 0 ;
  OpenBabel::FastSearchIndexer *result = 0 ; (void)jenv; (void)jcls; arg1 = *(std::string **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  arg2 = *(std::ostream **)&jarg2;  arg3 = *(std::string **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  result = (OpenBabel::FastSearchIndexer *)new OpenBabel::FastSearchIndexer(*arg1,arg2,*arg3);
  *(OpenBabel::FastSearchIndexer **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1FastSearchIndexer_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ; OpenBabel::FptIndex *arg1 = (OpenBabel::FptIndex *) 0 ; std::ostream *arg2 = (std::ostream *) 0 ;
  int arg3 ; OpenBabel::FastSearchIndexer *result = 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::FptIndex **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;  arg3 = (int)jarg3; 
  result = (OpenBabel::FastSearchIndexer *)new OpenBabel::FastSearchIndexer(arg1,arg2,arg3);
  *(OpenBabel::FastSearchIndexer **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1FastSearchIndexer_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::FptIndex *arg1 = (OpenBabel::FptIndex *) 0 ; std::ostream *arg2 = (std::ostream *) 0 ;
  OpenBabel::FastSearchIndexer *result = 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::FptIndex **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;  result = (OpenBabel::FastSearchIndexer *)new OpenBabel::FastSearchIndexer(arg1,arg2);
  *(OpenBabel::FastSearchIndexer **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1FastSearchIndexer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::FastSearchIndexer *arg1 = (OpenBabel::FastSearchIndexer *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::FastSearchIndexer **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_FastSearchIndexer_1Add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ; OpenBabel::FastSearchIndexer *arg1 = (OpenBabel::FastSearchIndexer *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::streampos arg3 ; std::streampos *argp3 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::FastSearchIndexer **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2;  argp3 = *(std::streampos **)&jarg3;  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::streampos"); return 0; } 
  arg3 = *argp3;  result = (bool)(arg1)->Add(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1Default(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBDescriptor **result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBDescriptor **) &OpenBabel::OBDescriptor::Default(); *(OpenBabel::OBDescriptor ***)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBDescriptor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; bool arg2 ; OpenBabel::OBDescriptor *result = 0 ; (void)jenv; (void)jcls;
  arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; }  arg2 = jarg2 ? true : false; 
  result = (OpenBabel::OBDescriptor *)new OpenBabel::OBDescriptor((char const *)arg1,arg2);
  *(OpenBabel::OBDescriptor **)&jresult = result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBDescriptor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; OpenBabel::OBDescriptor *result = 0 ; (void)jenv; (void)jcls; arg1 = 0;
  if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = (OpenBabel::OBDescriptor *)new OpenBabel::OBDescriptor((char const *)arg1);
  *(OpenBabel::OBDescriptor **)&jresult = result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1FindType(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; OpenBabel::OBDescriptor *result = 0 ; (void)jenv; (void)jcls; arg1 = 0;
  if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = (OpenBabel::OBDescriptor *)OpenBabel::OBDescriptor::FindType((char const *)arg1);
  *(OpenBabel::OBDescriptor **)&jresult = result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1Predict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ; OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::string *arg3 = (std::string *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBDescriptor **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::string **)&jarg3;  result = (double)(arg1)->Predict(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1Predict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBDescriptor **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2;  result = (double)(arg1)->Predict(arg2);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1PredictAndSave_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ; OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::string *arg3 = (std::string *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBDescriptor **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::string **)&jarg3;  result = (double)(arg1)->PredictAndSave(arg2,arg3); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1PredictAndSave_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBDescriptor **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (double)(arg1)->PredictAndSave(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1GetStringValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jdouble jresult = 0 ; OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::string *arg3 = 0 ; std::string *arg4 = (std::string *) 0 ;
  double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBDescriptor **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2;  arg3 = *(std::string **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  arg4 = *(std::string **)&jarg4;  result = (double)(arg1)->GetStringValue(arg2,*arg3,arg4); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1GetStringValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ; OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::string *arg3 = 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBDescriptor **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::string **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  result = (double)(arg1)->GetStringValue(arg2,*arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1Compare_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4, jlong jarg5) {
  jboolean jresult = 0 ; OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::istream *arg3 = 0 ; bool arg4 ;
  std::string *arg5 = (std::string *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBDescriptor **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2;  arg3 = *(std::istream **)&jarg3;
  if (!arg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null"); return 0; }  
  arg4 = jarg4 ? true : false;  arg5 = *(std::string **)&jarg5;  result = (bool)(arg1)->Compare(arg2,*arg3,arg4,arg5);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1Compare_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ; std::istream *arg3 = 0 ; bool arg4 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBDescriptor **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::istream **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null"); return 0; }  
  arg4 = jarg4 ? true : false;  result = (bool)(arg1)->Compare(arg2,*arg3,arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1Display_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ; std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ; char *arg4 = (char *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBDescriptor **)&jarg1;  arg2 = *(std::string **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }   arg3 = 0;
  if (jarg3) { arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; }  arg4 = 0; if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0); if (!arg4) return 0; } 
  result = (bool)(arg1)->Display(*arg2,(char const *)arg3,(char const *)arg4); jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1Display_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ; std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBDescriptor **)&jarg1; 
  arg2 = *(std::string **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }   arg3 = 0;
  if (jarg3) { arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; } 
  result = (bool)(arg1)->Display(*arg2,(char const *)arg3); jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1Order_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ; double arg2 ; double arg3 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBDescriptor **)&jarg1;  arg2 = (double)jarg2; 
  arg3 = (double)jarg3;  result = (bool)(arg1)->Order(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1Order_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ; std::string arg2 ; std::string arg3 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBDescriptor **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr); jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr); jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  result = (bool)(arg1)->Order(arg2,arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1FilterCompare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; std::istream *arg2 = 0 ; bool arg3 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBase **)&jarg1;  arg2 = *(std::istream **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null"); return 0; }  
  arg3 = jarg3 ? true : false;  result = (bool)OpenBabel::OBDescriptor::FilterCompare(arg1,*arg2,arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1AddProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  OpenBabel::OBDescriptor::AddProperties(arg1,(std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1DeleteProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  OpenBabel::OBDescriptor::DeleteProperties(arg1,(std::string const &)*arg2); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1GetValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; std::string *arg2 = 0 ; std::string result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBase **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = OpenBabel::OBDescriptor::GetValues(arg1,(std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1GetIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::istream *arg1 = 0 ; SwigValueWrapper< std::pair< std::string,std::string > > result; (void)jenv;
  (void)jcls; arg1 = *(std::istream **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null"); return 0; }  
  result = OpenBabel::OBDescriptor::GetIdentifier(*arg1);
  *(std::pair< std::string,std::string > **)&jresult = new std::pair< std::string,std::string >((const std::pair< std::string,std::string > &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBDescriptor *arg1 = (OpenBabel::OBDescriptor *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBDescriptor **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerFilter_1IsGood(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBConformerFilter *arg1 = (OpenBabel::OBConformerFilter *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::RotorKey *arg3 = 0 ; double *arg4 = (double *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; arg1 = *(OpenBabel::OBConformerFilter **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol const & reference is null"); return 0; }  
  arg3 = *(OpenBabel::RotorKey **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::RotorKey const & reference is null"); return 0; }  
  arg4 = *(double **)&jarg4; 
  result = (bool)(arg1)->IsGood((OpenBabel::OBMol const &)*arg2,(OpenBabel::RotorKey const &)*arg3,arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBConformerFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBConformerFilter *arg1 = (OpenBabel::OBConformerFilter *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBConformerFilter **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBConformerFilters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::vector< OpenBabel::OBConformerFilter * > *arg1 = 0 ; OpenBabel::OBConformerFilters *result = 0 ;
  (void)jenv; (void)jcls; arg1 = *(std::vector< OpenBabel::OBConformerFilter * > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBConformerFilter * > const & reference is null");
    return 0; }  
  result = (OpenBabel::OBConformerFilters *)new OpenBabel::OBConformerFilters((std::vector< OpenBabel::OBConformerFilter * > const &)*arg1);
  *(OpenBabel::OBConformerFilters **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBConformerFilters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBConformerFilters *arg1 = (OpenBabel::OBConformerFilters *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBConformerFilters **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBStericConformerFilter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBStericConformerFilter *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStericConformerFilter *)new OpenBabel::OBStericConformerFilter();
  *(OpenBabel::OBStericConformerFilter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBStericConformerFilter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jboolean jarg3) {
  jlong jresult = 0 ; double arg1 ; double arg2 ; bool arg3 ; OpenBabel::OBStericConformerFilter *result = 0 ; (void)jenv;
  (void)jcls; arg1 = (double)jarg1;  arg2 = (double)jarg2;  arg3 = jarg3 ? true : false; 
  result = (OpenBabel::OBStericConformerFilter *)new OpenBabel::OBStericConformerFilter(arg1,arg2,arg3);
  *(OpenBabel::OBStericConformerFilter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBStericConformerFilter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ; double arg1 ; double arg2 ; OpenBabel::OBStericConformerFilter *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (double)jarg1;  arg2 = (double)jarg2; 
  result = (OpenBabel::OBStericConformerFilter *)new OpenBabel::OBStericConformerFilter(arg1,arg2);
  *(OpenBabel::OBStericConformerFilter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBStericConformerFilter_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ; double arg1 ; OpenBabel::OBStericConformerFilter *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (double)jarg1;  result = (OpenBabel::OBStericConformerFilter *)new OpenBabel::OBStericConformerFilter(arg1);
  *(OpenBabel::OBStericConformerFilter **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBStericConformerFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBStericConformerFilter *arg1 = (OpenBabel::OBStericConformerFilter *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBStericConformerFilter **)&jarg1;  delete arg1; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerScore_1GetPreferred(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBConformerScore *arg1 = (OpenBabel::OBConformerScore *) 0 ;
  OpenBabel::OBConformerScore::Preferred result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerScore **)&jarg1;  result = (OpenBabel::OBConformerScore::Preferred)(arg1)->GetPreferred();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerScore_1GetConvergence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBConformerScore *arg1 = (OpenBabel::OBConformerScore *) 0 ;
  OpenBabel::OBConformerScore::Convergence result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerScore **)&jarg1;  result = (OpenBabel::OBConformerScore::Convergence)(arg1)->GetConvergence();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerScore_1Score(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jdouble jresult = 0 ; OpenBabel::OBConformerScore *arg1 = (OpenBabel::OBConformerScore *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  unsigned int arg3 ; OpenBabel::RotorKeys *arg4 = 0 ; std::vector< double * > *arg5 = 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg4_; arg1 = *(OpenBabel::OBConformerScore **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = (unsigned int)jarg3;  arg4 = *(OpenBabel::RotorKeys **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::RotorKeys const & reference is null"); return 0; }
    arg5 = *(std::vector< double * > **)&jarg5; if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double * > const & reference is null");
    return 0; }  
  result = (double)(arg1)->Score(*arg2,arg3,(OpenBabel::RotorKeys const &)*arg4,(std::vector< double * > const &)*arg5);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBConformerScore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBConformerScore *arg1 = (OpenBabel::OBConformerScore *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBConformerScore **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBRMSDConformerScore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBRMSDConformerScore *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBRMSDConformerScore *)new OpenBabel::OBRMSDConformerScore();
  *(OpenBabel::OBRMSDConformerScore **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBRMSDConformerScore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRMSDConformerScore *arg1 = (OpenBabel::OBRMSDConformerScore *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBRMSDConformerScore **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBEnergyConformerScore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBEnergyConformerScore *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBEnergyConformerScore *)new OpenBabel::OBEnergyConformerScore();
  *(OpenBabel::OBEnergyConformerScore **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBEnergyConformerScore_1GetNbEnergyCompute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBEnergyConformerScore *arg1 = (OpenBabel::OBEnergyConformerScore *) 0 ; unsigned long result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBEnergyConformerScore **)&jarg1; 
  result = (unsigned long)(arg1)->GetNbEnergyCompute(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBEnergyConformerScore_1GetNbEnergyRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBEnergyConformerScore *arg1 = (OpenBabel::OBEnergyConformerScore *) 0 ; unsigned long result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBEnergyConformerScore **)&jarg1; 
  result = (unsigned long)(arg1)->GetNbEnergyRequest(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBEnergyConformerScore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBEnergyConformerScore *arg1 = (OpenBabel::OBEnergyConformerScore *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBEnergyConformerScore **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMinimizingEnergyConformerScore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBMinimizingEnergyConformerScore *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBMinimizingEnergyConformerScore *)new OpenBabel::OBMinimizingEnergyConformerScore();
  *(OpenBabel::OBMinimizingEnergyConformerScore **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMinimizingEnergyConformerScore_1GetNbEnergyCompute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMinimizingEnergyConformerScore *arg1 = (OpenBabel::OBMinimizingEnergyConformerScore *) 0 ;
  unsigned long result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMinimizingEnergyConformerScore **)&jarg1; 
  result = (unsigned long)(arg1)->GetNbEnergyCompute(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMinimizingEnergyConformerScore_1GetNbEnergyRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMinimizingEnergyConformerScore *arg1 = (OpenBabel::OBMinimizingEnergyConformerScore *) 0 ;
  unsigned long result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMinimizingEnergyConformerScore **)&jarg1; 
  result = (unsigned long)(arg1)->GetNbEnergyRequest(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBMinimizingEnergyConformerScore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMinimizingEnergyConformerScore *arg1 = (OpenBabel::OBMinimizingEnergyConformerScore *) 0 ; (void)jenv;
  (void)jcls; arg1 = *(OpenBabel::OBMinimizingEnergyConformerScore **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMinimizingRMSDConformerScore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBMinimizingRMSDConformerScore *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBMinimizingRMSDConformerScore *)new OpenBabel::OBMinimizingRMSDConformerScore();
  *(OpenBabel::OBMinimizingRMSDConformerScore **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBMinimizingRMSDConformerScore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMinimizingRMSDConformerScore *arg1 = (OpenBabel::OBMinimizingRMSDConformerScore *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBMinimizingRMSDConformerScore **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBConformerSearch(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBConformerSearch *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBConformerSearch *)new OpenBabel::OBConformerSearch();
  *(OpenBabel::OBConformerSearch **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBConformerSearch(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1Setup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jboolean jresult = 0 ; OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  int arg3 ; int arg4 ; int arg5 ; int arg6 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol const & reference is null"); return 0; }  
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  arg5 = (int)jarg5;  arg6 = (int)jarg6; 
  result = (bool)(arg1)->Setup((OpenBabel::OBMol const &)*arg2,arg3,arg4,arg5,arg6); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1Setup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5) {
  jboolean jresult = 0 ; OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  int arg3 ; int arg4 ; int arg5 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol const & reference is null"); return 0; }  
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  arg5 = (int)jarg5; 
  result = (bool)(arg1)->Setup((OpenBabel::OBMol const &)*arg2,arg3,arg4,arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1Setup_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  int arg3 ; int arg4 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol const & reference is null"); return 0; }  
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  result = (bool)(arg1)->Setup((OpenBabel::OBMol const &)*arg2,arg3,arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1Setup_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  int arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBConformerSearch **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol const & reference is null"); return 0; }  
  arg3 = (int)jarg3;  result = (bool)(arg1)->Setup((OpenBabel::OBMol const &)*arg2,arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1Setup_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBConformerSearch **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol const & reference is null"); return 0; }  
  result = (bool)(arg1)->Setup((OpenBabel::OBMol const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetNumConformers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetNumConformers(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetNumChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetNumChildren(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetMutability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetMutability(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetConvergence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetConvergence(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetFixedBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; OpenBabel::OBBitVec *arg2 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBConformerSearch **)&jarg1; 
  arg2 = *(OpenBabel::OBBitVec **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return ; }  
  (arg1)->SetFixedBonds((OpenBabel::OBBitVec const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ;
  OpenBabel::OBConformerFilter *arg2 = (OpenBabel::OBConformerFilter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = *(OpenBabel::OBConformerFilter **)&jarg2;  (arg1)->SetFilter(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ;
  OpenBabel::OBConformerScore *arg2 = (OpenBabel::OBConformerScore *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = *(OpenBabel::OBConformerScore **)&jarg2;  (arg1)->SetScore(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1PrintRotors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->PrintRotors(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1Search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  (arg1)->Search(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1GetRotorKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ;
  OpenBabel::RotorKeys *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConformerSearch **)&jarg1; 
  result = (OpenBabel::RotorKeys *) &((OpenBabel::OBConformerSearch const *)arg1)->GetRotorKeys();
  *(OpenBabel::RotorKeys **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1GetConformers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; OpenBabel::OBMol *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if (!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }
    (arg1)->GetConformers(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetLogStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; std::ostream *arg2 = (std::ostream *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = *(std::ostream **)&jarg2; 
  (arg1)->SetLogStream(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetSharing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetSharing(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetSharing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  (arg1)->SetSharing(); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1GetNbNiches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  result = (int)(arg1)->GetNbNiches();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetNbNiches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetNbNiches(arg2); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1GetNicheRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  result = (double)(arg1)->GetNicheRadius();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetNicheRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetNicheRadius(arg2); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1GetAlphaSharing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  result = (double)(arg1)->GetAlphaSharing();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetAlphaSharing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetAlphaSharing(arg2); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1GetSigmaSharing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  result = (double)(arg1)->GetSigmaSharing();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetSigmaSharing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetSigmaSharing(arg2); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1GetCrossoverProbability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConformerSearch **)&jarg1; 
  result = (double)(arg1)->GetCrossoverProbability(); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetCrossoverProbability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetCrossoverProbability(arg2); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1GetNicheMating(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  result = (double)(arg1)->GetNicheMating();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetNicheMating(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetNicheMating(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetLocalOptRate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetLocalOptRate(arg2); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerSearch_1SetLocalOptRate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBConformerSearch *arg1 = (OpenBabel::OBConformerSearch *) 0 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBConformerSearch **)&jarg1;  result = (int)(arg1)->SetLocalOptRate();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAlign_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2) {
  jlong jresult = 0 ; bool arg1 ; bool arg2 ; OpenBabel::OBAlign *result = 0 ; (void)jenv; (void)jcls;
  arg1 = jarg1 ? true : false;  arg2 = jarg2 ? true : false;  result = (OpenBabel::OBAlign *)new OpenBabel::OBAlign(arg1,arg2);
  *(OpenBabel::OBAlign **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAlign_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ; bool arg1 ; OpenBabel::OBAlign *result = 0 ; (void)jenv; (void)jcls; arg1 = jarg1 ? true : false; 
  result = (OpenBabel::OBAlign *)new OpenBabel::OBAlign(arg1); *(OpenBabel::OBAlign **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAlign_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBAlign *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBAlign *)new OpenBabel::OBAlign(); *(OpenBabel::OBAlign **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAlign_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = 0 ; OpenBabel::OBMol *arg2 = 0 ; bool arg3 ; bool arg4 ;
  OpenBabel::OBAlign *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1;
  if (!arg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol const & reference is null");
    return 0; }   arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol const & reference is null"); return 0; }  
  arg3 = jarg3 ? true : false;  arg4 = jarg4 ? true : false; 
  result = (OpenBabel::OBAlign *)new OpenBabel::OBAlign((OpenBabel::OBMol const &)*arg1,(OpenBabel::OBMol const &)*arg2,arg3,arg4);
  *(OpenBabel::OBAlign **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAlign_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = 0 ; OpenBabel::OBMol *arg2 = 0 ; bool arg3 ; OpenBabel::OBAlign *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol const & reference is null"); return 0; }  
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol const & reference is null"); return 0; }  
  arg3 = jarg3 ? true : false; 
  result = (OpenBabel::OBAlign *)new OpenBabel::OBAlign((OpenBabel::OBMol const &)*arg1,(OpenBabel::OBMol const &)*arg2,arg3);
  *(OpenBabel::OBAlign **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAlign_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = 0 ; OpenBabel::OBMol *arg2 = 0 ; OpenBabel::OBAlign *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol const & reference is null"); return 0; }  
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol const & reference is null"); return 0; }  
  result = (OpenBabel::OBAlign *)new OpenBabel::OBAlign((OpenBabel::OBMol const &)*arg1,(OpenBabel::OBMol const &)*arg2);
  *(OpenBabel::OBAlign **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAlign_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; std::vector< OpenBabel::vector3 > *arg1 = 0 ; std::vector< OpenBabel::vector3 > *arg2 = 0 ;
  OpenBabel::OBAlign *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(std::vector< OpenBabel::vector3 > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::vector3 > const & reference is null");
    return 0; }   arg2 = *(std::vector< OpenBabel::vector3 > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::vector3 > const & reference is null");
    return 0; }  
  result = (OpenBabel::OBAlign *)new OpenBabel::OBAlign((std::vector< OpenBabel::vector3 > const &)*arg1,(std::vector< OpenBabel::vector3 > const &)*arg2);
  *(OpenBabel::OBAlign **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAlign_1SetRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAlign *arg1 = (OpenBabel::OBAlign *) 0 ; std::vector< OpenBabel::vector3 > *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAlign **)&jarg1;  arg2 = *(std::vector< OpenBabel::vector3 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::vector3 > const & reference is null");
    return ; }   (arg1)->SetRef((std::vector< OpenBabel::vector3 > const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAlign_1SetTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAlign *arg1 = (OpenBabel::OBAlign *) 0 ; std::vector< OpenBabel::vector3 > *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAlign **)&jarg1;  arg2 = *(std::vector< OpenBabel::vector3 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::vector3 > const & reference is null");
    return ; }   (arg1)->SetTarget((std::vector< OpenBabel::vector3 > const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAlign_1SetRefMol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAlign *arg1 = (OpenBabel::OBAlign *) 0 ; OpenBabel::OBMol *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBAlign **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol const & reference is null"); return ; }  
  (arg1)->SetRefMol((OpenBabel::OBMol const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAlign_1SetTargetMol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAlign *arg1 = (OpenBabel::OBAlign *) 0 ; OpenBabel::OBMol *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBAlign **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol const & reference is null"); return ; }  
  (arg1)->SetTargetMol((OpenBabel::OBMol const &)*arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAlign_1Align(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAlign *arg1 = (OpenBabel::OBAlign *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAlign **)&jarg1;  result = (bool)(arg1)->Align(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAlign_1Kabsch_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBAlign::AlignMethod result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBAlign::AlignMethod)OpenBabel::OBAlign::Kabsch; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAlign_1QCP_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  OpenBabel::OBAlign::AlignMethod result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBAlign::AlignMethod)OpenBabel::OBAlign::QCP; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAlign_1SetMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAlign *arg1 = (OpenBabel::OBAlign *) 0 ; enum OpenBabel::OBAlign::AlignMethod arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAlign **)&jarg1;  arg2 = (enum OpenBabel::OBAlign::AlignMethod)jarg2; 
  (arg1)->SetMethod(arg2); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAlign_1GetRMSD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAlign *arg1 = (OpenBabel::OBAlign *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAlign **)&jarg1;  result = (double)(arg1)->GetRMSD(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAlign_1GetRotMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAlign *arg1 = (OpenBabel::OBAlign *) 0 ; OpenBabel::matrix3x3 result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAlign **)&jarg1;  result = (arg1)->GetRotMatrix();
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((const OpenBabel::matrix3x3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAlign_1GetAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAlign *arg1 = (OpenBabel::OBAlign *) 0 ; std::vector< OpenBabel::vector3 > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAlign **)&jarg1;  result = (arg1)->GetAlignment();
  *(std::vector< OpenBabel::vector3 > **)&jresult = new std::vector< OpenBabel::vector3 >((const std::vector< OpenBabel::vector3 > &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAlign_1UpdateCoords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBAlign *arg1 = (OpenBabel::OBAlign *) 0 ; OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAlign **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;  result = (bool)(arg1)->UpdateCoords(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBAlign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAlign *arg1 = (OpenBabel::OBAlign *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBAlign **)&jarg1; 
  delete arg1; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1LOGLVL_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)(0); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1LOGLVL_1LOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)(1); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1LOGLVL_1MEDIUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)(2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1LOGLVL_1HIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)(3); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1ENERGY_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 0)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1EBOND_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 1)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1EANGLE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 2)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1ESTRBND_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 3)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1ETORSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 4)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1EOOP_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 5)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1EVDW_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)((1 << 6)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1EELECTROSTATIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 7)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1CONST_1IGNORE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 0)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1CONST_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 1)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1CONST_1ATOM_1X_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 2)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1CONST_1ATOM_1Y_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 3)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1CONST_1ATOM_1Z_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 4)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1CONST_1DISTANCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 5)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1CONST_1ANGLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 6)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1CONST_1TORSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 7)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1CONST_1CHIRAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 8)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1NUMERICAL_1GRADIENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 0)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFF_1ANALYTICAL_1GRADIENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)((1 << 1)); jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_KCAL_1TO_1KJ_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ; double result; (void)jenv; (void)jcls; result = (double)(double)OpenBabel::KCAL_TO_KJ;
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_GAS_1CONSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ; double result; (void)jenv; (void)jcls; result = (double)(double)OpenBabel::GAS_CONSTANT;
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_LineSearchType_1Simple_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)OpenBabel::LineSearchType::Simple;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_LineSearchType_1Newton2Num_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)OpenBabel::LineSearchType::Newton2Num;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1LineSearchType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::LineSearchType *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::LineSearchType *)new OpenBabel::LineSearchType(); *(OpenBabel::LineSearchType **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1LineSearchType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::LineSearchType *arg1 = (OpenBabel::LineSearchType *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::LineSearchType **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  arg2 = (int)jarg2;  if (arg1) (arg1)->a = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  result = (int) ((arg1)->a); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  arg2 = (int)jarg2;  if (arg1) (arg1)->b = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  result = (int) ((arg1)->b); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  arg2 = (int)jarg2;  if (arg1) (arg1)->c = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  result = (int) ((arg1)->c); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  arg2 = (int)jarg2;  if (arg1) (arg1)->d = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  result = (int) ((arg1)->d); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_a = *arg2; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; std::string *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  result = (std::string *) & ((arg1)->_a);
  jresult = jenv->NewStringUTF(result->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_b = *arg2; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; std::string *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  result = (std::string *) & ((arg1)->_b);
  jresult = jenv->NewStringUTF(result->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_c = *arg2; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; std::string *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  result = (std::string *) & ((arg1)->_c);
  jresult = jenv->NewStringUTF(result->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_d = *arg2; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; std::string *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  result = (std::string *) & ((arg1)->_d);
  jresult = jenv->NewStringUTF(result->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1_1ipar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; std::vector< int > *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  arg2 = *(std::vector< int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null"); return ; }  
  if (arg1) (arg1)->_ipar = *arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1_1ipar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; std::vector< int > *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  result = (std::vector< int > *) & ((arg1)->_ipar); *(std::vector< int > **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1_1dpar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; std::vector< double > *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return ; }   if (arg1) (arg1)->_dpar = *arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1_1dpar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; std::vector< double > *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  result = (std::vector< double > *) & ((arg1)->_dpar); *(std::vector< double > **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFParameter_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBFFParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBFFParameter *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBFFParameter *)new OpenBabel::OBFFParameter(); *(OpenBabel::OBFFParameter **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBFFParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1energy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1;  arg2 = (double)jarg2;  if (arg1) (arg1)->energy = arg2; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1energy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1;  result = (double) ((arg1)->energy);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  if (arg1) (arg1)->a = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1; 
  result = (OpenBabel::OBAtom *) ((arg1)->a); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  if (arg1) (arg1)->b = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1; 
  result = (OpenBabel::OBAtom *) ((arg1)->b); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1idx_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1;  arg2 = (int)jarg2;  if (arg1) (arg1)->idx_a = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1idx_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1;  result = (int) ((arg1)->idx_a); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1idx_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1;  arg2 = (int)jarg2;  if (arg1) (arg1)->idx_b = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1idx_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1;  result = (int) ((arg1)->idx_b); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1pos_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; double *arg2 = (double *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1;  arg2 = *(double **)&jarg2;  if (arg1) (arg1)->pos_a = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1pos_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; double *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1;  result = (double *) ((arg1)->pos_a);
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1pos_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; double *arg2 = (double *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1;  arg2 = *(double **)&jarg2;  if (arg1) (arg1)->pos_b = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1pos_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; double *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1;  result = (double *) ((arg1)->pos_b);
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1force_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; double *arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1;  arg2 = *(double **)&jarg2;  { size_t ii;
    double *b = (double *) arg1->force_a; for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((double *) arg2 + ii); }  }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1force_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; double *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1;  result = (double *)(double *) ((arg1)->force_a);
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1force_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; double *arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1;  arg2 = *(double **)&jarg2;  { size_t ii;
    double *b = (double *) arg1->force_b; for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((double *) arg2 + ii); }  }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1force_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; double *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1;  result = (double *)(double *) ((arg1)->force_b);
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBFFCalculation2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation2_1SetupPointers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBFFCalculation2 *arg1 = (OpenBabel::OBFFCalculation2 *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFCalculation2 **)&jarg1;  (arg1)->SetupPointers(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBFFCalculation2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBFFCalculation2 *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBFFCalculation2 *)new OpenBabel::OBFFCalculation2();
  *(OpenBabel::OBFFCalculation2 **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation3_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBFFCalculation3 **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  if (arg1) (arg1)->c = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation3_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation3 **)&jarg1; 
  result = (OpenBabel::OBAtom *) ((arg1)->c); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation3_1idx_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFCalculation3 **)&jarg1;  arg2 = (int)jarg2;  if (arg1) (arg1)->idx_c = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation3_1idx_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation3 **)&jarg1;  result = (int) ((arg1)->idx_c); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation3_1pos_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ; double *arg2 = (double *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation3 **)&jarg1;  arg2 = *(double **)&jarg2;  if (arg1) (arg1)->pos_c = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation3_1pos_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ; double *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation3 **)&jarg1;  result = (double *) ((arg1)->pos_c);
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation3_1force_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ; double *arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFCalculation3 **)&jarg1;  arg2 = *(double **)&jarg2;  { size_t ii;
    double *b = (double *) arg1->force_c; for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((double *) arg2 + ii); }  }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation3_1force_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ; double *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation3 **)&jarg1;  result = (double *)(double *) ((arg1)->force_c);
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBFFCalculation3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBFFCalculation3 *arg1 = (OpenBabel::OBFFCalculation3 *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBFFCalculation3 **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBFFCalculation3(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBFFCalculation3 *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBFFCalculation3 *)new OpenBabel::OBFFCalculation3();
  *(OpenBabel::OBFFCalculation3 **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation4_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBFFCalculation4 **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  if (arg1) (arg1)->d = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation4_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation4 **)&jarg1; 
  result = (OpenBabel::OBAtom *) ((arg1)->d); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation4_1idx_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFCalculation4 **)&jarg1;  arg2 = (int)jarg2;  if (arg1) (arg1)->idx_d = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation4_1idx_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation4 **)&jarg1;  result = (int) ((arg1)->idx_d); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation4_1pos_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ; double *arg2 = (double *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation4 **)&jarg1;  arg2 = *(double **)&jarg2;  if (arg1) (arg1)->pos_d = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation4_1pos_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ; double *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation4 **)&jarg1;  result = (double *) ((arg1)->pos_d);
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation4_1force_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ; double *arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFCalculation4 **)&jarg1;  arg2 = *(double **)&jarg2;  { size_t ii;
    double *b = (double *) arg1->force_d; for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((double *) arg2 + ii); }  }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation4_1force_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ; double *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFCalculation4 **)&jarg1;  result = (double *)(double *) ((arg1)->force_d);
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBFFCalculation4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBFFCalculation4 *arg1 = (OpenBabel::OBFFCalculation4 *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBFFCalculation4 **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBFFCalculation4(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBFFCalculation4 *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBFFCalculation4 *)new OpenBabel::OBFFCalculation4();
  *(OpenBabel::OBFFCalculation4 **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1factor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  arg2 = (double)jarg2;  if (arg1) (arg1)->factor = arg2; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1factor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  result = (double) ((arg1)->factor);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1constraint_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  arg2 = (double)jarg2;  if (arg1) (arg1)->constraint_value = arg2; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1constraint_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  result = (double) ((arg1)->constraint_value);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1rab0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  arg2 = (double)jarg2;  if (arg1) (arg1)->rab0 = arg2; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1rab0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  result = (double) ((arg1)->rab0);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1rbc0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  arg2 = (double)jarg2;  if (arg1) (arg1)->rbc0 = arg2; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1rbc0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  result = (double) ((arg1)->rbc0);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  arg2 = (int)jarg2;  if (arg1) (arg1)->type = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  result = (int) ((arg1)->type); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1ia_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  arg2 = (int)jarg2;  if (arg1) (arg1)->ia = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1ia_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  result = (int) ((arg1)->ia); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1ib_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  arg2 = (int)jarg2;  if (arg1) (arg1)->ib = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1ib_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  result = (int) ((arg1)->ib); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1ic_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  arg2 = (int)jarg2;  if (arg1) (arg1)->ic = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1ic_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  result = (int) ((arg1)->ic); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  arg2 = (int)jarg2;  if (arg1) (arg1)->id = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  result = (int) ((arg1)->id); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  if (arg1) (arg1)->a = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1; 
  result = (OpenBabel::OBAtom *) ((arg1)->a); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  if (arg1) (arg1)->b = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1; 
  result = (OpenBabel::OBAtom *) ((arg1)->b); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  if (arg1) (arg1)->c = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1; 
  result = (OpenBabel::OBAtom *) ((arg1)->c); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  if (arg1) (arg1)->d = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1; 
  result = (OpenBabel::OBAtom *) ((arg1)->d); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1grada_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; OpenBabel::vector3 *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return ; }  
  if (arg1) (arg1)->grada = *arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1grada_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; OpenBabel::vector3 *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1; 
  result = (OpenBabel::vector3 *) & ((arg1)->grada); *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1gradb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; OpenBabel::vector3 *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return ; }  
  if (arg1) (arg1)->gradb = *arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1gradb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; OpenBabel::vector3 *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1; 
  result = (OpenBabel::vector3 *) & ((arg1)->gradb); *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1gradc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; OpenBabel::vector3 *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return ; }  
  if (arg1) (arg1)->gradc = *arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1gradc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; OpenBabel::vector3 *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1; 
  result = (OpenBabel::vector3 *) & ((arg1)->gradc); *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1gradd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; OpenBabel::vector3 *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return ; }  
  if (arg1) (arg1)->gradd = *arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1gradd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; OpenBabel::vector3 *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1; 
  result = (OpenBabel::vector3 *) & ((arg1)->gradd); *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBFFConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBFFConstraint *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBFFConstraint *)new OpenBabel::OBFFConstraint(); *(OpenBabel::OBFFConstraint **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBFFConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraint_1GetGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBFFConstraint *arg1 = (OpenBabel::OBFFConstraint *) 0 ; int arg2 ; OpenBabel::vector3 result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraint **)&jarg1;  arg2 = (int)jarg2; 
  result = (arg1)->GetGradient(arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBFFConstraints(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBFFConstraints *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBFFConstraints *)new OpenBabel::OBFFConstraints(); *(OpenBabel::OBFFConstraints **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBFFConstraints(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  (arg1)->Clear(); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1GetConstraintEnergy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  result = (double)(arg1)->GetConstraintEnergy();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1GetGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ;
  OpenBabel::vector3 result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1; 
  arg2 = (int)jarg2;  result = (arg1)->GetGradient(arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1Setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; OpenBabel::OBMol *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  (arg1)->Setup(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1SetFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetFactor(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1AddIgnore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2;  (arg1)->AddIgnore(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1AddAtomConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2;  (arg1)->AddAtomConstraint(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1AddAtomXConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2;  (arg1)->AddAtomXConstraint(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1AddAtomYConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2;  (arg1)->AddAtomYConstraint(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1AddAtomZConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2;  (arg1)->AddAtomZConstraint(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1AddDistanceConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jdouble jarg4) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; int arg3 ; double arg4 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  arg4 = (double)jarg4;  (arg1)->AddDistanceConstraint(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1AddAngleConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jdouble jarg5) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; int arg3 ; int arg4 ; double arg5 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  arg4 = (int)jarg4;  arg5 = (double)jarg5;  (arg1)->AddAngleConstraint(arg2,arg3,arg4,arg5); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1AddTorsionConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jdouble jarg6) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; int arg3 ; int arg4 ; int arg5 ;
  double arg6 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  arg5 = (int)jarg5;  arg6 = (double)jarg6; 
  (arg1)->AddTorsionConstraint(arg2,arg3,arg4,arg5,arg6); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1DeleteConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2;  (arg1)->DeleteConstraint(arg2); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1GetFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  result = (double)(arg1)->GetFactor();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1Size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1; 
  result = (int)((OpenBabel::OBFFConstraints const *)arg1)->Size(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1GetConstraintType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)((OpenBabel::OBFFConstraints const *)arg1)->GetConstraintType(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1GetConstraintValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((OpenBabel::OBFFConstraints const *)arg1)->GetConstraintValue(arg2); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1GetConstraintAtomA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)((OpenBabel::OBFFConstraints const *)arg1)->GetConstraintAtomA(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1GetConstraintAtomB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)((OpenBabel::OBFFConstraints const *)arg1)->GetConstraintAtomB(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1GetConstraintAtomC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)((OpenBabel::OBFFConstraints const *)arg1)->GetConstraintAtomC(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1GetConstraintAtomD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)((OpenBabel::OBFFConstraints const *)arg1)->GetConstraintAtomD(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1IsIgnored(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsIgnored(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1IsFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsFixed(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1IsXFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsXFixed(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1IsYFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsYFixed(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1IsZFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsZFixed(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1GetIgnoredBitVec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; OpenBabel::OBBitVec result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  result = (arg1)->GetIgnoredBitVec();
  *(OpenBabel::OBBitVec **)&jresult = new OpenBabel::OBBitVec((const OpenBabel::OBBitVec &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFConstraints_1GetFixedBitVec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBFFConstraints *arg1 = (OpenBabel::OBFFConstraints *) 0 ; OpenBabel::OBBitVec result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBFFConstraints **)&jarg1;  result = (arg1)->GetFixedBitVec();
  *(OpenBabel::OBBitVec **)&jresult = new OpenBabel::OBBitVec((const OpenBabel::OBBitVec &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1Default(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBForceField **result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBForceField **) &OpenBabel::OBForceField::Default(); *(OpenBabel::OBForceField ***)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1FindType(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; OpenBabel::OBForceField *result = 0 ; (void)jenv; (void)jcls; arg1 = 0;
  if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = (OpenBabel::OBForceField *)OpenBabel::OBForceField::FindType((char const *)arg1);
  *(OpenBabel::OBForceField **)&jresult = result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1MakeNewInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::OBForceField *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  result = (OpenBabel::OBForceField *)(arg1)->MakeNewInstance(); *(OpenBabel::OBForceField **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBForceField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1FindForceField_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; std::string *arg1 = 0 ; OpenBabel::OBForceField *result = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenBabel::OBForceField *)OpenBabel::OBForceField::FindForceField((std::string const &)*arg1);
  *(OpenBabel::OBForceField **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetParameterFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetParameterFile((std::string const &)*arg2); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (arg1)->GetUnit();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1HasAnalyticalGradients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (bool)(arg1)->HasAnalyticalGradients();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1Setup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->Setup(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1Setup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBFFConstraints *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = *(OpenBabel::OBFFConstraints **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBFFConstraints & reference is null"); return 0; }
    result = (bool)(arg1)->Setup(*arg2,*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1ParseParamFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (bool)(arg1)->ParseParamFile();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (bool)(arg1)->SetTypes(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetFormalCharges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (bool)(arg1)->SetFormalCharges();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetPartialCharges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (bool)(arg1)->SetPartialCharges();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetupCalculations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (bool)(arg1)->SetupCalculations();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetupPointers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (bool)(arg1)->SetupPointers();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1IsSetupNeeded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->IsSetupNeeded(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetAtomTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->GetAtomTypes(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetPartialCharges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->GetPartialCharges(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->GetCoordinates(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1UpdateCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->UpdateCoordinates(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetConformers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->GetConformers(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1UpdateConformers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->UpdateConformers(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->SetCoordinates(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetConformers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->SetConformers(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jstring jarg4, jdouble jarg5) {
  jlong jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double arg2 ; double arg3 ;
  char *arg4 = (char *) 0 ; double arg5 ; OpenBabel::OBGridData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3;  arg4 = 0; if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0); if (!arg4) return 0; }  arg5 = (double)jarg5; 
  result = (OpenBabel::OBGridData *)(arg1)->GetGrid(arg2,arg3,(char const *)arg4,arg5);
  *(OpenBabel::OBGridData **)&jresult = result;  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1AddIntraGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::OBBitVec *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = *(OpenBabel::OBBitVec **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null"); return ; }  
  (arg1)->AddIntraGroup(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1AddInterGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::OBBitVec *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = *(OpenBabel::OBBitVec **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null"); return ; }  
  (arg1)->AddInterGroup(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1AddInterGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::OBBitVec *arg2 = 0 ;
  OpenBabel::OBBitVec *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = *(OpenBabel::OBBitVec **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null"); return ; }  
  arg3 = *(OpenBabel::OBBitVec **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null"); return ; }  
  (arg1)->AddInterGroups(*arg2,*arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1ClearGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  (arg1)->ClearGroups(); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1HasGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (bool)(arg1)->HasGroups(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1EnableCutOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->EnableCutOff(arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1IsCutOffEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (bool)(arg1)->IsCutOffEnabled();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetVDWCutOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetVDWCutOff(arg2); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetVDWCutOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (double)(arg1)->GetVDWCutOff();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetElectrostaticCutOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetElectrostaticCutOff(arg2); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetElectrostaticCutOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (double)(arg1)->GetElectrostaticCutOff();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetDielectricConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetDielectricConstant(arg2); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetDielectricConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (double)(arg1)->GetDielectricConstant();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetUpdateFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetUpdateFrequency(arg2); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetUpdateFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (int)(arg1)->GetUpdateFrequency();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1UpdatePairsSimple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  (arg1)->UpdatePairsSimple(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetNumPairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (unsigned int)(arg1)->GetNumPairs();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetNumElectrostaticPairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  result = (unsigned int)(arg1)->GetNumElectrostaticPairs(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetNumVDWPairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (unsigned int)(arg1)->GetNumVDWPairs();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1EnableAllPairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  (arg1)->EnableAllPairs(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetGradient_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; int arg3 ; OpenBabel::vector3 result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = (int)jarg3;  result = (arg1)->GetGradient(arg2,arg3);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetGradient_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::vector3 result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (arg1)->GetGradient(arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetGradientPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (double *)(arg1)->GetGradientPtr();
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1Energy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool arg2 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (double)(arg1)->Energy(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1Energy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (double)(arg1)->Energy(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1E_1Bond_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool arg2 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (double)(arg1)->E_Bond(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1E_1Bond_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (double)(arg1)->E_Bond(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1E_1Angle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool arg2 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (double)(arg1)->E_Angle(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1E_1Angle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (double)(arg1)->E_Angle(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1E_1StrBnd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool arg2 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (double)(arg1)->E_StrBnd(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1E_1StrBnd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (double)(arg1)->E_StrBnd(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1E_1Torsion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool arg2 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (double)(arg1)->E_Torsion(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1E_1Torsion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (double)(arg1)->E_Torsion(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1E_1OOP_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool arg2 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (double)(arg1)->E_OOP(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1E_1OOP_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (double)(arg1)->E_OOP(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1E_1VDW_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool arg2 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (double)(arg1)->E_VDW(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1E_1VDW_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (double)(arg1)->E_VDW(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1E_1Electrostatic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool arg2 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (double)(arg1)->E_Electrostatic(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1E_1Electrostatic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (double)(arg1)->E_Electrostatic();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1PrintTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  (arg1)->PrintTypes(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1PrintFormalCharges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  (arg1)->PrintFormalCharges(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1PrintPartialCharges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  (arg1)->PrintPartialCharges(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1PrintVelocities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  (arg1)->PrintVelocities(); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetLogFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = *(std::ostream **)&jarg2;  result = (bool)(arg1)->SetLogFile(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(arg1)->SetLogLevel(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (int)(arg1)->GetLogLevel(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1OBFFLog_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; std::string arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ; (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  (arg1)->OBFFLog(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1DistanceGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  (arg1)->DistanceGeometry(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SystematicRotorSearch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; bool arg3 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (unsigned int)jarg2;  arg3 = jarg3 ? true : false; 
  (arg1)->SystematicRotorSearch(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SystematicRotorSearch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->SystematicRotorSearch(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SystematicRotorSearch_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  (arg1)->SystematicRotorSearch(); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SystematicRotorSearchInitialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; bool arg3 ; int result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false;  result = (int)(arg1)->SystematicRotorSearchInitialize(arg2,arg3); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SystematicRotorSearchInitialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->SystematicRotorSearchInitialize(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SystematicRotorSearchInitialize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (int)(arg1)->SystematicRotorSearchInitialize();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SystematicRotorSearchNextConformer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->SystematicRotorSearchNextConformer(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SystematicRotorSearchNextConformer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (bool)(arg1)->SystematicRotorSearchNextConformer();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1RandomRotorSearch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; unsigned int arg3 ; bool arg4 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3;  arg4 = jarg4 ? true : false;  (arg1)->RandomRotorSearch(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1RandomRotorSearch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; unsigned int arg3 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3;  (arg1)->RandomRotorSearch(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1RandomRotorSearch_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->RandomRotorSearch(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1RandomRotorSearchInitialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; unsigned int arg3 ; bool arg4 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3;  arg4 = jarg4 ? true : false;  (arg1)->RandomRotorSearchInitialize(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1RandomRotorSearchInitialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; unsigned int arg3 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3;  (arg1)->RandomRotorSearchInitialize(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1RandomRotorSearchInitialize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->RandomRotorSearchInitialize(arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1RandomRotorSearchNextConformer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->RandomRotorSearchNextConformer(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1RandomRotorSearchNextConformer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (bool)(arg1)->RandomRotorSearchNextConformer();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1WeightedRotorSearch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; unsigned int arg3 ; bool arg4 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3;  arg4 = jarg4 ? true : false;  (arg1)->WeightedRotorSearch(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1WeightedRotorSearch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; unsigned int arg2 ; unsigned int arg3 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3;  (arg1)->WeightedRotorSearch(arg2,arg3); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1FastRotorSearch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool arg2 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->FastRotorSearch(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1FastRotorSearch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (int)(arg1)->FastRotorSearch(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1DiverseConfGen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jdouble jarg4, jboolean jarg5) {
  jint jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double arg2 ; unsigned int arg3 ;
  double arg4 ; bool arg5 ; int result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (double)jarg2;  arg3 = (unsigned int)jarg3;  arg4 = (double)jarg4;  arg5 = jarg5 ? true : false; 
  result = (int)(arg1)->DiverseConfGen(arg2,arg3,arg4,arg5); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1DiverseConfGen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jdouble jarg4) {
  jint jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double arg2 ; unsigned int arg3 ;
  double arg4 ; int result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (double)jarg2;  arg3 = (unsigned int)jarg3;  arg4 = (double)jarg4; 
  result = (int)(arg1)->DiverseConfGen(arg2,arg3,arg4); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1DiverseConfGen_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  jint jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double arg2 ; unsigned int arg3 ;
  int result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (double)jarg2; 
  arg3 = (unsigned int)jarg3;  result = (int)(arg1)->DiverseConfGen(arg2,arg3); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1DiverseConfGen_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double arg2 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (double)jarg2; 
  result = (int)(arg1)->DiverseConfGen(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetLineSearchType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetLineSearchType(arg2); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetLineSearchType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (int)(arg1)->GetLineSearchType(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1LineSearch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::vector3 *arg3 = 0 ; OpenBabel::vector3 result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = *(OpenBabel::vector3 **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  result = (arg1)->LineSearch(arg2,*arg3);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1LineSearch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = *(double **)&jarg3; 
  result = (double)(arg1)->LineSearch(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1Newton2NumLineSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double *arg2 = (double *) 0 ;
  double result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = *(double **)&jarg2; 
  result = (double)(arg1)->Newton2NumLineSearch(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1LineSearchTakeStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ;
  double arg4 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3;  arg4 = (double)jarg4;  (arg1)->LineSearchTakeStep(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SteepestDescent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jint jarg4) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; int arg4 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  arg3 = (double)jarg3;  arg4 = (int)jarg4; 
  (arg1)->SteepestDescent(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SteepestDescent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  arg3 = (double)jarg3;  (arg1)->SteepestDescent(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SteepestDescent_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SteepestDescent(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SteepestDescentInitialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jint jarg4) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; int arg4 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  arg3 = (double)jarg3;  arg4 = (int)jarg4; 
  (arg1)->SteepestDescentInitialize(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SteepestDescentInitialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  arg3 = (double)jarg3; 
  (arg1)->SteepestDescentInitialize(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SteepestDescentInitialize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SteepestDescentInitialize(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SteepestDescentInitialize_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  (arg1)->SteepestDescentInitialize(); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SteepestDescentTakeNSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(arg1)->SteepestDescentTakeNSteps(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1ConjugateGradients_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jint jarg4) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; int arg4 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  arg3 = (double)jarg3;  arg4 = (int)jarg4; 
  (arg1)->ConjugateGradients(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1ConjugateGradients_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  arg3 = (double)jarg3; 
  (arg1)->ConjugateGradients(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1ConjugateGradients_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  (arg1)->ConjugateGradients(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1ConjugateGradientsInitialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jint jarg4) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; int arg4 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  arg3 = (double)jarg3;  arg4 = (int)jarg4; 
  (arg1)->ConjugateGradientsInitialize(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1ConjugateGradientsInitialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  arg3 = (double)jarg3; 
  (arg1)->ConjugateGradientsInitialize(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1ConjugateGradientsInitialize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  (arg1)->ConjugateGradientsInitialize(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1ConjugateGradientsInitialize_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  (arg1)->ConjugateGradientsInitialize(); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1ConjugateGradientsTakeNSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ConjugateGradientsTakeNSteps(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GenerateVelocities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  (arg1)->GenerateVelocities(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1CorrectVelocities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  (arg1)->CorrectVelocities(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1MolecularDynamicsTakeNSteps_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jint jarg5) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; double arg4 ; int arg5 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  arg3 = (double)jarg3; 
  arg4 = (double)jarg4;  arg5 = (int)jarg5;  (arg1)->MolecularDynamicsTakeNSteps(arg2,arg3,arg4,arg5); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1MolecularDynamicsTakeNSteps_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; double arg4 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  arg3 = (double)jarg3;  arg4 = (double)jarg4; 
  (arg1)->MolecularDynamicsTakeNSteps(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1MolecularDynamicsTakeNSteps_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; double arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  arg3 = (double)jarg3; 
  (arg1)->MolecularDynamicsTakeNSteps(arg2,arg3); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1GetConstraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::OBFFConstraints *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  result = (OpenBabel::OBFFConstraints *) &(arg1)->GetConstraints(); *(OpenBabel::OBFFConstraints **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetConstraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::OBFFConstraints *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = *(OpenBabel::OBFFConstraints **)&jarg2;
  if (!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBFFConstraints & reference is null");
    return ; }   (arg1)->SetConstraints(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetFixAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetFixAtom(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1UnsetFixAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  (arg1)->UnsetFixAtom(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SetIgnoreAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetIgnoreAtom(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1UnsetIgnoreAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  (arg1)->UnsetIgnoreAtom(); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1IgnoreCalculation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jboolean jresult = 0 ; int arg1 ; int arg2 ; bool result; (void)jenv; (void)jcls; arg1 = (int)jarg1;  arg2 = (int)jarg2; 
  result = (bool)OpenBabel::OBForceField::IgnoreCalculation(arg1,arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1IgnoreCalculation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ; int arg1 ; int arg2 ; int arg3 ; bool result; (void)jenv; (void)jcls; arg1 = (int)jarg1; 
  arg2 = (int)jarg2;  arg3 = (int)jarg3;  result = (bool)OpenBabel::OBForceField::IgnoreCalculation(arg1,arg2,arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1IgnoreCalculation_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ; int arg1 ; int arg2 ; int arg3 ; int arg4 ; bool result; (void)jenv; (void)jcls; arg1 = (int)jarg1; 
  arg2 = (int)jarg2;  arg3 = (int)jarg3;  arg4 = (int)jarg4; 
  result = (bool)OpenBabel::OBForceField::IgnoreCalculation(arg1,arg2,arg3,arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1DetectExplosion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (bool)(arg1)->DetectExplosion();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1ValidateLineSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::vector3 *arg3 = 0 ; OpenBabel::vector3 result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = *(OpenBabel::vector3 **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  result = (arg1)->ValidateLineSearch(arg2,*arg3);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1ValidateSteepestDescent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  (arg1)->ValidateSteepestDescent(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1ValidateConjugateGradients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = (int)jarg2;  (arg1)->ValidateConjugateGradients(arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1Validate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (bool)(arg1)->Validate(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1ValidateGradients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBForceField **)&jarg1;  result = (bool)(arg1)->ValidateGradients();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1ValidateGradientError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ; OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 *arg3 = 0 ; OpenBabel::vector3 result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg3 = *(OpenBabel::vector3 **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  result = (arg1)->ValidateGradientError(*arg2,*arg3);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorBondDerivative(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jdouble jresult = 0 ; double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ; double result; (void)jenv; (void)jcls; arg1 = *(double **)&jarg1;  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3;  arg4 = *(double **)&jarg4; 
  result = (double)OpenBabel::OBForceField::VectorBondDerivative(arg1,arg2,arg3,arg4); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorDistanceDerivative(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jdouble jresult = 0 ; double *arg1 = (double *) (double *)0 ; double *arg2 = (double *) (double *)0 ;
  double *arg3 = (double *) 0 ; double *arg4 = (double *) 0 ; double result; (void)jenv; (void)jcls; arg1 = *(double **)&jarg1; 
  arg2 = *(double **)&jarg2;  arg3 = *(double **)&jarg3;  arg4 = *(double **)&jarg4; 
  result = (double)OpenBabel::OBForceField::VectorDistanceDerivative((double const *)arg1,(double const *)arg2,arg3,arg4);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorLengthDerivative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::vector3 *arg1 = 0 ; OpenBabel::vector3 *arg2 = 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::vector3 **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  result = (double)OpenBabel::OBForceField::VectorLengthDerivative(*arg1,*arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorAngleDerivative_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jdouble jresult = 0 ; double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ; double *arg5 = (double *) 0 ; double *arg6 = (double *) 0 ; double result; (void)jenv;
  (void)jcls; arg1 = *(double **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = *(double **)&jarg3;  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5;  arg6 = *(double **)&jarg6; 
  result = (double)OpenBabel::OBForceField::VectorAngleDerivative(arg1,arg2,arg3,arg4,arg5,arg6); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorAngleDerivative_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ; OpenBabel::vector3 *arg1 = 0 ; OpenBabel::vector3 *arg2 = 0 ; OpenBabel::vector3 *arg3 = 0 ;
  double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::vector3 **)&jarg1;
  if (!arg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0; }   arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg3 = *(OpenBabel::vector3 **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  result = (double)OpenBabel::OBForceField::VectorAngleDerivative(*arg1,*arg2,*arg3); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorOOPDerivative_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jdouble jresult = 0 ; double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ; double *arg5 = (double *) 0 ; double *arg6 = (double *) 0 ; double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ; double result; (void)jenv; (void)jcls; arg1 = *(double **)&jarg1;  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3;  arg4 = *(double **)&jarg4;  arg5 = *(double **)&jarg5;  arg6 = *(double **)&jarg6; 
  arg7 = *(double **)&jarg7;  arg8 = *(double **)&jarg8; 
  result = (double)OpenBabel::OBForceField::VectorOOPDerivative(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorOOPDerivative_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ; OpenBabel::vector3 *arg1 = 0 ; OpenBabel::vector3 *arg2 = 0 ; OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 *arg4 = 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg3 = *(OpenBabel::vector3 **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg4 = *(OpenBabel::vector3 **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  result = (double)OpenBabel::OBForceField::VectorOOPDerivative(*arg1,*arg2,*arg3,*arg4); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorTorsionDerivative_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jdouble jresult = 0 ; double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ; double *arg5 = (double *) 0 ; double *arg6 = (double *) 0 ; double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ; double result; (void)jenv; (void)jcls; arg1 = *(double **)&jarg1;  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3;  arg4 = *(double **)&jarg4;  arg5 = *(double **)&jarg5;  arg6 = *(double **)&jarg6; 
  arg7 = *(double **)&jarg7;  arg8 = *(double **)&jarg8; 
  result = (double)OpenBabel::OBForceField::VectorTorsionDerivative(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorTorsionDerivative_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ; OpenBabel::vector3 *arg1 = 0 ; OpenBabel::vector3 *arg2 = 0 ; OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 *arg4 = 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg3 = *(OpenBabel::vector3 **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg4 = *(OpenBabel::vector3 **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  result = (double)OpenBabel::OBForceField::VectorTorsionDerivative(*arg1,*arg2,*arg3,*arg4); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorSubtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(double **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = *(double **)&jarg3; 
  OpenBabel::OBForceField::VectorSubtract(arg1,arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorAdd(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(double **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = *(double **)&jarg3; 
  OpenBabel::OBForceField::VectorAdd(arg1,arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorDivide(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  double *arg1 = (double *) 0 ; double arg2 ; double *arg3 = (double *) 0 ; (void)jenv; (void)jcls; arg1 = *(double **)&jarg1; 
  arg2 = (double)jarg2;  arg3 = *(double **)&jarg3;  OpenBabel::OBForceField::VectorDivide(arg1,arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorMultiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  double *arg1 = (double *) 0 ; double arg2 ; double *arg3 = (double *) 0 ; (void)jenv; (void)jcls; arg1 = *(double **)&jarg1; 
  arg2 = (double)jarg2;  arg3 = *(double **)&jarg3;  OpenBabel::OBForceField::VectorMultiply(arg1,arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorSelfMultiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  double *arg1 = (double *) 0 ; double arg2 ; (void)jenv; (void)jcls; arg1 = *(double **)&jarg1;  arg2 = (double)jarg2; 
  OpenBabel::OBForceField::VectorSelfMultiply(arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorNormalize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  double *arg1 = (double *) 0 ; (void)jenv; (void)jcls; arg1 = *(double **)&jarg1; 
  OpenBabel::OBForceField::VectorNormalize(arg1); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; (void)jenv; (void)jcls; arg1 = *(double **)&jarg1; 
  arg2 = *(double **)&jarg2;  OpenBabel::OBForceField::VectorCopy(arg1,arg2); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorLength(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ; double *arg1 = (double *) 0 ; double result; (void)jenv; (void)jcls; arg1 = *(double **)&jarg1; 
  result = (double)OpenBabel::OBForceField::VectorLength(arg1); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ; double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; double result; (void)jenv; (void)jcls;
  arg1 = *(double **)&jarg1;  arg2 = *(double **)&jarg2;  result = (double)OpenBabel::OBForceField::VectorDistance(arg1,arg2);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ; double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ; double result;
  (void)jenv; (void)jcls; arg1 = *(double **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = *(double **)&jarg3; 
  result = (double)OpenBabel::OBForceField::VectorAngle(arg1,arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorTorsion(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jdouble jresult = 0 ; double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ; double result; (void)jenv; (void)jcls; arg1 = *(double **)&jarg1;  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3;  arg4 = *(double **)&jarg4; 
  result = (double)OpenBabel::OBForceField::VectorTorsion(arg1,arg2,arg3,arg4); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorOOP(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jdouble jresult = 0 ; double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ; double result; (void)jenv; (void)jcls; arg1 = *(double **)&jarg1;  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3;  arg4 = *(double **)&jarg4; 
  result = (double)OpenBabel::OBForceField::VectorOOP(arg1,arg2,arg3,arg4); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorClear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  double *arg1 = (double *) 0 ; (void)jenv; (void)jcls; arg1 = *(double **)&jarg1;  OpenBabel::OBForceField::VectorClear(arg1); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorDot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ; double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; double result; (void)jenv; (void)jcls;
  arg1 = *(double **)&jarg1;  arg2 = *(double **)&jarg2;  result = (double)OpenBabel::OBForceField::VectorDot(arg1,arg2);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1VectorCross(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  double *arg1 = (double *) 0 ; double *arg2 = (double *) 0 ; double *arg3 = (double *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(double **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = *(double **)&jarg3; 
  OpenBabel::OBForceField::VectorCross(arg1,arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1PrintVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  double *arg1 = (double *) 0 ; (void)jenv; (void)jcls; arg1 = *(double **)&jarg1;  OpenBabel::OBForceField::PrintVector(arg1); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBBuilder(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBBuilder *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBBuilder *)new OpenBabel::OBBuilder();
  *(OpenBabel::OBBuilder **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1Build_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBBuilder *arg1 = (OpenBabel::OBBuilder *) 0 ; OpenBabel::OBMol *arg2 = 0 ; bool arg3 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBBuilder **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = jarg3 ? true : false;  result = (bool)(arg1)->Build(*arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1Build_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBBuilder *arg1 = (OpenBabel::OBBuilder *) 0 ; OpenBabel::OBMol *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBBuilder **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->Build(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1SetKeepRings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBuilder *arg1 = (OpenBabel::OBBuilder *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBuilder **)&jarg1;  (arg1)->SetKeepRings(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1UnsetKeepRings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBuilder *arg1 = (OpenBabel::OBBuilder *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBuilder **)&jarg1;  (arg1)->UnsetKeepRings(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1AddRingFragment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBBuilder *arg1 = (OpenBabel::OBBuilder *) 0 ;
  OpenBabel::OBSmartsPattern *arg2 = (OpenBabel::OBSmartsPattern *) 0 ; std::vector< OpenBabel::vector3 > *arg3 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBBuilder **)&jarg1; 
  arg2 = *(OpenBabel::OBSmartsPattern **)&jarg2;  arg3 = *(std::vector< OpenBabel::vector3 > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::vector3 > const & reference is null");
    return ; }   (arg1)->AddRingFragment(arg2,(std::vector< OpenBabel::vector3 > const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1LoadFragments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBuilder *arg1 = (OpenBabel::OBBuilder *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBBuilder **)&jarg1;  (arg1)->LoadFragments(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1GetFragmentCoord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; OpenBabel::OBBuilder *arg1 = (OpenBabel::OBBuilder *) 0 ; std::string arg2 ;
  std::vector< OpenBabel::vector3 > result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBBuilder **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr); jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  result = (arg1)->GetFragmentCoord(arg2);
  *(std::vector< OpenBabel::vector3 > **)&jresult = new std::vector< OpenBabel::vector3 >((const std::vector< OpenBabel::vector3 > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1GetNewBondVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::vector3 result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = OpenBabel::OBBuilder::GetNewBondVector(arg1);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1GetNewBondVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; double arg2 ; OpenBabel::vector3 result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  arg2 = (double)jarg2; 
  result = OpenBabel::OBBuilder::GetNewBondVector(arg1,arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1Connect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = 0 ; int arg2 ; int arg3 ; OpenBabel::vector3 *arg4 = 0 ; int arg5 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg4_; arg1 = *(OpenBabel::OBMol **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg2 = (int)jarg2;  arg3 = (int)jarg3;  arg4 = *(OpenBabel::vector3 **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg5 = (int)jarg5;  result = (bool)OpenBabel::OBBuilder::Connect(*arg1,arg2,arg3,*arg4,arg5); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1Connect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = 0 ; int arg2 ; int arg3 ; OpenBabel::vector3 *arg4 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg4_; arg1 = *(OpenBabel::OBMol **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg2 = (int)jarg2;  arg3 = (int)jarg3;  arg4 = *(OpenBabel::vector3 **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  result = (bool)OpenBabel::OBBuilder::Connect(*arg1,arg2,arg3,*arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1Connect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = 0 ; int arg2 ; int arg3 ; int arg4 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg2 = (int)jarg2;  arg3 = (int)jarg3;  arg4 = (int)jarg4; 
  result = (bool)OpenBabel::OBBuilder::Connect(*arg1,arg2,arg3,arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1Connect_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = 0 ; int arg2 ; int arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg2 = (int)jarg2;  arg3 = (int)jarg3;  result = (bool)OpenBabel::OBBuilder::Connect(*arg1,arg2,arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1Swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = 0 ; int arg2 ; int arg3 ; int arg4 ; int arg5 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg2 = (int)jarg2;  arg3 = (int)jarg3;  arg4 = (int)jarg4;  arg5 = (int)jarg5; 
  result = (bool)OpenBabel::OBBuilder::Swap(*arg1,arg2,arg3,arg4,arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1CorrectStereoBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)OpenBabel::OBBuilder::CorrectStereoBonds(*arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1CorrectStereoAtoms_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = 0 ; bool arg2 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg2 = jarg2 ? true : false;  result = (bool)OpenBabel::OBBuilder::CorrectStereoAtoms(*arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1CorrectStereoAtoms_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)OpenBabel::OBBuilder::CorrectStereoAtoms(*arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1IsSpiroAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; unsigned long arg1 ; OpenBabel::OBMol *arg2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg2_;
  arg1 = (unsigned long)jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)OpenBabel::OBBuilder::IsSpiroAtom(arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1GetFragment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBBitVec result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1;  result = OpenBabel::OBBuilder::GetFragment(arg1);
  *(OpenBabel::OBBitVec **)&jresult = new OpenBabel::OBBitVec((const OpenBabel::OBBitVec &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBuilder_1AddNbrs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBitVec *arg1 = 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBBitVec **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null"); return ; }  
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  OpenBabel::OBBuilder::AddNbrs(*arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBBuilder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBuilder *arg1 = (OpenBabel::OBBuilder *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBBuilder **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOp_1Default(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBOp **result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBOp **) &OpenBabel::OBOp::Default();
  *(OpenBabel::OBOp ***)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOp_1FindType(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; OpenBabel::OBOp *result = 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = (OpenBabel::OBOp *)OpenBabel::OBOp::FindType((char const *)arg1); *(OpenBabel::OBOp **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOp_1Do_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ; OpenBabel::OBOp *arg1 = (OpenBabel::OBOp *) 0 ; OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  char *arg3 = (char *) 0 ; OpenBabel::OBOp::OpMap *arg4 = (OpenBabel::OBOp::OpMap *) 0 ;
  OpenBabel::OBConversion *arg5 = (OpenBabel::OBConversion *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; (void)jarg5_; arg1 = *(OpenBabel::OBOp **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2;  arg3 = 0; if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; }  arg4 = *(OpenBabel::OBOp::OpMap **)&jarg4; 
  arg5 = *(OpenBabel::OBConversion **)&jarg5;  result = (bool)(arg1)->Do(arg2,(char const *)arg3,arg4,arg5);
  jresult = (jboolean)result;  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOp_1Do_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBOp *arg1 = (OpenBabel::OBOp *) 0 ; OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  char *arg3 = (char *) 0 ; OpenBabel::OBOp::OpMap *arg4 = (OpenBabel::OBOp::OpMap *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBOp **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2;  arg3 = 0; if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; }  arg4 = *(OpenBabel::OBOp::OpMap **)&jarg4; 
  result = (bool)(arg1)->Do(arg2,(char const *)arg3,arg4); jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOp_1Do_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBOp *arg1 = (OpenBabel::OBOp *) 0 ; OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  char *arg3 = (char *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBOp **)&jarg1;  arg2 = *(OpenBabel::OBBase **)&jarg2;  arg3 = 0; if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; } 
  result = (bool)(arg1)->Do(arg2,(char const *)arg3); jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOp_1Do_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBOp *arg1 = (OpenBabel::OBOp *) 0 ; OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBOp **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2;  result = (bool)(arg1)->Do(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOp_1WorksWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBOp *arg1 = (OpenBabel::OBOp *) 0 ; OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBOp **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2;  result = (bool)((OpenBabel::OBOp const *)arg1)->WorksWith(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOp_1ProcessVec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBOp *arg1 = (OpenBabel::OBOp *) 0 ; std::vector< OpenBabel::OBBase * > *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBOp **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBBase * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBBase * > & reference is null");
    return 0; }   result = (bool)(arg1)->ProcessVec(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOp_1OpOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBBase **)&jarg1;  result = OpenBabel::OBOp::OpOptions(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOp_1DoOps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBOp::OpMap *arg2 = (OpenBabel::OBOp::OpMap *) 0 ; OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_; arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = *(OpenBabel::OBOp::OpMap **)&jarg2;  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (bool)OpenBabel::OBOp::DoOps(arg1,(std::map< std::string,std::string > const *)arg2,arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBOp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBOp *arg1 = (OpenBabel::OBOp *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBOp **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBChargeModel_1Default(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBChargeModel **result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBChargeModel **) &OpenBabel::OBChargeModel::Default();
  *(OpenBabel::OBChargeModel ***)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBChargeModel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; bool arg2 ; OpenBabel::OBChargeModel *result = 0 ; (void)jenv; (void)jcls;
  arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; }  arg2 = jarg2 ? true : false; 
  result = (OpenBabel::OBChargeModel *)new OpenBabel::OBChargeModel((char const *)arg1,arg2);
  *(OpenBabel::OBChargeModel **)&jresult = result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBChargeModel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; OpenBabel::OBChargeModel *result = 0 ; (void)jenv; (void)jcls; arg1 = 0;
  if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = (OpenBabel::OBChargeModel *)new OpenBabel::OBChargeModel((char const *)arg1);
  *(OpenBabel::OBChargeModel **)&jresult = result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBChargeModel_1FindType(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; OpenBabel::OBChargeModel *result = 0 ; (void)jenv; (void)jcls; arg1 = 0;
  if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = (OpenBabel::OBChargeModel *)OpenBabel::OBChargeModel::FindType((char const *)arg1);
  *(OpenBabel::OBChargeModel **)&jresult = result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBChargeModel_1ComputeCharges_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBChargeModel *arg1 = (OpenBabel::OBChargeModel *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBChargeModel **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->ComputeCharges(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBChargeModel_1ComputeCharges_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBChargeModel *arg1 = (OpenBabel::OBChargeModel *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  char *arg3 = (char *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBChargeModel **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = 0; if (jarg3) { arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; } 
  result = (bool)(arg1)->ComputeCharges(*arg2,(char const *)arg3); jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBChargeModel_1GetFormalCharges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBChargeModel *arg1 = (OpenBabel::OBChargeModel *) 0 ; std::vector< double > *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBChargeModel **)&jarg1; 
  result = (std::vector< double > *) &((OpenBabel::OBChargeModel const *)arg1)->GetFormalCharges();
  *(std::vector< double > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBChargeModel_1GetPartialCharges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBChargeModel *arg1 = (OpenBabel::OBChargeModel *) 0 ; std::vector< double > *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBChargeModel **)&jarg1; 
  result = (std::vector< double > *) &((OpenBabel::OBChargeModel const *)arg1)->GetPartialCharges();
  *(std::vector< double > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBChargeModel_1GetDipoleMoment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBChargeModel *arg1 = (OpenBabel::OBChargeModel *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::vector3 result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBChargeModel **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (arg1)->GetDipoleMoment(*arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((const OpenBabel::vector3 &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBChargeModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBChargeModel *arg1 = (OpenBabel::OBChargeModel *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBChargeModel **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBGraphSym_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBBitVec *arg2 = (OpenBabel::OBBitVec *) 0 ;
  OpenBabel::OBGraphSym *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBBitVec **)&jarg2; 
  result = (OpenBabel::OBGraphSym *)new OpenBabel::OBGraphSym(arg1,(OpenBabel::OBBitVec const *)arg2);
  *(OpenBabel::OBGraphSym **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBGraphSym_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBGraphSym *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBGraphSym *)new OpenBabel::OBGraphSym(arg1); *(OpenBabel::OBGraphSym **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBGraphSym(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBGraphSym *arg1 = (OpenBabel::OBGraphSym *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBGraphSym **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGraphSym_1NoSymmetryClass_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; unsigned int result; (void)jenv; (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGraphSym::NoSymmetryClass; jresult = (jlong)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGraphSym_1GetSymmetry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; OpenBabel::OBGraphSym *arg1 = (OpenBabel::OBGraphSym *) 0 ; std::vector< unsigned int > *arg2 = 0 ;
  int result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBGraphSym **)&jarg1; 
  arg2 = *(std::vector< unsigned int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null"); return 0; }
    result = (int)(arg1)->GetSymmetry(*arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGraphSym_1ClearSymmetry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBGraphSym *arg1 = (OpenBabel::OBGraphSym *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBGraphSym **)&jarg1;  (arg1)->ClearSymmetry(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBIsomorphismMapper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBIsomorphismMapper **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBIsomorphismMapper_1GetInstance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ; std::string *arg2 = 0 ;
  OpenBabel::OBIsomorphismMapper *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBQuery **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBIsomorphismMapper *)OpenBabel::OBIsomorphismMapper::GetInstance(arg1,(std::string const &)*arg2);
  *(OpenBabel::OBIsomorphismMapper **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBIsomorphismMapper_1GetInstance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ; OpenBabel::OBIsomorphismMapper *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBQuery **)&jarg1; 
  result = (OpenBabel::OBIsomorphismMapper *)OpenBabel::OBIsomorphismMapper::GetInstance(arg1);
  *(OpenBabel::OBIsomorphismMapper **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBIsomorphismMapper_1MapFirst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBIsomorphismMapper::Mapping *arg3 = 0 ;
  OpenBabel::OBBitVec *arg4 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(OpenBabel::OBIsomorphismMapper **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  arg3 = *(OpenBabel::OBIsomorphismMapper::Mapping **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBIsomorphismMapper::Mapping & reference is null");
    return ; }   arg4 = *(OpenBabel::OBBitVec **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return ; }  
  (arg1)->MapFirst((OpenBabel::OBMol const *)arg2,*arg3,(OpenBabel::OBBitVec const &)*arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBIsomorphismMapper_1MapFirst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBIsomorphismMapper::Mapping *arg3 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBIsomorphismMapper **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;  arg3 = *(OpenBabel::OBIsomorphismMapper::Mapping **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBIsomorphismMapper::Mapping & reference is null");
    return ; }   (arg1)->MapFirst((OpenBabel::OBMol const *)arg2,*arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBIsomorphismMapper_1MapUnique_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBIsomorphismMapper::Mappings *arg3 = 0 ;
  OpenBabel::OBBitVec *arg4 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(OpenBabel::OBIsomorphismMapper **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  arg3 = *(OpenBabel::OBIsomorphismMapper::Mappings **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBIsomorphismMapper::Mappings & reference is null");
    return ; }   arg4 = *(OpenBabel::OBBitVec **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return ; }  
  (arg1)->MapUnique((OpenBabel::OBMol const *)arg2,*arg3,(OpenBabel::OBBitVec const &)*arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBIsomorphismMapper_1MapUnique_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBIsomorphismMapper::Mappings *arg3 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBIsomorphismMapper **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;  arg3 = *(OpenBabel::OBIsomorphismMapper::Mappings **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBIsomorphismMapper::Mappings & reference is null");
    return ; }   (arg1)->MapUnique((OpenBabel::OBMol const *)arg2,*arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBIsomorphismMapper_1MapAll_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBIsomorphismMapper::Mappings *arg3 = 0 ;
  OpenBabel::OBBitVec *arg4 = 0 ; std::size_t arg5 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  (void)jarg4_; arg1 = *(OpenBabel::OBIsomorphismMapper **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  arg3 = *(OpenBabel::OBIsomorphismMapper::Mappings **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBIsomorphismMapper::Mappings & reference is null");
    return ; }   arg4 = *(OpenBabel::OBBitVec **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return ; }  
  arg5 = (std::size_t)jarg5;  (arg1)->MapAll((OpenBabel::OBMol const *)arg2,*arg3,(OpenBabel::OBBitVec const &)*arg4,arg5); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBIsomorphismMapper_1MapAll_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBIsomorphismMapper::Mappings *arg3 = 0 ;
  OpenBabel::OBBitVec *arg4 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(OpenBabel::OBIsomorphismMapper **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  arg3 = *(OpenBabel::OBIsomorphismMapper::Mappings **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBIsomorphismMapper::Mappings & reference is null");
    return ; }   arg4 = *(OpenBabel::OBBitVec **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return ; }  
  (arg1)->MapAll((OpenBabel::OBMol const *)arg2,*arg3,(OpenBabel::OBBitVec const &)*arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBIsomorphismMapper_1MapAll_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBIsomorphismMapper::Mappings *arg3 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBIsomorphismMapper **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;  arg3 = *(OpenBabel::OBIsomorphismMapper::Mappings **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBIsomorphismMapper::Mappings & reference is null");
    return ; }   (arg1)->MapAll((OpenBabel::OBMol const *)arg2,*arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBIsomorphismMapper_1Functor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBIsomorphismMapper::Functor *arg1 = (OpenBabel::OBIsomorphismMapper::Functor *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBIsomorphismMapper::Functor **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBIsomorphismMapper_1MapGeneric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBIsomorphismMapper::Functor *arg2 = 0 ; OpenBabel::OBMol *arg3 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBitVec *arg4 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(OpenBabel::OBIsomorphismMapper **)&jarg1;  arg2 = *(OpenBabel::OBIsomorphismMapper::Functor **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBIsomorphismMapper::Functor & reference is null");
    return ; }   arg3 = *(OpenBabel::OBMol **)&jarg3;  arg4 = *(OpenBabel::OBBitVec **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return ; }  
  (arg1)->MapGeneric(*arg2,(OpenBabel::OBMol const *)arg3,(OpenBabel::OBBitVec const &)*arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBIsomorphismMapper_1MapGeneric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ;
  OpenBabel::OBIsomorphismMapper::Functor *arg2 = 0 ; OpenBabel::OBMol *arg3 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBIsomorphismMapper **)&jarg1; 
  arg2 = *(OpenBabel::OBIsomorphismMapper::Functor **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBIsomorphismMapper::Functor & reference is null");
    return ; }   arg3 = *(OpenBabel::OBMol **)&jarg3;  (arg1)->MapGeneric(*arg2,(OpenBabel::OBMol const *)arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBIsomorphismMapper_1SetTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBIsomorphismMapper *arg1 = (OpenBabel::OBIsomorphismMapper *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBIsomorphismMapper **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->SetTimeout(arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_MapsTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBIsomorphismMapper::Mapping *arg1 = 0 ; unsigned int arg2 ; unsigned int *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBIsomorphismMapper::Mapping **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBIsomorphismMapper::Mapping const & reference is null");
    return 0; }   arg2 = (unsigned int)jarg2;  arg3 = *(unsigned int **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null"); return 0; }  
  result = (bool)OpenBabel::MapsTo((std::vector< std::pair< unsigned int,unsigned int > > const &)*arg1,arg2,*arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_FindAutomorphisms_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBIsomorphismMapper::Mapping > *arg2 = 0 ; std::vector< unsigned int > *arg3 = 0 ;
  OpenBabel::OBBitVec *arg4 = 0 ; std::size_t arg5 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBIsomorphismMapper::Mapping > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBIsomorphismMapper::Mapping > & reference is null");
    return 0; }   arg3 = *(std::vector< unsigned int > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > const & reference is null");
    return 0; }   arg4 = *(OpenBabel::OBBitVec **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return 0; }  
  arg5 = (std::size_t)jarg5; 
  result = (bool)OpenBabel::FindAutomorphisms(arg1,*arg2,(std::vector< unsigned int > const &)*arg3,(OpenBabel::OBBitVec const &)*arg4,arg5);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_FindAutomorphisms_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBIsomorphismMapper::Mapping > *arg2 = 0 ; std::vector< unsigned int > *arg3 = 0 ;
  OpenBabel::OBBitVec *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(std::vector< OpenBabel::OBIsomorphismMapper::Mapping > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBIsomorphismMapper::Mapping > & reference is null");
    return 0; }   arg3 = *(std::vector< unsigned int > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > const & reference is null");
    return 0; }   arg4 = *(OpenBabel::OBBitVec **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return 0; }  
  result = (bool)OpenBabel::FindAutomorphisms(arg1,*arg2,(std::vector< unsigned int > const &)*arg3,(OpenBabel::OBBitVec const &)*arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_FindAutomorphisms_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBIsomorphismMapper::Mapping > *arg2 = 0 ; std::vector< unsigned int > *arg3 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBIsomorphismMapper::Mapping > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBIsomorphismMapper::Mapping > & reference is null");
    return 0; }   arg3 = *(std::vector< unsigned int > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > const & reference is null");
    return 0; }   result = (bool)OpenBabel::FindAutomorphisms(arg1,*arg2,(std::vector< unsigned int > const &)*arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_FindAutomorphisms_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBIsomorphismMapper::Mapping > *arg2 = 0 ; OpenBabel::OBBitVec *arg3 = 0 ; std::size_t arg4 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBIsomorphismMapper::Mapping > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBIsomorphismMapper::Mapping > & reference is null");
    return 0; }   arg3 = *(OpenBabel::OBBitVec **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return 0; }  
  arg4 = (std::size_t)jarg4;  result = (bool)OpenBabel::FindAutomorphisms(arg1,*arg2,(OpenBabel::OBBitVec const &)*arg3,arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_FindAutomorphisms_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBIsomorphismMapper::Mapping > *arg2 = 0 ; OpenBabel::OBBitVec *arg3 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBIsomorphismMapper::Mapping > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBIsomorphismMapper::Mapping > & reference is null");
    return 0; }   arg3 = *(OpenBabel::OBBitVec **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return 0; }  
  result = (bool)OpenBabel::FindAutomorphisms(arg1,*arg2,(OpenBabel::OBBitVec const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_FindAutomorphisms_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector< OpenBabel::OBIsomorphismMapper::Mapping > *arg2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(std::vector< OpenBabel::OBIsomorphismMapper::Mapping > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBIsomorphismMapper::Mapping > & reference is null");
    return 0; }   result = (bool)OpenBabel::FindAutomorphisms(arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_FindAutomorphisms_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenBabel::OBIsomorphismMapper::Functor *arg1 = 0 ; OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  std::vector< unsigned int > *arg3 = 0 ; OpenBabel::OBBitVec *arg4 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; arg1 = *(OpenBabel::OBIsomorphismMapper::Functor **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBIsomorphismMapper::Functor & reference is null");
    return ; }   arg2 = *(OpenBabel::OBMol **)&jarg2;  arg3 = *(std::vector< unsigned int > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > const & reference is null");
    return ; }   arg4 = *(OpenBabel::OBBitVec **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return ; }  
  OpenBabel::FindAutomorphisms(*arg1,arg2,(std::vector< unsigned int > const &)*arg3,(OpenBabel::OBBitVec const &)*arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_FindAutomorphisms_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBIsomorphismMapper::Functor *arg1 = 0 ; OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  std::vector< unsigned int > *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(OpenBabel::OBIsomorphismMapper::Functor **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBIsomorphismMapper::Functor & reference is null");
    return ; }   arg2 = *(OpenBabel::OBMol **)&jarg2;  arg3 = *(std::vector< unsigned int > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > const & reference is null");
    return ; }   OpenBabel::FindAutomorphisms(*arg1,arg2,(std::vector< unsigned int > const &)*arg3); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBQueryAtom_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ; int arg1 ; bool arg2 ; bool arg3 ; OpenBabel::OBQueryAtom *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (int)jarg1;  arg2 = jarg2 ? true : false;  arg3 = jarg3 ? true : false; 
  result = (OpenBabel::OBQueryAtom *)new OpenBabel::OBQueryAtom(arg1,arg2,arg3); *(OpenBabel::OBQueryAtom **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBQueryAtom_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ; int arg1 ; bool arg2 ; OpenBabel::OBQueryAtom *result = 0 ; (void)jenv; (void)jcls; arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false;  result = (OpenBabel::OBQueryAtom *)new OpenBabel::OBQueryAtom(arg1,arg2);
  *(OpenBabel::OBQueryAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBQueryAtom_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ; int arg1 ; OpenBabel::OBQueryAtom *result = 0 ; (void)jenv; (void)jcls; arg1 = (int)jarg1; 
  result = (OpenBabel::OBQueryAtom *)new OpenBabel::OBQueryAtom(arg1); *(OpenBabel::OBQueryAtom **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBQueryAtom_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBQueryAtom *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBQueryAtom *)new OpenBabel::OBQueryAtom(); *(OpenBabel::OBQueryAtom **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBQueryAtom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBQueryAtom *arg1 = (OpenBabel::OBQueryAtom *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBQueryAtom **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBQueryAtom_1GetIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBQueryAtom *arg1 = (OpenBabel::OBQueryAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBQueryAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBQueryAtom const *)arg1)->GetIndex(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBQueryAtom_1GetBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBQueryAtom *arg1 = (OpenBabel::OBQueryAtom *) 0 ;
  std::vector< OpenBabel::OBQueryBond * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBQueryAtom **)&jarg1; 
  result = (std::vector< OpenBabel::OBQueryBond * > *) &((OpenBabel::OBQueryAtom const *)arg1)->GetBonds();
  *(std::vector< OpenBabel::OBQueryBond * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBQueryAtom_1GetNbrs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBQueryAtom *arg1 = (OpenBabel::OBQueryAtom *) 0 ;
  std::vector< OpenBabel::OBQueryAtom * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBQueryAtom **)&jarg1; 
  result = (std::vector< OpenBabel::OBQueryAtom * > *) &((OpenBabel::OBQueryAtom const *)arg1)->GetNbrs();
  *(std::vector< OpenBabel::OBQueryAtom * > **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBQueryAtom_1Matches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBQueryAtom *arg1 = (OpenBabel::OBQueryAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBQueryAtom **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)((OpenBabel::OBQueryAtom const *)arg1)->Matches((OpenBabel::OBAtom const *)arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBQueryBond_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ; OpenBabel::OBQueryAtom *arg1 = (OpenBabel::OBQueryAtom *) 0 ;
  OpenBabel::OBQueryAtom *arg2 = (OpenBabel::OBQueryAtom *) 0 ; int arg3 ; bool arg4 ; OpenBabel::OBQueryBond *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBQueryAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBQueryAtom **)&jarg2;  arg3 = (int)jarg3;  arg4 = jarg4 ? true : false; 
  result = (OpenBabel::OBQueryBond *)new OpenBabel::OBQueryBond(arg1,arg2,arg3,arg4);
  *(OpenBabel::OBQueryBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBQueryBond_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ; OpenBabel::OBQueryAtom *arg1 = (OpenBabel::OBQueryAtom *) 0 ;
  OpenBabel::OBQueryAtom *arg2 = (OpenBabel::OBQueryAtom *) 0 ; int arg3 ; OpenBabel::OBQueryBond *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBQueryAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBQueryAtom **)&jarg2;  arg3 = (int)jarg3; 
  result = (OpenBabel::OBQueryBond *)new OpenBabel::OBQueryBond(arg1,arg2,arg3); *(OpenBabel::OBQueryBond **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBQueryBond_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBQueryAtom *arg1 = (OpenBabel::OBQueryAtom *) 0 ;
  OpenBabel::OBQueryAtom *arg2 = (OpenBabel::OBQueryAtom *) 0 ; OpenBabel::OBQueryBond *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBQueryAtom **)&jarg1;  arg2 = *(OpenBabel::OBQueryAtom **)&jarg2; 
  result = (OpenBabel::OBQueryBond *)new OpenBabel::OBQueryBond(arg1,arg2); *(OpenBabel::OBQueryBond **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBQueryBond(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBQueryBond *arg1 = (OpenBabel::OBQueryBond *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBQueryBond **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBQueryBond_1GetIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBQueryBond *arg1 = (OpenBabel::OBQueryBond *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBQueryBond **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBQueryBond const *)arg1)->GetIndex(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBQueryBond_1GetBeginAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBQueryBond *arg1 = (OpenBabel::OBQueryBond *) 0 ; OpenBabel::OBQueryAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBQueryBond **)&jarg1; 
  result = (OpenBabel::OBQueryAtom *)((OpenBabel::OBQueryBond const *)arg1)->GetBeginAtom();
  *(OpenBabel::OBQueryAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBQueryBond_1GetEndAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBQueryBond *arg1 = (OpenBabel::OBQueryBond *) 0 ; OpenBabel::OBQueryAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBQueryBond **)&jarg1; 
  result = (OpenBabel::OBQueryAtom *)((OpenBabel::OBQueryBond const *)arg1)->GetEndAtom();
  *(OpenBabel::OBQueryAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBQueryBond_1Matches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBQueryBond *arg1 = (OpenBabel::OBQueryBond *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBQueryBond **)&jarg1;  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)((OpenBabel::OBQueryBond const *)arg1)->Matches((OpenBabel::OBBond const *)arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBQuery(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBQuery **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBQuery_1NumAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBQuery **)&jarg1;  result = (unsigned int)((OpenBabel::OBQuery const *)arg1)->NumAtoms();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBQuery_1NumBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBQuery **)&jarg1;  result = (unsigned int)((OpenBabel::OBQuery const *)arg1)->NumBonds();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBQuery_1GetAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ;
  std::vector< OpenBabel::OBQueryAtom * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBQuery **)&jarg1; 
  result = (std::vector< OpenBabel::OBQueryAtom * > *) &((OpenBabel::OBQuery const *)arg1)->GetAtoms();
  *(std::vector< OpenBabel::OBQueryAtom * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBQuery_1GetBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ;
  std::vector< OpenBabel::OBQueryBond * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBQuery **)&jarg1; 
  result = (std::vector< OpenBabel::OBQueryBond * > *) &((OpenBabel::OBQuery const *)arg1)->GetBonds();
  *(std::vector< OpenBabel::OBQueryBond * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBQuery_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ;
  OpenBabel::OBQueryAtom *arg2 = (OpenBabel::OBQueryAtom *) 0 ; OpenBabel::OBQueryAtom *arg3 = (OpenBabel::OBQueryAtom *) 0 ;
  OpenBabel::OBQueryBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(OpenBabel::OBQuery **)&jarg1;  arg2 = *(OpenBabel::OBQueryAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBQueryAtom **)&jarg3; 
  result = (OpenBabel::OBQueryBond *)((OpenBabel::OBQuery const *)arg1)->GetBond(arg2,arg3);
  *(OpenBabel::OBQueryBond **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBQuery_1AddAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ; OpenBabel::OBQueryAtom *arg2 = (OpenBabel::OBQueryAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBQuery **)&jarg1; 
  arg2 = *(OpenBabel::OBQueryAtom **)&jarg2;  (arg1)->AddAtom(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBQuery_1AddBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBQuery *arg1 = (OpenBabel::OBQuery *) 0 ; OpenBabel::OBQueryBond *arg2 = (OpenBabel::OBQueryBond *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBQuery **)&jarg1; 
  arg2 = *(OpenBabel::OBQueryBond **)&jarg2;  (arg1)->AddBond(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBQuery(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBQuery *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBQuery *)new OpenBabel::OBQuery();
  *(OpenBabel::OBQuery **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_CompileMoleculeQuery_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBBitVec *arg2 = 0 ;
  OpenBabel::OBQuery *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBBitVec **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return 0; }  
  result = (OpenBabel::OBQuery *)OpenBabel::CompileMoleculeQuery(arg1,(OpenBabel::OBBitVec const &)*arg2);
  *(OpenBabel::OBQuery **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_CompileMoleculeQuery_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBQuery *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  result = (OpenBabel::OBQuery *)OpenBabel::CompileMoleculeQuery(arg1);
  *(OpenBabel::OBQuery **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_CompileSmilesQuery_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; std::string *arg1 = 0 ; OpenBabel::OBBitVec *arg2 = 0 ; OpenBabel::OBQuery *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg2_; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }
   const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(OpenBabel::OBBitVec **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return 0; }  
  result = (OpenBabel::OBQuery *)OpenBabel::CompileSmilesQuery((std::string const &)*arg1,(OpenBabel::OBBitVec const &)*arg2);
  *(OpenBabel::OBQuery **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_CompileSmilesQuery_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; std::string *arg1 = 0 ; OpenBabel::OBQuery *result = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenBabel::OBQuery *)OpenBabel::CompileSmilesQuery((std::string const &)*arg1);
  *(OpenBabel::OBQuery **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_CanonicalLabels_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jboolean jarg6) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< unsigned int > *arg2 = 0 ;
  std::vector< unsigned int > *arg3 = 0 ; OpenBabel::OBBitVec *arg4 = 0 ; int arg5 ; bool arg6 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector< unsigned int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > const & reference is null");
    return ; }   arg3 = *(std::vector< unsigned int > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null"); return ; }
    arg4 = *(OpenBabel::OBBitVec **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return ; }  
  arg5 = (int)jarg5;  arg6 = jarg6 ? true : false; 
  OpenBabel::CanonicalLabels(arg1,(std::vector< unsigned int > const &)*arg2,*arg3,(OpenBabel::OBBitVec const &)*arg4,arg5,arg6); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_CanonicalLabels_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< unsigned int > *arg2 = 0 ;
  std::vector< unsigned int > *arg3 = 0 ; OpenBabel::OBBitVec *arg4 = 0 ; int arg5 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; (void)jarg3_; (void)jarg4_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector< unsigned int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > const & reference is null");
    return ; }   arg3 = *(std::vector< unsigned int > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null"); return ; }
    arg4 = *(OpenBabel::OBBitVec **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return ; }  
  arg5 = (int)jarg5; 
  OpenBabel::CanonicalLabels(arg1,(std::vector< unsigned int > const &)*arg2,*arg3,(OpenBabel::OBBitVec const &)*arg4,arg5); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_CanonicalLabels_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< unsigned int > *arg2 = 0 ;
  std::vector< unsigned int > *arg3 = 0 ; OpenBabel::OBBitVec *arg4 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(std::vector< unsigned int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > const & reference is null");
    return ; }   arg3 = *(std::vector< unsigned int > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null"); return ; }
    arg4 = *(OpenBabel::OBBitVec **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return ; }  
  OpenBabel::CanonicalLabels(arg1,(std::vector< unsigned int > const &)*arg2,*arg3,(OpenBabel::OBBitVec const &)*arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_CanonicalLabels_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< unsigned int > *arg2 = 0 ;
  std::vector< unsigned int > *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(std::vector< unsigned int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > const & reference is null");
    return ; }   arg3 = *(std::vector< unsigned int > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null"); return ; }
    OpenBabel::CanonicalLabels(arg1,(std::vector< unsigned int > const &)*arg2,*arg3); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1CisTrans_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::Type result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::Type)OpenBabel::OBStereo::CisTrans; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1ExtendedCisTrans_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::Type result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::Type)OpenBabel::OBStereo::ExtendedCisTrans; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1SquarePlanar_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::Type result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::Type)OpenBabel::OBStereo::SquarePlanar; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1Tetrahedral_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::Type result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::Type)OpenBabel::OBStereo::Tetrahedral; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1ExtendedTetrahedral_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::Type result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::Type)OpenBabel::OBStereo::ExtendedTetrahedral; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1TrigonalBipyramidal_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::Type result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::Type)OpenBabel::OBStereo::TrigonalBipyramidal; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1Octahedral_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::Type result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::Type)OpenBabel::OBStereo::Octahedral; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1NotStereo_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::BondDirection result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::BondDirection)OpenBabel::OBStereo::NotStereo; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1UpBond_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::BondDirection result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::BondDirection)OpenBabel::OBStereo::UpBond; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1DownBond_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::BondDirection result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::BondDirection)OpenBabel::OBStereo::DownBond; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1UnknownDir_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::BondDirection result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::BondDirection)OpenBabel::OBStereo::UnknownDir; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1ShapeU_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::Shape result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::Shape)OpenBabel::OBStereo::ShapeU; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1ShapeZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::Shape result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::Shape)OpenBabel::OBStereo::ShapeZ; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1Shape4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::Shape result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::Shape)OpenBabel::OBStereo::Shape4; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1ViewFrom_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::View result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::View)OpenBabel::OBStereo::ViewFrom; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1ViewTowards_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::View result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::View)OpenBabel::OBStereo::ViewTowards; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1Clockwise_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::Winding result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::Winding)OpenBabel::OBStereo::Clockwise; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1AntiClockwise_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::Winding result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::Winding)OpenBabel::OBStereo::AntiClockwise; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1UnknownWinding_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; OpenBabel::OBStereo::Winding result; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereo::Winding)OpenBabel::OBStereo::UnknownWinding; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1NoRef_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBStereo::NoRef; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1ImplicitRef_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int)OpenBabel::OBStereo::ImplicitRef;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1MakeRefs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ; OpenBabel::OBStereo::Ref arg1 ; OpenBabel::OBStereo::Ref arg2 ; OpenBabel::OBStereo::Ref arg3 ;
  OpenBabel::OBStereo::Ref arg4 ; SwigValueWrapper< std::vector< unsigned long > > result; (void)jenv; (void)jcls;
  arg1 = (OpenBabel::OBStereo::Ref)jarg1;  arg2 = (OpenBabel::OBStereo::Ref)jarg2;  arg3 = (OpenBabel::OBStereo::Ref)jarg3; 
  arg4 = (OpenBabel::OBStereo::Ref)jarg4;  result = OpenBabel::OBStereo::MakeRefs(arg1,arg2,arg3,arg4);
  *(OpenBabel::OBStereo::Refs **)&jresult = new OpenBabel::OBStereo::Refs((const OpenBabel::OBStereo::Refs &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1MakeRefs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ; OpenBabel::OBStereo::Ref arg1 ; OpenBabel::OBStereo::Ref arg2 ; OpenBabel::OBStereo::Ref arg3 ;
  SwigValueWrapper< std::vector< unsigned long > > result; (void)jenv; (void)jcls; arg1 = (OpenBabel::OBStereo::Ref)jarg1; 
  arg2 = (OpenBabel::OBStereo::Ref)jarg2;  arg3 = (OpenBabel::OBStereo::Ref)jarg3; 
  result = OpenBabel::OBStereo::MakeRefs(arg1,arg2,arg3);
  *(OpenBabel::OBStereo::Refs **)&jresult = new OpenBabel::OBStereo::Refs((const OpenBabel::OBStereo::Refs &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1ContainsSameRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBStereo::Refs *arg1 = 0 ; OpenBabel::OBStereo::Refs *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; arg1 = *(OpenBabel::OBStereo::Refs **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereo::Refs const & reference is null");
    return 0; }   arg2 = *(OpenBabel::OBStereo::Refs **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereo::Refs const & reference is null");
    return 0; }  
  result = (bool)OpenBabel::OBStereo::ContainsSameRefs((std::vector< unsigned long > const &)*arg1,(std::vector< unsigned long > const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1ContainsRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBStereo::Refs *arg1 = 0 ; unsigned long arg2 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBStereo::Refs **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereo::Refs const & reference is null");
    return 0; }   arg2 = (unsigned long)jarg2; 
  result = (bool)OpenBabel::OBStereo::ContainsRef((std::vector< unsigned long > const &)*arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1NumInversions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ; OpenBabel::OBStereo::Refs *arg1 = 0 ; int result; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBStereo::Refs **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereo::Refs const & reference is null");
    return 0; }   result = (int)OpenBabel::OBStereo::NumInversions((std::vector< unsigned long > const &)*arg1);
  jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1Permutate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenBabel::OBStereo::Refs *arg1 = 0 ; unsigned int arg2 ; unsigned int arg3 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBStereo::Refs **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereo::Refs & reference is null"); return ; }  
  arg2 = (unsigned int)jarg2;  arg3 = (unsigned int)jarg3;  OpenBabel::OBStereo::Permutate(*arg1,arg2,arg3); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereo_1Permutated(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ; OpenBabel::OBStereo::Refs *arg1 = 0 ; unsigned int arg2 ; unsigned int arg3 ;
  SwigValueWrapper< std::vector< unsigned long > > result; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBStereo::Refs **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereo::Refs const & reference is null");
    return 0; }   arg2 = (unsigned int)jarg2;  arg3 = (unsigned int)jarg3; 
  result = OpenBabel::OBStereo::Permutated((std::vector< unsigned long > const &)*arg1,arg2,arg3);
  *(OpenBabel::OBStereo::Refs **)&jresult = new OpenBabel::OBStereo::Refs((const OpenBabel::OBStereo::Refs &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBStereo(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBStereo *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBStereo *)new OpenBabel::OBStereo();
  *(OpenBabel::OBStereo **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBStereo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBStereo *arg1 = (OpenBabel::OBStereo *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBStereo **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBStereoUnit_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBStereoUnit *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBStereoUnit *)new OpenBabel::OBStereoUnit(); *(OpenBabel::OBStereoUnit **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBStereoUnit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ; OpenBabel::OBStereo::Type arg1 ; unsigned long arg2 ; bool arg3 ; OpenBabel::OBStereoUnit *result = 0 ;
  (void)jenv; (void)jcls; arg1 = (OpenBabel::OBStereo::Type)jarg1;  arg2 = (unsigned long)jarg2;  arg3 = jarg3 ? true : false; 
  result = (OpenBabel::OBStereoUnit *)new OpenBabel::OBStereoUnit(arg1,arg2,arg3);
  *(OpenBabel::OBStereoUnit **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBStereoUnit_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBStereo::Type arg1 ; unsigned long arg2 ; OpenBabel::OBStereoUnit *result = 0 ; (void)jenv;
  (void)jcls; arg1 = (OpenBabel::OBStereo::Type)jarg1;  arg2 = (unsigned long)jarg2; 
  result = (OpenBabel::OBStereoUnit *)new OpenBabel::OBStereoUnit(arg1,arg2); *(OpenBabel::OBStereoUnit **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoUnit_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBStereoUnit *arg1 = (OpenBabel::OBStereoUnit *) 0 ; OpenBabel::OBStereo::Type arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBStereoUnit **)&jarg1;  arg2 = (OpenBabel::OBStereo::Type)jarg2; 
  if (arg1) (arg1)->type = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoUnit_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBStereoUnit *arg1 = (OpenBabel::OBStereoUnit *) 0 ; OpenBabel::OBStereo::Type result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBStereoUnit **)&jarg1; 
  result = (OpenBabel::OBStereo::Type) ((arg1)->type); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoUnit_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBStereoUnit *arg1 = (OpenBabel::OBStereoUnit *) 0 ; unsigned long arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBStereoUnit **)&jarg1;  arg2 = (unsigned long)jarg2;  if (arg1) (arg1)->id = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoUnit_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBStereoUnit *arg1 = (OpenBabel::OBStereoUnit *) 0 ; unsigned long result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBStereoUnit **)&jarg1;  result = (unsigned long) ((arg1)->id);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoUnit_1para_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBStereoUnit *arg1 = (OpenBabel::OBStereoUnit *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBStereoUnit **)&jarg1;  arg2 = jarg2 ? true : false;  if (arg1) (arg1)->para = arg2; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoUnit_1para_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBStereoUnit *arg1 = (OpenBabel::OBStereoUnit *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBStereoUnit **)&jarg1;  result = (bool) ((arg1)->para); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBStereoUnit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBStereoUnit *arg1 = (OpenBabel::OBStereoUnit *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBStereoUnit **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBStereoBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBStereoBase *arg1 = (OpenBabel::OBStereoBase *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBStereoBase **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoBase_1GetMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBStereoBase *arg1 = (OpenBabel::OBStereoBase *) 0 ; OpenBabel::OBMol *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBStereoBase **)&jarg1; 
  result = (OpenBabel::OBMol *)((OpenBabel::OBStereoBase const *)arg1)->GetMolecule(); *(OpenBabel::OBMol **)&jresult = result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoBase_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBStereoBase *arg1 = (OpenBabel::OBStereoBase *) 0 ; OpenBabel::OBStereo::Type result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBStereoBase **)&jarg1; 
  result = (OpenBabel::OBStereo::Type)((OpenBabel::OBStereoBase const *)arg1)->GetType(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoBase_1SetSpecified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBStereoBase *arg1 = (OpenBabel::OBStereoBase *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBStereoBase **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->SetSpecified(arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoBase_1IsSpecified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBStereoBase *arg1 = (OpenBabel::OBStereoBase *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBStereoBase **)&jarg1; 
  result = (bool)((OpenBabel::OBStereoBase const *)arg1)->IsSpecified(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBStereoFacade_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; OpenBabel::OBStereoFacade *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (OpenBabel::OBStereoFacade *)new OpenBabel::OBStereoFacade(arg1,arg2);
  *(OpenBabel::OBStereoFacade **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBStereoFacade_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBStereoFacade *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBStereoFacade *)new OpenBabel::OBStereoFacade(arg1); *(OpenBabel::OBStereoFacade **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoFacade_1NumTetrahedralStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBStereoFacade **)&jarg1; 
  result = (unsigned int)(arg1)->NumTetrahedralStereo(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoFacade_1GetAllTetrahedralStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBTetrahedralStereo * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBStereoFacade **)&jarg1;  result = (arg1)->GetAllTetrahedralStereo();
  *(std::vector< OpenBabel::OBTetrahedralStereo * > **)&jresult = new std::vector< OpenBabel::OBTetrahedralStereo * >((const std::vector< OpenBabel::OBTetrahedralStereo * > &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoFacade_1HasTetrahedralStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; unsigned long arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBStereoFacade **)&jarg1;  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->HasTetrahedralStereo(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoFacade_1GetTetrahedralStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; unsigned long arg2 ;
  OpenBabel::OBTetrahedralStereo *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBStereoFacade **)&jarg1;  arg2 = (unsigned long)jarg2; 
  result = (OpenBabel::OBTetrahedralStereo *)(arg1)->GetTetrahedralStereo(arg2);
  *(OpenBabel::OBTetrahedralStereo **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoFacade_1NumCisTransStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBStereoFacade **)&jarg1;  result = (unsigned int)(arg1)->NumCisTransStereo();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoFacade_1GetAllCisTransStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBCisTransStereo * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBStereoFacade **)&jarg1;  result = (arg1)->GetAllCisTransStereo();
  *(std::vector< OpenBabel::OBCisTransStereo * > **)&jresult = new std::vector< OpenBabel::OBCisTransStereo * >((const std::vector< OpenBabel::OBCisTransStereo * > &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoFacade_1HasCisTransStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; unsigned long arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBStereoFacade **)&jarg1;  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->HasCisTransStereo(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoFacade_1GetCisTransStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; unsigned long arg2 ;
  OpenBabel::OBCisTransStereo *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBStereoFacade **)&jarg1; 
  arg2 = (unsigned long)jarg2;  result = (OpenBabel::OBCisTransStereo *)(arg1)->GetCisTransStereo(arg2);
  *(OpenBabel::OBCisTransStereo **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoFacade_1NumSquarePlanarStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBStereoFacade **)&jarg1; 
  result = (unsigned int)(arg1)->NumSquarePlanarStereo(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoFacade_1GetAllSquarePlanarStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBSquarePlanarStereo * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBStereoFacade **)&jarg1;  result = (arg1)->GetAllSquarePlanarStereo();
  *(std::vector< OpenBabel::OBSquarePlanarStereo * > **)&jresult = new std::vector< OpenBabel::OBSquarePlanarStereo * >((const std::vector< OpenBabel::OBSquarePlanarStereo * > &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoFacade_1HasSquarePlanarStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; unsigned long arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBStereoFacade **)&jarg1;  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->HasSquarePlanarStereo(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoFacade_1GetSquarePlanarStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; unsigned long arg2 ;
  OpenBabel::OBSquarePlanarStereo *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBStereoFacade **)&jarg1;  arg2 = (unsigned long)jarg2; 
  result = (OpenBabel::OBSquarePlanarStereo *)(arg1)->GetSquarePlanarStereo(arg2);
  *(OpenBabel::OBSquarePlanarStereo **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBStereoFacade(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBStereoFacade *arg1 = (OpenBabel::OBStereoFacade *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBStereoFacade **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_PerceiveStereo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  OpenBabel::PerceiveStereo(arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_PerceiveStereo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  OpenBabel::PerceiveStereo(arg1); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_StereoFrom2D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *arg2 = (std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *) 0 ;
  bool arg3 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > **)&jarg2;  arg3 = jarg3 ? true : false; 
  OpenBabel::StereoFrom2D(arg1,arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_StereoFrom2D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *arg2 = (std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > **)&jarg2; 
  OpenBabel::StereoFrom2D(arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_StereoFrom2D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  OpenBabel::StereoFrom2D(arg1); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_StereoFrom3D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = jarg2 ? true : false;  OpenBabel::StereoFrom3D(arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_StereoFrom3D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  OpenBabel::StereoFrom3D(arg1); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_StereoFrom0D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  OpenBabel::StereoFrom0D(arg1); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_TetrahedralFrom3D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBStereoUnitSet *arg2 = 0 ; bool arg3 ;
  SwigValueWrapper< std::vector< OpenBabel::OBTetrahedralStereo * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBStereoUnitSet **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereoUnitSet const & reference is null");
    return 0; }   arg3 = jarg3 ? true : false; 
  result = OpenBabel::TetrahedralFrom3D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2,arg3);
  *(std::vector< OpenBabel::OBTetrahedralStereo * > **)&jresult = new std::vector< OpenBabel::OBTetrahedralStereo * >((const std::vector< OpenBabel::OBTetrahedralStereo * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_TetrahedralFrom3D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBStereoUnitSet *arg2 = 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBTetrahedralStereo * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBStereoUnitSet **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereoUnitSet const & reference is null");
    return 0; }   result = OpenBabel::TetrahedralFrom3D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2);
  *(std::vector< OpenBabel::OBTetrahedralStereo * > **)&jresult = new std::vector< OpenBabel::OBTetrahedralStereo * >((const std::vector< OpenBabel::OBTetrahedralStereo * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_TetrahedralFrom2D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBStereoUnitSet *arg2 = 0 ; bool arg3 ;
  SwigValueWrapper< std::vector< OpenBabel::OBTetrahedralStereo * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBStereoUnitSet **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereoUnitSet const & reference is null");
    return 0; }   arg3 = jarg3 ? true : false; 
  result = OpenBabel::TetrahedralFrom2D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2,arg3);
  *(std::vector< OpenBabel::OBTetrahedralStereo * > **)&jresult = new std::vector< OpenBabel::OBTetrahedralStereo * >((const std::vector< OpenBabel::OBTetrahedralStereo * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_TetrahedralFrom2D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBStereoUnitSet *arg2 = 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBTetrahedralStereo * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBStereoUnitSet **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereoUnitSet const & reference is null");
    return 0; }   result = OpenBabel::TetrahedralFrom2D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2);
  *(std::vector< OpenBabel::OBTetrahedralStereo * > **)&jresult = new std::vector< OpenBabel::OBTetrahedralStereo * >((const std::vector< OpenBabel::OBTetrahedralStereo * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_TetrahedralFrom0D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBStereoUnitSet *arg2 = 0 ; bool arg3 ;
  SwigValueWrapper< std::vector< OpenBabel::OBTetrahedralStereo * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBStereoUnitSet **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereoUnitSet const & reference is null");
    return 0; }   arg3 = jarg3 ? true : false; 
  result = OpenBabel::TetrahedralFrom0D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2,arg3);
  *(std::vector< OpenBabel::OBTetrahedralStereo * > **)&jresult = new std::vector< OpenBabel::OBTetrahedralStereo * >((const std::vector< OpenBabel::OBTetrahedralStereo * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_TetrahedralFrom0D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBStereoUnitSet *arg2 = 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBTetrahedralStereo * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBStereoUnitSet **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereoUnitSet const & reference is null");
    return 0; }   result = OpenBabel::TetrahedralFrom0D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2);
  *(std::vector< OpenBabel::OBTetrahedralStereo * > **)&jresult = new std::vector< OpenBabel::OBTetrahedralStereo * >((const std::vector< OpenBabel::OBTetrahedralStereo * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_CisTransFrom3D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBStereoUnitSet *arg2 = 0 ; bool arg3 ;
  SwigValueWrapper< std::vector< OpenBabel::OBCisTransStereo * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBStereoUnitSet **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereoUnitSet const & reference is null");
    return 0; }   arg3 = jarg3 ? true : false; 
  result = OpenBabel::CisTransFrom3D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2,arg3);
  *(std::vector< OpenBabel::OBCisTransStereo * > **)&jresult = new std::vector< OpenBabel::OBCisTransStereo * >((const std::vector< OpenBabel::OBCisTransStereo * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_CisTransFrom3D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBStereoUnitSet *arg2 = 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBCisTransStereo * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBStereoUnitSet **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereoUnitSet const & reference is null");
    return 0; }   result = OpenBabel::CisTransFrom3D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2);
  *(std::vector< OpenBabel::OBCisTransStereo * > **)&jresult = new std::vector< OpenBabel::OBCisTransStereo * >((const std::vector< OpenBabel::OBCisTransStereo * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_CisTransFrom2D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBStereoUnitSet *arg2 = 0 ;
  std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *arg3 = (std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *) 0 ;
  bool arg4 ; SwigValueWrapper< std::vector< OpenBabel::OBCisTransStereo * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBStereoUnitSet **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereoUnitSet const & reference is null");
    return 0; }   arg3 = *(std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = OpenBabel::CisTransFrom2D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2,(std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > const *)arg3,arg4);
  *(std::vector< OpenBabel::OBCisTransStereo * > **)&jresult = new std::vector< OpenBabel::OBCisTransStereo * >((const std::vector< OpenBabel::OBCisTransStereo * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_CisTransFrom2D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBStereoUnitSet *arg2 = 0 ;
  std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *arg3 = (std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBCisTransStereo * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBStereoUnitSet **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereoUnitSet const & reference is null");
    return 0; }   arg3 = *(std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > **)&jarg3; 
  result = OpenBabel::CisTransFrom2D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2,(std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > const *)arg3);
  *(std::vector< OpenBabel::OBCisTransStereo * > **)&jresult = new std::vector< OpenBabel::OBCisTransStereo * >((const std::vector< OpenBabel::OBCisTransStereo * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_CisTransFrom2D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBStereoUnitSet *arg2 = 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBCisTransStereo * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBStereoUnitSet **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereoUnitSet const & reference is null");
    return 0; }   result = OpenBabel::CisTransFrom2D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2);
  *(std::vector< OpenBabel::OBCisTransStereo * > **)&jresult = new std::vector< OpenBabel::OBCisTransStereo * >((const std::vector< OpenBabel::OBCisTransStereo * > &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_TetStereoToWedgeHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBMol *arg1 = 0 ;
  std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > *arg2 = 0 ;
  std::map< OpenBabel::OBBond *,OpenBabel::OBStereo::Ref > *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg2 = *(std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< OpenBabel::OBBond *,enum OpenBabel::OBStereo::BondDirection > & reference is null");
    return 0; }   arg3 = *(std::map< OpenBabel::OBBond *,OpenBabel::OBStereo::Ref > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< OpenBabel::OBBond *,OpenBabel::OBStereo::Ref > & reference is null");
    return 0; }   result = (bool)OpenBabel::TetStereoToWedgeHash(*arg1,*arg2,*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_GetUnspecifiedCisTrans(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = 0 ; SwigValueWrapper< std::set< OpenBabel::OBBond * > > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = OpenBabel::GetUnspecifiedCisTrans(*arg1);
  *(std::set< OpenBabel::OBBond * > **)&jresult = new std::set< OpenBabel::OBBond * >((const std::set< OpenBabel::OBBond * > &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_StereoRefToImplicit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = 0 ; OpenBabel::OBStereo::Ref arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  arg2 = (OpenBabel::OBStereo::Ref)jarg2;  OpenBabel::StereoRefToImplicit(*arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_ImplicitRefToStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OpenBabel::OBMol *arg1 = 0 ; OpenBabel::OBStereo::Ref arg2 ; OpenBabel::OBStereo::Ref arg3 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  arg2 = (OpenBabel::OBStereo::Ref)jarg2;  arg3 = (OpenBabel::OBStereo::Ref)jarg3; 
  OpenBabel::ImplicitRefToStereo(*arg1,arg2,arg3); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_CisTransFrom0D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBStereoUnitSet *arg2 = 0 ; bool arg3 ;
  SwigValueWrapper< std::vector< OpenBabel::OBCisTransStereo * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBStereoUnitSet **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereoUnitSet const & reference is null");
    return 0; }   arg3 = jarg3 ? true : false; 
  result = OpenBabel::CisTransFrom0D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2,arg3);
  *(std::vector< OpenBabel::OBCisTransStereo * > **)&jresult = new std::vector< OpenBabel::OBCisTransStereo * >((const std::vector< OpenBabel::OBCisTransStereo * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_CisTransFrom0D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBStereoUnitSet *arg2 = 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBCisTransStereo * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(OpenBabel::OBStereoUnitSet **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereoUnitSet const & reference is null");
    return 0; }   result = OpenBabel::CisTransFrom0D(arg1,(std::vector< OpenBabel::OBStereoUnit > const &)*arg2);
  *(std::vector< OpenBabel::OBCisTransStereo * > **)&jresult = new std::vector< OpenBabel::OBCisTransStereo * >((const std::vector< OpenBabel::OBCisTransStereo * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_FindStereogenicUnits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBStereoUnit > > result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = *(std::vector< unsigned int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > const & reference is null");
    return 0; }   result = OpenBabel::FindStereogenicUnits(arg1,(std::vector< unsigned int > const &)*arg2);
  *(OpenBabel::OBStereoUnitSet **)&jresult = new OpenBabel::OBStereoUnitSet((const OpenBabel::OBStereoUnitSet &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_FindStereogenicUnits_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; std::vector< unsigned int > *arg2 = 0 ;
  OpenBabel::Automorphisms *arg3 = 0 ; SwigValueWrapper< std::vector< OpenBabel::OBStereoUnit > > result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector< unsigned int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > const & reference is null");
    return 0; }   arg3 = *(OpenBabel::Automorphisms **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::Automorphisms const & reference is null");
    return 0; }  
  result = OpenBabel::FindStereogenicUnits(arg1,(std::vector< unsigned int > const &)*arg2,(std::vector< std::vector< std::pair< unsigned int,unsigned int > > > const &)*arg3);
  *(OpenBabel::OBStereoUnitSet **)&jresult = new OpenBabel::OBStereoUnitSet((const OpenBabel::OBStereoUnitSet &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBRotorRule(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; int *arg2 ; std::vector< double > *arg3 = 0 ; double arg4 ;
  OpenBabel::OBRotorRule *result = 0 ; (void)jenv; (void)jcls; (void)jarg3_; arg1 = 0; if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; }  arg2 = *(int **)&jarg2; 
  arg3 = *(std::vector< double > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null"); return 0; }  
  arg4 = (double)jarg4;  result = (OpenBabel::OBRotorRule *)new OpenBabel::OBRotorRule(arg1,arg2,*arg3,arg4);
  *(OpenBabel::OBRotorRule **)&jresult = result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBRotorRule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRotorRule *arg1 = (OpenBabel::OBRotorRule *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBRotorRule **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorRule_1IsValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBRotorRule *arg1 = (OpenBabel::OBRotorRule *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRotorRule **)&jarg1;  result = (bool)(arg1)->IsValid(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorRule_1GetReferenceAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBRotorRule *arg1 = (OpenBabel::OBRotorRule *) 0 ; int *arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotorRule **)&jarg1;  arg2 = *(int **)&jarg2;  (arg1)->GetReferenceAtoms(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorRule_1SetDelta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBRotorRule *arg1 = (OpenBabel::OBRotorRule *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotorRule **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetDelta(arg2); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorRule_1GetDelta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBRotorRule *arg1 = (OpenBabel::OBRotorRule *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRotorRule **)&jarg1;  result = (double)(arg1)->GetDelta(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorRule_1GetTorsionVals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotorRule *arg1 = (OpenBabel::OBRotorRule *) 0 ; std::vector< double > *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotorRule **)&jarg1; 
  result = (std::vector< double > *) &(arg1)->GetTorsionVals(); *(std::vector< double > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorRule_1GetSmartsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotorRule *arg1 = (OpenBabel::OBRotorRule *) 0 ; std::string *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotorRule **)&jarg1;  result = (std::string *) &(arg1)->GetSmartsString();
  *(std::string **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorRule_1GetSmartsPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotorRule *arg1 = (OpenBabel::OBRotorRule *) 0 ; OpenBabel::OBSmartsPattern *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotorRule **)&jarg1; 
  result = (OpenBabel::OBSmartsPattern *)(arg1)->GetSmartsPattern(); *(OpenBabel::OBSmartsPattern **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBRotorRules(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBRotorRules *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBRotorRules *)new OpenBabel::OBRotorRules(); *(OpenBabel::OBRotorRules **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBRotorRules(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRotorRules *arg1 = (OpenBabel::OBRotorRules *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBRotorRules **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorRules_1SetFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBRotorRules *arg1 = (OpenBabel::OBRotorRules *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotorRules **)&jarg1;  arg2 = *(std::string **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return ; }  
  (arg1)->SetFilename(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorRules_1GetRotorIncrements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6) {
  OpenBabel::OBRotorRules *arg1 = (OpenBabel::OBRotorRules *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; int *arg4 ; std::vector< double > *arg5 = 0 ; double *arg6 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg5_; arg1 = *(OpenBabel::OBRotorRules **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  arg3 = *(OpenBabel::OBBond **)&jarg3;  arg4 = *(int **)&jarg4;  arg5 = *(std::vector< double > **)&jarg5; if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null"); return ; }  
  arg6 = *(double **)&jarg6; if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null"); return ; }  
  (arg1)->GetRotorIncrements(*arg2,arg3,arg4,*arg5,*arg6); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorRules_1Quiet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBRotorRules *arg1 = (OpenBabel::OBRotorRules *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotorRules **)&jarg1;  (arg1)->Quiet(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBRotor(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBRotor *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBRotor *)new OpenBabel::OBRotor();
  *(OpenBabel::OBRotor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBRotor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; (void)jenv; (void)jcls; arg1 = *(OpenBabel::OBRotor **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1SetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (arg1)->SetBond(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1SetRings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotor **)&jarg1;  (arg1)->SetRings(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetIdx(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1SetDihedralAtoms_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; std::vector< int > *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(std::vector< int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null"); return ; }  
  (arg1)->SetDihedralAtoms(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1SetDihedralAtoms_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; int *arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(int **)&jarg2;  (arg1)->SetDihedralAtoms(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1SetRotAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; std::vector< int > *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(std::vector< int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null"); return ; }  
  (arg1)->SetRotAtoms(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1SetTorsionValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; std::vector< double > *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(std::vector< double > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null"); return ; }  
  (arg1)->SetTorsionValues(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1SetFixedBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; OpenBabel::OBBitVec *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(OpenBabel::OBBitVec **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null"); return ; }  
  (arg1)->SetFixedBonds(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1SetToAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; double *arg2 = (double *) 0 ; double arg3 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = (double)jarg3; 
  (arg1)->SetToAngle(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1SetRotor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; double *arg2 = (double *) 0 ; int arg3 ; int arg4 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = (int)jarg3; 
  arg4 = (int)jarg4;  (arg1)->SetRotor(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1SetRotor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; double *arg2 = (double *) 0 ; int arg3 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = (int)jarg3; 
  (arg1)->SetRotor(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1Set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; double *arg2 = (double *) 0 ; double arg3 ; double arg4 ; double arg5 ;
  double arg6 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(double **)&jarg2; 
  arg3 = (double)jarg3;  arg4 = (double)jarg4;  arg5 = (double)jarg5;  arg6 = (double)jarg6; 
  (arg1)->Set(arg2,arg3,arg4,arg5,arg6); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1Precompute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; double *arg2 = (double *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(double **)&jarg2;  (arg1)->Precompute(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1Set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; double *arg2 = (double *) 0 ; int arg3 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = (int)jarg3;  (arg1)->Set(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1Precalc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; std::vector< double * > *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(std::vector< double * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double * > & reference is null"); return ; }  
  (arg1)->Precalc(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1Set_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; double *arg2 = (double *) 0 ; int arg3 ; int arg4 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(double **)&jarg2;  arg3 = (int)jarg3; 
  arg4 = (int)jarg4;  (arg1)->Set(arg2,arg3,arg4); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; OpenBabel::OBBond *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  result = (OpenBabel::OBBond *)(arg1)->GetBond();
  *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1Size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; size_t result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotor **)&jarg1;  result = (arg1)->Size(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotor **)&jarg1;  result = (int)((OpenBabel::OBRotor const *)arg1)->GetIdx(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1GetDihedralAtoms_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; int *arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(int **)&jarg2;  (arg1)->GetDihedralAtoms(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1GetDihedralAtoms_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; std::vector< int > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  result = (std::vector< int > *) &(arg1)->GetDihedralAtoms();
  *(std::vector< int > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1GetTorsionValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; std::vector< double > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1; 
  result = (std::vector< double > *) &((OpenBabel::OBRotor const *)arg1)->GetTorsionValues();
  *(std::vector< double > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1GetFixedBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; OpenBabel::OBBitVec *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  result = (OpenBabel::OBBitVec *) &(arg1)->GetFixedBonds();
  *(OpenBabel::OBBitVec **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1CalcTorsion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; double *arg2 = (double *) 0 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(double **)&jarg2; 
  result = (double)(arg1)->CalcTorsion(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1CalcBondLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; double *arg2 = (double *) 0 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(double **)&jarg2; 
  result = (double)(arg1)->CalcBondLength(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1BeginTorIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  SwigValueWrapper< std::vector< double >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotor **)&jarg1;  result = (arg1)->BeginTorIncrement();
  *(std::vector< double >::iterator **)&jresult = new std::vector< double >::iterator((const std::vector< double >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1EndTorIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ;
  SwigValueWrapper< std::vector< double >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotor **)&jarg1;  result = (arg1)->EndTorIncrement();
  *(std::vector< double >::iterator **)&jresult = new std::vector< double >::iterator((const std::vector< double >::iterator &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1RemoveSymTorsionValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = (int)jarg2;  (arg1)->RemoveSymTorsionValues(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1SetDelta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetDelta(arg2); }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1GetDelta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  result = (double)(arg1)->GetDelta(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1GetFixedAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; OpenBabel::OBBitVec *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  result = (OpenBabel::OBBitVec *) &(arg1)->GetFixedAtoms();
  *(OpenBabel::OBBitVec **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1SetFixedAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; OpenBabel::OBBitVec *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(OpenBabel::OBBitVec **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null"); return ; }  
  (arg1)->SetFixedAtoms(*arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1GetEvalAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; OpenBabel::OBBitVec *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  result = (OpenBabel::OBBitVec *) &(arg1)->GetEvalAtoms();
  *(OpenBabel::OBBitVec **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1SetEvalAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; OpenBabel::OBBitVec *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = *(OpenBabel::OBBitVec **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null"); return ; }  
  (arg1)->SetEvalAtoms(*arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1GetRotAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; void *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  result = (void *)(arg1)->GetRotAtoms(); *(void **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1GetResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; std::vector< double > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotor **)&jarg1;  result = (std::vector< double > *) &(arg1)->GetResolution();
  *(std::vector< double > **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotor_1SetNumCoords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBRotor *arg1 = (OpenBabel::OBRotor *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotor **)&jarg1;  arg2 = (int)jarg2;  (arg1)->SetNumCoords(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBRotorList(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBRotorList *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBRotorList *)new OpenBabel::OBRotorList();
  *(OpenBabel::OBRotorList **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBRotorList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBRotorList **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotorList **)&jarg1;  (arg1)->Clear(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1Size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; size_t result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRotorList **)&jarg1;  result = (arg1)->Size(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1IsFixedBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBRotorList **)&jarg1;  arg2 = *(OpenBabel::OBBond **)&jarg2;  result = (bool)(arg1)->IsFixedBond(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1HasFixedBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRotorList **)&jarg1;  result = (bool)(arg1)->HasFixedBonds(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1RemoveSymVals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; OpenBabel::OBMol *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRotorList **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  (arg1)->RemoveSymVals(*arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1HasRingRotors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRotorList **)&jarg1;  result = (bool)(arg1)->HasRingRotors(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1Setup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; OpenBabel::OBMol *arg2 = 0 ; bool arg3 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRotorList **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = jarg3 ? true : false;  result = (bool)(arg1)->Setup(*arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1Setup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; OpenBabel::OBMol *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRotorList **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->Setup(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1SetFixedBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; OpenBabel::OBBitVec *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRotorList **)&jarg1;  arg2 = *(OpenBabel::OBBitVec **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null"); return ; }  
  (arg1)->SetFixedBonds(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotorList **)&jarg1;  arg2 = *(std::string **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return ; }  
  (arg1)->Init(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1SetQuiet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotorList **)&jarg1;  (arg1)->SetQuiet(); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1SetRotAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; OpenBabel::OBMol *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRotorList **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->SetRotAtoms(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1FindRotors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; OpenBabel::OBMol *arg2 = 0 ; bool arg3 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRotorList **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  arg3 = jarg3 ? true : false;  result = (bool)(arg1)->FindRotors(*arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1FindRotors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; OpenBabel::OBMol *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRotorList **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->FindRotors(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1SetEvalAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; OpenBabel::OBMol *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRotorList **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->SetEvalAtoms(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1AssignTorVals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; OpenBabel::OBMol *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRotorList **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->AssignTorVals(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1BeginRotor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; OpenBabel::OBRotorIterator *arg2 = 0 ;
  OpenBabel::OBRotor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotorList **)&jarg1; 
  arg2 = *(OpenBabel::OBRotorIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBRotorIterator & reference is null"); return 0; }
    result = (OpenBabel::OBRotor *)(arg1)->BeginRotor(*arg2); *(OpenBabel::OBRotor **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1NextRotor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; OpenBabel::OBRotorIterator *arg2 = 0 ;
  OpenBabel::OBRotor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotorList **)&jarg1; 
  arg2 = *(OpenBabel::OBRotorIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBRotorIterator & reference is null"); return 0; }
    result = (OpenBabel::OBRotor *)(arg1)->NextRotor(*arg2); *(OpenBabel::OBRotor **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1BeginRotors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBRotor * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotorList **)&jarg1;  result = (arg1)->BeginRotors();
  *(OpenBabel::OBRotorIterator **)&jresult = new OpenBabel::OBRotorIterator((const OpenBabel::OBRotorIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1EndRotors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBRotor * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotorList **)&jarg1;  result = (arg1)->EndRotors();
  *(OpenBabel::OBRotorIterator **)&jresult = new OpenBabel::OBRotorIterator((const OpenBabel::OBRotorIterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1IdentifyEvalAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; OpenBabel::OBMol *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRotorList **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (bool)(arg1)->IdentifyEvalAtoms(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1SetFixAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; OpenBabel::OBBitVec *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRotorList **)&jarg1;  arg2 = *(OpenBabel::OBBitVec **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null"); return ; }  
  (arg1)->SetFixAtoms(*arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1HasFixedAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRotorList **)&jarg1;  result = (bool)(arg1)->HasFixedAtoms(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1IgnoreSymmetryRemoval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotorList **)&jarg1;  (arg1)->IgnoreSymmetryRemoval(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorList_1SetRotAtomsByFix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRotorList *arg1 = (OpenBabel::OBRotorList *) 0 ; OpenBabel::OBMol *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRotorList **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  (arg1)->SetRotAtomsByFix(*arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1rotor_1digit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; unsigned int arg1 ; OpenBabel::rotor_digit *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (unsigned int)jarg1;  result = (OpenBabel::rotor_digit *)new OpenBabel::rotor_digit(arg1);
  *(OpenBabel::rotor_digit **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1rotor_1digit_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::rotor_digit *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::rotor_digit *)new OpenBabel::rotor_digit(); *(OpenBabel::rotor_digit **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_rotor_1digit_1set_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::rotor_digit *arg1 = (OpenBabel::rotor_digit *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::rotor_digit **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->set_size(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_rotor_1digit_1set_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::rotor_digit *arg1 = (OpenBabel::rotor_digit *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::rotor_digit **)&jarg1;  arg2 = (int)jarg2;  (arg1)->set_state(arg2); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_rotor_1digit_1get_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::rotor_digit *arg1 = (OpenBabel::rotor_digit *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::rotor_digit **)&jarg1;  result = (int)(arg1)->get_state(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_rotor_1digit_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::rotor_digit *arg1 = (OpenBabel::rotor_digit *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::rotor_digit **)&jarg1;  result = (unsigned int)(arg1)->size(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_rotor_1digit_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::rotor_digit *arg1 = (OpenBabel::rotor_digit *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::rotor_digit **)&jarg1;  result = (bool)(arg1)->next(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1rotor_1digit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::rotor_digit *arg1 = (OpenBabel::rotor_digit *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::rotor_digit **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBRotorKeys(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OpenBabel::OBRotorKeys *result = 0 ; (void)jenv; (void)jcls; result = (OpenBabel::OBRotorKeys *)new OpenBabel::OBRotorKeys();
  *(OpenBabel::OBRotorKeys **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorKeys_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBRotorKeys *arg1 = (OpenBabel::OBRotorKeys *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotorKeys **)&jarg1;  (arg1)->Clear(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorKeys_1NumKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotorKeys *arg1 = (OpenBabel::OBRotorKeys *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRotorKeys **)&jarg1;  result = (unsigned int)(arg1)->NumKeys(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorKeys_1AddRotor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBRotorKeys *arg1 = (OpenBabel::OBRotorKeys *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotorKeys **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->AddRotor(arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorKeys_1Next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBRotorKeys *arg1 = (OpenBabel::OBRotorKeys *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRotorKeys **)&jarg1;  result = (bool)(arg1)->Next(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorKeys_1GetKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotorKeys *arg1 = (OpenBabel::OBRotorKeys *) 0 ; std::vector< int > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotorKeys **)&jarg1;  result = (arg1)->GetKey();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBRotorKeys(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRotorKeys *arg1 = (OpenBabel::OBRotorKeys *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBRotorKeys **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBRotamerList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBRotamerList *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBRotamerList *)new OpenBabel::OBRotamerList(); *(OpenBabel::OBRotamerList **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBRotamerList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBRotamerList **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1Setup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBRotorList *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(OpenBabel::OBRotamerList **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  arg3 = *(OpenBabel::OBRotorList **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBRotorList & reference is null"); return ; }  
  (arg1)->Setup(*arg2,*arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1Setup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ; int arg4 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBRotamerList **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  arg3 = *(unsigned char **)&jarg3;  arg4 = (int)jarg4;  (arg1)->Setup(*arg2,arg3,arg4); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1NumRotors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotamerList **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBRotamerList const *)arg1)->NumRotors(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1NumRotamers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotamerList **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBRotamerList const *)arg1)->NumRotamers(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1AddRotamer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; double *arg2 = (double *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRotamerList **)&jarg1;  arg2 = *(double **)&jarg2;  (arg1)->AddRotamer(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1AddRotamer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; int *arg2 = (int *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBRotamerList **)&jarg1;  arg2 = *(int **)&jarg2;  (arg1)->AddRotamer(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1AddRotamer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; std::vector< int > arg2 ; std::vector< int > *argp2 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRotamerList **)&jarg1; 
  argp2 = *(std::vector< int > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >"); return ; } 
  arg2 = *argp2;  (arg1)->AddRotamer(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1AddRotamer_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotamerList **)&jarg1;  arg2 = *(unsigned char **)&jarg2; 
  (arg1)->AddRotamer(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1AddRotamers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotamerList **)&jarg1;  arg2 = *(unsigned char **)&jarg2; 
  arg3 = (int)jarg3;  (arg1)->AddRotamers(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1GetReferenceArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotamerList **)&jarg1;  arg2 = *(unsigned char **)&jarg2; 
  ((OpenBabel::OBRotamerList const *)arg1)->GetReferenceArray(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1BeginRotamer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ;
  SwigValueWrapper< std::vector< unsigned char * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotamerList **)&jarg1;  result = (arg1)->BeginRotamer();
  *(std::vector< unsigned char * >::iterator **)&jresult = new std::vector< unsigned char * >::iterator((const std::vector< unsigned char * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1EndRotamer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ;
  SwigValueWrapper< std::vector< unsigned char * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotamerList **)&jarg1;  result = (arg1)->EndRotamer();
  *(std::vector< unsigned char * >::iterator **)&jresult = new std::vector< unsigned char * >::iterator((const std::vector< unsigned char * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1CreateConformerList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  SwigValueWrapper< std::vector< double * > > result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBRotamerList **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  result = (arg1)->CreateConformerList(*arg2);
  *(std::vector< double * > **)&jresult = new std::vector< double * >((const std::vector< double * > &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1ExpandConformerList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  std::vector< double * > *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBRotamerList **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  arg3 = *(std::vector< double * > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double * > & reference is null"); return ; }  
  (arg1)->ExpandConformerList(*arg2,*arg3); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1SetCurrentCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; OpenBabel::OBMol *arg2 = 0 ;
  std::vector< int > arg3 ; std::vector< int > *argp3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; arg1 = *(OpenBabel::OBRotamerList **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return 0; }  
  argp3 = *(std::vector< int > **)&jarg3;  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >"); return 0; } 
  arg3 = *argp3;  result = (bool)(arg1)->SetCurrentCoordinates(*arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1SetBaseCoordinateSets_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; OpenBabel::OBMol *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBRotamerList **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null"); return ; }  
  (arg1)->SetBaseCoordinateSets(*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1SetBaseCoordinateSets_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; SwigValueWrapper< std::vector< double * > > arg2 ;
  unsigned int arg3 ; std::vector< double * > *argp2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBRotamerList **)&jarg1;  argp2 = *(std::vector< double * > **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double * >");
    return ; }  arg2 = *argp2;  arg3 = (unsigned int)jarg3;  (arg1)->SetBaseCoordinateSets(arg2,arg3); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1NumBaseCoordinateSets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotamerList **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBRotamerList const *)arg1)->NumBaseCoordinateSets(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1GetBaseCoordinateSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; unsigned int arg2 ; double *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotamerList **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (double *)((OpenBabel::OBRotamerList const *)arg1)->GetBaseCoordinateSet(arg2); *(double **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1NumAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBRotamerList *arg1 = (OpenBabel::OBRotamerList *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBRotamerList **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBRotamerList const *)arg1)->NumAtoms(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_N_1PROPERTIES_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(4); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBSpectrophore_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBSpectrophore *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBSpectrophore *)new OpenBabel::OBSpectrophore(); *(OpenBabel::OBSpectrophore **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBSpectrophore_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSpectrophore *arg1 = 0 ; OpenBabel::OBSpectrophore *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBSpectrophore **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBSpectrophore const & reference is null");
    return 0; }   result = (OpenBabel::OBSpectrophore *)new OpenBabel::OBSpectrophore((OpenBabel::OBSpectrophore const &)*arg1);
  *(OpenBabel::OBSpectrophore **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBSpectrophore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBSpectrophore **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSpectrophore_1SetResolution_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSpectrophore **)&jarg1;  arg2 = (double)jarg2;  (arg1)->SetResolution(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSpectrophore_1SetResolution_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSpectrophore **)&jarg1;  (arg1)->SetResolution(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSpectrophore_1SetAccuracy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; OpenBabel::OBSpectrophore::AccuracyOption arg2 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSpectrophore **)&jarg1; 
  arg2 = (OpenBabel::OBSpectrophore::AccuracyOption)jarg2;  (arg1)->SetAccuracy(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSpectrophore_1SetAccuracy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSpectrophore **)&jarg1;  (arg1)->SetAccuracy(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSpectrophore_1SetStereo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; OpenBabel::OBSpectrophore::StereoOption arg2 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSpectrophore **)&jarg1; 
  arg2 = (OpenBabel::OBSpectrophore::StereoOption)jarg2;  (arg1)->SetStereo(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSpectrophore_1SetStereo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSpectrophore **)&jarg1;  (arg1)->SetStereo(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSpectrophore_1SetNormalization_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; OpenBabel::OBSpectrophore::NormalizationOption arg2 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSpectrophore **)&jarg1; 
  arg2 = (OpenBabel::OBSpectrophore::NormalizationOption)jarg2;  (arg1)->SetNormalization(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSpectrophore_1SetNormalization_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSpectrophore **)&jarg1;  (arg1)->SetNormalization(); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSpectrophore_1GetAccuracy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ;
  OpenBabel::OBSpectrophore::AccuracyOption result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSpectrophore **)&jarg1; 
  result = (OpenBabel::OBSpectrophore::AccuracyOption)((OpenBabel::OBSpectrophore const *)arg1)->GetAccuracy();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSpectrophore_1GetResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSpectrophore **)&jarg1; 
  result = (double)((OpenBabel::OBSpectrophore const *)arg1)->GetResolution(); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSpectrophore_1GetStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ;
  OpenBabel::OBSpectrophore::StereoOption result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSpectrophore **)&jarg1; 
  result = (OpenBabel::OBSpectrophore::StereoOption)((OpenBabel::OBSpectrophore const *)arg1)->GetStereo();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSpectrophore_1GetNormalization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ;
  OpenBabel::OBSpectrophore::NormalizationOption result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSpectrophore **)&jarg1; 
  result = (OpenBabel::OBSpectrophore::NormalizationOption)((OpenBabel::OBSpectrophore const *)arg1)->GetNormalization();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSpectrophore_1GetSpectrophore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBSpectrophore *arg1 = (OpenBabel::OBSpectrophore *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ; std::vector< double > result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBSpectrophore **)&jarg1;  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  result = (arg1)->GetSpectrophore(arg2);
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolAtomIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBMolAtomIter *)new OpenBabel::OBMolAtomIter(); *(OpenBabel::OBMolAtomIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolAtomIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBMolAtomIter *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolAtomIter *)new OpenBabel::OBMolAtomIter(arg1); *(OpenBabel::OBMolAtomIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolAtomIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = 0 ; OpenBabel::OBMolAtomIter *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolAtomIter const & reference is null");
    return 0; }   result = (OpenBabel::OBMolAtomIter *)new OpenBabel::OBMolAtomIter((OpenBabel::OBMolAtomIter const &)*arg1);
  *(OpenBabel::OBMolAtomIter **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBMolAtomIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1HasMore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)((OpenBabel::OBMolAtomIter const *)arg1)->operator bool(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1inc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::OBMolAtomIter *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (OpenBabel::OBMolAtomIter *) &(arg1)->operator ++(); *(OpenBabel::OBMolAtomIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1inc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; int arg2 ;
  OpenBabel::OBMolAtomIter result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2;  result = (arg1)->operator ++(arg2);
  *(OpenBabel::OBMolAtomIter **)&jresult = new OpenBabel::OBMolAtomIter((const OpenBabel::OBMolAtomIter &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMolAtomIter const *)arg1)->operator ->();
  *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *) &((OpenBabel::OBMolAtomIter const *)arg1)->operator *();
  *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = jarg2 ? true : false;  if (arg1) (*arg1)->Visit = arg2; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool) ((*arg1)->Visit); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1Duplicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  (*arg1)->Duplicate(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetIdx(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned long arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (unsigned long)jarg2;  (*arg1)->SetId(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetHyb(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetAtomicNum(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->SetIsotope(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetImplicitHCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->SetImplicitHCount(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetFormalCharge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; short arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (short)jarg2;  (*arg1)->SetSpinMultiplicity(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (*arg1)->SetType((std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (double)jarg2;  (*arg1)->SetPartialCharge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::vector3 *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return ; }  
  (*arg1)->SetVector((OpenBabel::vector3 const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; double arg2 ; double arg3 ; double arg4 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  arg4 = (double)jarg4;  (*arg1)->SetVector(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  (*arg1)->SetVector(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; double **arg2 = (double **) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = *(double ***)&jarg2;  (*arg1)->SetCoordPtr(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2;  (*arg1)->SetResidue(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;  (*arg1)->SetParent(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetAromatic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetAromatic(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetAromatic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  (*arg1)->SetAromatic(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetInRing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetInRing(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetInRing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  (*arg1)->SetInRing(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1ClearCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  (*arg1)->ClearCoordPtr(); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (int)(*arg1)->GetFormalCharge(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetAtomicNum();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned short result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned short)(*arg1)->GetIsotope();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (int)(*arg1)->GetSpinMultiplicity();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetAtomicMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (double)(*arg1)->GetAtomicMass();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetExactMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (double)(*arg1)->GetExactMass();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetIndex();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned long result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned long)(*arg1)->GetId();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetCoordinateIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetCoordinateIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetExplicitDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetExplicitDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetTotalDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetTotalDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetExplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetExplicitValence();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetTotalValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetTotalValence();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetHyb();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jshort JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetImplicitHCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned char result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned char)(*arg1)->GetImplicitHCount();
  jresult = (jshort)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetHvyDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetHvyDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetHeteroDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetHeteroDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (char *)(*arg1)->GetType();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (double)(*arg1)->GetX(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (double)(*arg1)->GetY(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (double)(*arg1)->GetZ(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (double)(*arg1)->x(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (double)(*arg1)->y(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (double)(*arg1)->z(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; double *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (double *)(*arg1)->GetCoordinate();
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::vector3 *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (OpenBabel::vector3 *) &(*arg1)->GetVector(); *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (double)(*arg1)->GetPartialCharge();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::OBResidue *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)(*arg1)->GetResidue(); *(OpenBabel::OBResidue **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::OBMol *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (OpenBabel::OBMol *)(*arg1)->GetParent(); *(OpenBabel::OBMol **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetNewBondVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg3 = (double)jarg3;  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1BeginBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (*arg1)->BeginBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1EndBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (*arg1)->EndBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1BeginBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1NextBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1BeginNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1NextNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; int arg2 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)(*arg1)->GetDistance(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetDistance_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = (OpenBabel::vector3 *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetAngle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; int arg2 ; int arg3 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetAngle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = *(OpenBabel::OBAtom **)&jarg3;  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1NewResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  (*arg1)->NewResidue(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1AddResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2;  (*arg1)->AddResidue(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1DeleteResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  (*arg1)->DeleteResidue(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1AddBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2;  (*arg1)->AddBond(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1InsertBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return ; }  
  arg3 = *(OpenBabel::OBBond **)&jarg3;  (*arg1)->InsertBond(*arg2,arg3); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1DeleteBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBBond **)&jarg2;  result = (bool)(*arg1)->DeleteBond(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1ClearBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  (*arg1)->ClearBond(); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1HtoMethyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->HtoMethyl(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetHybAndGeom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->SetHybAndGeom(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1CountFreeOxygens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->CountFreeOxygens();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1CountFreeSulfurs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->CountFreeSulfurs();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1ExplicitHydrogenCount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool arg2 ; unsigned int result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1ExplicitHydrogenCount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1MemberOfRingCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->MemberOfRingCount();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1MemberOfRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->MemberOfRingSize();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1CountRingBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->CountRingBonds();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SmallestBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (double)(*arg1)->SmallestBondAngle();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1AverageBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (double)(*arg1)->AverageBondAngle();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1LewisAcidBaseCounts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  SwigValueWrapper< std::pair< int,int > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (*arg1)->LewisAcidBaseCounts();
  *(std::pair< int,int > **)&jresult = new std::pair< int,int >((const std::pair< int,int > &)result);  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1HasResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->HasResidue(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsHetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHetAtom(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->IsElement(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsAromatic(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsInRing(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsInRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsInRingSize(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsHeteroatom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHeteroatom();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsConnected(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsOneThree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (bool)(*arg1)->IsOneThree(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsOneFour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (bool)(*arg1)->IsOneFour(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsCarboxylOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsCarboxylOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsPhosphateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsPhosphateOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsSulfateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsSulfateOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsNitroOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsNitroOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsAmideNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsAmideNitrogen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsPolarHydrogen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsNonPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsNonPolarHydrogen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsAromaticNOxide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsAromaticNOxide();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsChiral(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsPeriodic(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsAxial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsAxial(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsHbondAcceptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHbondAcceptor();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsHbondAcceptorSimple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHbondAcceptorSimple();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsHbondDonor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHbondDonor();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsHbondDonorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHbondDonorH();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1IsMetal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->IsMetal(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1HasAlphaBetaUnsat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1HasAlphaBetaUnsat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->HasAlphaBetaUnsat();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1HasBondOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasBondOfOrder(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1CountBondsOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int arg2 ; int result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->CountBondsOfOrder(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1HighestBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (int)(*arg1)->HighestBondOrder();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1HasNonSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->HasNonSingleBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1HasSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->HasSingleBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1HasDoubleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->HasDoubleBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1HasAromaticBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->HasAromaticBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1MatchesSMARTS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; char *arg2 = (char *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2); jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (bool)(*arg1)->Clear(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBBase *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(std::map< std::string,std::string > **)&jarg2;  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  *(OpenBabel::OBBase **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1ClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (char *)(*arg1)->ClassDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetTitle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; bool arg2 ; char *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (char *)(*arg1)->GetTitle(arg2); if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetTitle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (char *)(*arg1)->GetTitle();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1SetTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; }  (*arg1)->SetTitle((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1HasData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; std::string *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1HasData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBGenericData * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBGenericData * > & reference is null");
    return ; }   (*arg1)->DeleteData(*arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1DeleteData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; std::string *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1CloneData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->CloneData(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; size_t result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (*arg1)->DataSize(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; std::string *arg2 = 0 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; OpenBabel::DataOrigin arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (OpenBabel::DataOrigin)jarg2;  result = (*arg1)->GetData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1GetAllData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ; unsigned int arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2;  result = (*arg1)->GetAllData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (*arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomIter_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;  result = (*arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolAtomDFSIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBMolAtomDFSIter *)new OpenBabel::OBMolAtomDFSIter();
  *(OpenBabel::OBMolAtomDFSIter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolAtomDFSIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; OpenBabel::OBMolAtomDFSIter *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2; 
  result = (OpenBabel::OBMolAtomDFSIter *)new OpenBabel::OBMolAtomDFSIter(arg1,arg2);
  *(OpenBabel::OBMolAtomDFSIter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolAtomDFSIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBMolAtomDFSIter *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolAtomDFSIter *)new OpenBabel::OBMolAtomDFSIter(arg1);
  *(OpenBabel::OBMolAtomDFSIter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolAtomDFSIter_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = 0 ; OpenBabel::OBMolAtomDFSIter *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolAtomDFSIter const & reference is null");
    return 0; }  
  result = (OpenBabel::OBMolAtomDFSIter *)new OpenBabel::OBMolAtomDFSIter((OpenBabel::OBMolAtomDFSIter const &)*arg1);
  *(OpenBabel::OBMolAtomDFSIter **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBMolAtomDFSIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1HasMore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)((OpenBabel::OBMolAtomDFSIter const *)arg1)->operator bool(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1inc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBMolAtomDFSIter *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (OpenBabel::OBMolAtomDFSIter *) &(arg1)->operator ++();
  *(OpenBabel::OBMolAtomDFSIter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1inc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int arg2 ;
  OpenBabel::OBMolAtomDFSIter result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2;  result = (arg1)->operator ++(arg2);
  *(OpenBabel::OBMolAtomDFSIter **)&jresult = new OpenBabel::OBMolAtomDFSIter((const OpenBabel::OBMolAtomDFSIter &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMolAtomDFSIter const *)arg1)->operator ->();
  *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (OpenBabel::OBAtom *) &((OpenBabel::OBMolAtomDFSIter const *)arg1)->operator *();
  *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(arg1)->next(); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = jarg2 ? true : false;  if (arg1) (*arg1)->Visit = arg2; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1Duplicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  (*arg1)->Duplicate(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetIdx(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned long arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (unsigned long)jarg2;  (*arg1)->SetId(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetHyb(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetAtomicNum(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->SetIsotope(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetImplicitHCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->SetImplicitHCount(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetFormalCharge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; short arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (short)jarg2;  (*arg1)->SetSpinMultiplicity(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (*arg1)->SetType((std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (double)jarg2;  (*arg1)->SetPartialCharge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::vector3 *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if (!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return ; }   (*arg1)->SetVector((OpenBabel::vector3 const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double arg2 ; double arg3 ; double arg4 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  arg4 = (double)jarg4;  (*arg1)->SetVector(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  (*arg1)->SetVector(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double **arg2 = (double **) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(double ***)&jarg2; 
  (*arg1)->SetCoordPtr(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::OBResidue **)&jarg2;  (*arg1)->SetResidue(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;  (*arg1)->SetParent(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetAromatic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetAromatic(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetAromatic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  (*arg1)->SetAromatic(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetInRing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetInRing(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetInRing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  (*arg1)->SetInRing(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1ClearCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  (*arg1)->ClearCoordPtr(); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (int)(*arg1)->GetFormalCharge();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetAtomicNum();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned short result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (unsigned short)(*arg1)->GetIsotope();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (int)(*arg1)->GetSpinMultiplicity();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetAtomicMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (double)(*arg1)->GetAtomicMass();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetExactMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (double)(*arg1)->GetExactMass();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetIndex();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned long result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (unsigned long)(*arg1)->GetId();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetCoordinateIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetCoordinateIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetExplicitDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetExplicitDegree(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetTotalDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetTotalDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetExplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetExplicitValence(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetTotalValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetTotalValence();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetHyb();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jshort JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetImplicitHCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned char result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned char)(*arg1)->GetImplicitHCount(); jresult = (jshort)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetHvyDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetHvyDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetHeteroDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetHeteroDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (char *)(*arg1)->GetType();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (double)(*arg1)->GetX();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (double)(*arg1)->GetY();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (double)(*arg1)->GetZ();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (double)(*arg1)->x();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (double)(*arg1)->y();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (double)(*arg1)->z();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (double *)(*arg1)->GetCoordinate();
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::vector3 *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (OpenBabel::vector3 *) &(*arg1)->GetVector(); *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (double)(*arg1)->GetPartialCharge();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::OBResidue *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)(*arg1)->GetResidue(); *(OpenBabel::OBResidue **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::OBMol *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (OpenBabel::OBMol *)(*arg1)->GetParent(); *(OpenBabel::OBMol **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetNewBondVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg3 = (double)jarg3;  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1BeginBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (*arg1)->BeginBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1EndBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (*arg1)->EndBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1BeginBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1NextBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1BeginNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1NextNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int arg2 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)(*arg1)->GetDistance(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetDistance_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::vector3 *arg2 = (OpenBabel::vector3 *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetAngle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int arg2 ; int arg3 ;
  double result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = (int)jarg3;  result = (double)(*arg1)->GetAngle(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetAngle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = *(OpenBabel::OBAtom **)&jarg3;  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1NewResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  (*arg1)->NewResidue(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1AddResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::OBResidue **)&jarg2;  (*arg1)->AddResidue(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1DeleteResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  (*arg1)->DeleteResidue(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1AddBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2;  (*arg1)->AddBond(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1InsertBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return ; }  
  arg3 = *(OpenBabel::OBBond **)&jarg3;  (*arg1)->InsertBond(*arg2,arg3); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1DeleteBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(*arg1)->DeleteBond(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1ClearBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  (*arg1)->ClearBond(); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1HtoMethyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->HtoMethyl();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetHybAndGeom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->SetHybAndGeom(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1CountFreeOxygens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (unsigned int)(*arg1)->CountFreeOxygens();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1CountFreeSulfurs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (unsigned int)(*arg1)->CountFreeSulfurs();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1ExplicitHydrogenCount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool arg2 ; unsigned int result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1ExplicitHydrogenCount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1MemberOfRingCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingCount(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1MemberOfRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (unsigned int)(*arg1)->MemberOfRingSize();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1CountRingBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (unsigned int)(*arg1)->CountRingBonds();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SmallestBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (double)(*arg1)->SmallestBondAngle();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1AverageBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (double)(*arg1)->AverageBondAngle();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1LewisAcidBaseCounts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  SwigValueWrapper< std::pair< int,int > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (*arg1)->LewisAcidBaseCounts();
  *(std::pair< int,int > **)&jresult = new std::pair< int,int >((const std::pair< int,int > &)result);  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1HasResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->HasResidue();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsHetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsHetAtom();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int arg2 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (bool)(*arg1)->IsElement(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsInRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsInRingSize(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsHeteroatom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsHeteroatom();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsConnected(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsOneThree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneThree(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsOneFour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneFour(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsCarboxylOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsCarboxylOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsPhosphateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsPhosphateOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsSulfateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsSulfateOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsNitroOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsNitroOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsAmideNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsAmideNitrogen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsPolarHydrogen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsNonPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsNonPolarHydrogen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsAromaticNOxide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsAromaticNOxide();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsChiral();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsPeriodic();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsAxial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsAxial();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsHbondAcceptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsHbondAcceptor();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsHbondAcceptorSimple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsHbondAcceptorSimple();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsHbondDonor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsHbondDonor();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsHbondDonorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsHbondDonorH();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1IsMetal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->IsMetal();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1HasAlphaBetaUnsat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1HasAlphaBetaUnsat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->HasAlphaBetaUnsat();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1HasBondOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int arg2 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (bool)(*arg1)->HasBondOfOrder(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1CountBondsOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int arg2 ; int result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->CountBondsOfOrder(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1HighestBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (int)(*arg1)->HighestBondOrder();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1HasNonSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->HasNonSingleBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1HasSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->HasSingleBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1HasDoubleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->HasDoubleBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1HasAromaticBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->HasAromaticBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1MatchesSMARTS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; char *arg2 = (char *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2); jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (bool)(*arg1)->Clear();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBBase *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(std::map< std::string,std::string > **)&jarg2;  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  *(OpenBabel::OBBase **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1ClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (char *)(*arg1)->ClassDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetTitle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; bool arg2 ; char *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (char *)(*arg1)->GetTitle(arg2); if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetTitle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (char *)(*arg1)->GetTitle();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1SetTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; }  (*arg1)->SetTitle((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1HasData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; std::string *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1HasData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int arg2 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (bool)(*arg1)->HasData(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBGenericData * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBGenericData * > & reference is null");
    return ; }   (*arg1)->DeleteData(*arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1DeleteData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; std::string *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1CloneData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->CloneData(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; size_t result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (*arg1)->DataSize();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; std::string *arg2 = 0 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; OpenBabel::DataOrigin arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (OpenBabel::DataOrigin)jarg2;  result = (*arg1)->GetData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1GetAllData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ; unsigned int arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  arg2 = (unsigned int)jarg2;  result = (*arg1)->GetAllData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (*arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomDFSIter_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;  result = (*arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolAtomBFSIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBMolAtomBFSIter *)new OpenBabel::OBMolAtomBFSIter();
  *(OpenBabel::OBMolAtomBFSIter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolAtomBFSIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; OpenBabel::OBMolAtomBFSIter *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2; 
  result = (OpenBabel::OBMolAtomBFSIter *)new OpenBabel::OBMolAtomBFSIter(arg1,arg2);
  *(OpenBabel::OBMolAtomBFSIter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolAtomBFSIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBMolAtomBFSIter *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolAtomBFSIter *)new OpenBabel::OBMolAtomBFSIter(arg1);
  *(OpenBabel::OBMolAtomBFSIter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolAtomBFSIter_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = 0 ; OpenBabel::OBMolAtomBFSIter *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolAtomBFSIter const & reference is null");
    return 0; }  
  result = (OpenBabel::OBMolAtomBFSIter *)new OpenBabel::OBMolAtomBFSIter((OpenBabel::OBMolAtomBFSIter const &)*arg1);
  *(OpenBabel::OBMolAtomBFSIter **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBMolAtomBFSIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1HasMore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)((OpenBabel::OBMolAtomBFSIter const *)arg1)->operator bool(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1inc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBMolAtomBFSIter *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (OpenBabel::OBMolAtomBFSIter *) &(arg1)->operator ++();
  *(OpenBabel::OBMolAtomBFSIter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1inc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int arg2 ;
  OpenBabel::OBMolAtomBFSIter result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2;  result = (arg1)->operator ++(arg2);
  *(OpenBabel::OBMolAtomBFSIter **)&jresult = new OpenBabel::OBMolAtomBFSIter((const OpenBabel::OBMolAtomBFSIter &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMolAtomBFSIter const *)arg1)->operator ->();
  *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (OpenBabel::OBAtom *) &((OpenBabel::OBMolAtomBFSIter const *)arg1)->operator *();
  *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1CurrentDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (int)((OpenBabel::OBMolAtomBFSIter const *)arg1)->CurrentDepth(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = jarg2 ? true : false;  if (arg1) (*arg1)->Visit = arg2; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1Duplicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  (*arg1)->Duplicate(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetIdx(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned long arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (unsigned long)jarg2;  (*arg1)->SetId(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetHyb(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetAtomicNum(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->SetIsotope(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetImplicitHCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->SetImplicitHCount(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetFormalCharge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; short arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (short)jarg2;  (*arg1)->SetSpinMultiplicity(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (*arg1)->SetType((std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (double)jarg2;  (*arg1)->SetPartialCharge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::vector3 *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if (!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return ; }   (*arg1)->SetVector((OpenBabel::vector3 const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double arg2 ; double arg3 ; double arg4 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  arg4 = (double)jarg4;  (*arg1)->SetVector(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  (*arg1)->SetVector(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double **arg2 = (double **) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(double ***)&jarg2; 
  (*arg1)->SetCoordPtr(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBResidue **)&jarg2;  (*arg1)->SetResidue(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;  (*arg1)->SetParent(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetAromatic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetAromatic(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetAromatic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  (*arg1)->SetAromatic(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetInRing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetInRing(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetInRing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  (*arg1)->SetInRing(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1ClearCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  (*arg1)->ClearCoordPtr(); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (int)(*arg1)->GetFormalCharge();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetAtomicNum();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned short result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (unsigned short)(*arg1)->GetIsotope();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (int)(*arg1)->GetSpinMultiplicity();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetAtomicMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (double)(*arg1)->GetAtomicMass();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetExactMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (double)(*arg1)->GetExactMass();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetIndex();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned long result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (unsigned long)(*arg1)->GetId();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetCoordinateIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetCoordinateIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetExplicitDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetExplicitDegree(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetTotalDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetTotalDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetExplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetExplicitValence(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetTotalValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetTotalValence();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetHyb();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jshort JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetImplicitHCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned char result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned char)(*arg1)->GetImplicitHCount(); jresult = (jshort)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetHvyDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetHvyDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetHeteroDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetHeteroDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (char *)(*arg1)->GetType();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (double)(*arg1)->GetX();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (double)(*arg1)->GetY();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (double)(*arg1)->GetZ();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (double)(*arg1)->x();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (double)(*arg1)->y();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (double)(*arg1)->z();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (double *)(*arg1)->GetCoordinate();
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::vector3 *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (OpenBabel::vector3 *) &(*arg1)->GetVector(); *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (double)(*arg1)->GetPartialCharge();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::OBResidue *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)(*arg1)->GetResidue(); *(OpenBabel::OBResidue **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::OBMol *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (OpenBabel::OBMol *)(*arg1)->GetParent(); *(OpenBabel::OBMol **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetNewBondVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg3 = (double)jarg3;  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1BeginBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (*arg1)->BeginBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1EndBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (*arg1)->EndBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1BeginBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1NextBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1BeginNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1NextNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int arg2 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)(*arg1)->GetDistance(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetDistance_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::vector3 *arg2 = (OpenBabel::vector3 *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetAngle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int arg2 ; int arg3 ;
  double result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = (int)jarg3;  result = (double)(*arg1)->GetAngle(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetAngle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = *(OpenBabel::OBAtom **)&jarg3;  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1NewResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  (*arg1)->NewResidue(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1AddResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBResidue **)&jarg2;  (*arg1)->AddResidue(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1DeleteResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  (*arg1)->DeleteResidue(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1AddBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2;  (*arg1)->AddBond(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1InsertBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return ; }  
  arg3 = *(OpenBabel::OBBond **)&jarg3;  (*arg1)->InsertBond(*arg2,arg3); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1DeleteBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(*arg1)->DeleteBond(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1ClearBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  (*arg1)->ClearBond(); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1HtoMethyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->HtoMethyl();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetHybAndGeom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->SetHybAndGeom(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1CountFreeOxygens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->CountFreeOxygens();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1CountFreeSulfurs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->CountFreeSulfurs();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1ExplicitHydrogenCount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool arg2 ; unsigned int result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1ExplicitHydrogenCount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1MemberOfRingCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingCount(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1MemberOfRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->MemberOfRingSize();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1CountRingBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->CountRingBonds();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SmallestBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (double)(*arg1)->SmallestBondAngle();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1AverageBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (double)(*arg1)->AverageBondAngle();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1LewisAcidBaseCounts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  SwigValueWrapper< std::pair< int,int > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (*arg1)->LewisAcidBaseCounts();
  *(std::pair< int,int > **)&jresult = new std::pair< int,int >((const std::pair< int,int > &)result);  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1HasResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->HasResidue();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsHetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsHetAtom();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int arg2 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (bool)(*arg1)->IsElement(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsInRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsInRingSize(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsHeteroatom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsHeteroatom();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsConnected(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsOneThree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneThree(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsOneFour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneFour(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsCarboxylOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsCarboxylOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsPhosphateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsPhosphateOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsSulfateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsSulfateOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsNitroOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsNitroOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsAmideNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsAmideNitrogen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsPolarHydrogen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsNonPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsNonPolarHydrogen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsAromaticNOxide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsAromaticNOxide();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsChiral();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsPeriodic();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsAxial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsAxial();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsHbondAcceptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsHbondAcceptor();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsHbondAcceptorSimple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsHbondAcceptorSimple();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsHbondDonor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsHbondDonor();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsHbondDonorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsHbondDonorH();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1IsMetal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->IsMetal();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1HasAlphaBetaUnsat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1HasAlphaBetaUnsat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->HasAlphaBetaUnsat();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1HasBondOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int arg2 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (bool)(*arg1)->HasBondOfOrder(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1CountBondsOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int arg2 ; int result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->CountBondsOfOrder(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1HighestBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (int)(*arg1)->HighestBondOrder();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1HasNonSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->HasNonSingleBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1HasSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->HasSingleBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1HasDoubleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->HasDoubleBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1HasAromaticBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->HasAromaticBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1MatchesSMARTS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; char *arg2 = (char *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2); jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (bool)(*arg1)->Clear();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBBase *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(std::map< std::string,std::string > **)&jarg2;  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  *(OpenBabel::OBBase **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1ClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (char *)(*arg1)->ClassDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetTitle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; bool arg2 ; char *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (char *)(*arg1)->GetTitle(arg2); if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetTitle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (char *)(*arg1)->GetTitle();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1SetTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; }  (*arg1)->SetTitle((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1HasData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; std::string *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1HasData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int arg2 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (bool)(*arg1)->HasData(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBGenericData * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBGenericData * > & reference is null");
    return ; }   (*arg1)->DeleteData(*arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1DeleteData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; std::string *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1CloneData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->CloneData(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; size_t result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (*arg1)->DataSize();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; std::string *arg2 = 0 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; OpenBabel::DataOrigin arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (OpenBabel::DataOrigin)jarg2;  result = (*arg1)->GetData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1GetAllData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ; unsigned int arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  arg2 = (unsigned int)jarg2;  result = (*arg1)->GetAllData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (*arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAtomBFSIter_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;  result = (*arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolBondBFSIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBMolBondBFSIter *)new OpenBabel::OBMolBondBFSIter();
  *(OpenBabel::OBMolBondBFSIter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolBondBFSIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; int arg2 ; OpenBabel::OBMolBondBFSIter *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1;  arg2 = (int)jarg2; 
  result = (OpenBabel::OBMolBondBFSIter *)new OpenBabel::OBMolBondBFSIter(arg1,arg2);
  *(OpenBabel::OBMolBondBFSIter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolBondBFSIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBMolBondBFSIter *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolBondBFSIter *)new OpenBabel::OBMolBondBFSIter(arg1);
  *(OpenBabel::OBMolBondBFSIter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolBondBFSIter_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = 0 ; OpenBabel::OBMolBondBFSIter *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolBondBFSIter const & reference is null");
    return 0; }  
  result = (OpenBabel::OBMolBondBFSIter *)new OpenBabel::OBMolBondBFSIter((OpenBabel::OBMolBondBFSIter const &)*arg1);
  *(OpenBabel::OBMolBondBFSIter **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBMolBondBFSIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; OpenBabel::OBBond *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; 
  result = (OpenBabel::OBBond *)((OpenBabel::OBMolBondBFSIter const *)arg1)->operator ->();
  *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; OpenBabel::OBBond *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; 
  result = (OpenBabel::OBBond *) &((OpenBabel::OBMolBondBFSIter const *)arg1)->operator *();
  *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1CurrentDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; 
  result = (int)((OpenBabel::OBMolBondBFSIter const *)arg1)->CurrentDepth(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = jarg2 ? true : false;  if (arg1) (*arg1)->Visit = arg2; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetIdx(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; unsigned long arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = (unsigned long)jarg2;  (*arg1)->SetId(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetBondOrder(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  (*arg1)->SetBegin(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  (*arg1)->SetEnd(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;  (*arg1)->SetParent(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetLength_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double arg3 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = (double)jarg3;  (*arg1)->SetLength(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetLength_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = (double)jarg2;  (*arg1)->SetLength(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1Set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jint jarg6) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; int arg2 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; int arg5 ; int arg6 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; 
  arg2 = (int)jarg2;  arg3 = *(OpenBabel::OBAtom **)&jarg3;  arg4 = *(OpenBabel::OBAtom **)&jarg4;  arg5 = (int)jarg5; 
  arg6 = (int)jarg6;  (*arg1)->Set(arg2,arg3,arg4,arg5,arg6); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetAromatic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetAromatic(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetAromatic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  (*arg1)->SetAromatic(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetWedge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetWedge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetWedge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  (*arg1)->SetWedge(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetHash_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetHash(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetHash_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  (*arg1)->SetHash(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetWedgeOrHash_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetWedgeOrHash(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetWedgeOrHash_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  (*arg1)->SetWedgeOrHash(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetInRing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetInRing(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetInRing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  (*arg1)->SetInRing(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetClosure_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetClosure(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetClosure_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  (*arg1)->SetClosure(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; unsigned long result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (unsigned long)(*arg1)->GetId();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetBondOrder();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetFlags();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetBeginAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetBeginAtomIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetEndAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (unsigned int)(*arg1)->GetEndAtomIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetBeginAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetBeginAtom(); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetEndAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetEndAtom(); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetNbrAtom(arg2); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; OpenBabel::OBMol *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; 
  result = (OpenBabel::OBMol *)(*arg1)->GetParent(); *(OpenBabel::OBMol **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetEquibLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (double)(*arg1)->GetEquibLength();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (double)(*arg1)->GetLength();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetNbrAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (unsigned int)(*arg1)->GetNbrAtomIdx(arg2); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1FindSmallestRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; OpenBabel::OBRing *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; 
  result = (OpenBabel::OBRing *)(*arg1)->FindSmallestRing(); *(OpenBabel::OBRing **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1IsRotor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->IsRotor(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1IsRotor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool)(*arg1)->IsRotor();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1IsPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool)(*arg1)->IsPeriodic();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1IsAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool)(*arg1)->IsAmide();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1IsPrimaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool)(*arg1)->IsPrimaryAmide();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1IsSecondaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool)(*arg1)->IsSecondaryAmide();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1IsTertiaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool)(*arg1)->IsTertiaryAmide();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1IsEster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool)(*arg1)->IsEster();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1IsCarbonyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool)(*arg1)->IsCarbonyl();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1IsClosure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool)(*arg1)->IsClosure();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1IsWedge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool)(*arg1)->IsWedge();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1IsHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool)(*arg1)->IsHash();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1IsWedgeOrHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool)(*arg1)->IsWedgeOrHash();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1IsCisOrTrans(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool)(*arg1)->IsCisOrTrans();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1IsDoubleBondGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool)(*arg1)->IsDoubleBondGeometry();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (bool)(*arg1)->Clear();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBBase *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; 
  arg2 = *(std::map< std::string,std::string > **)&jarg2;  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  *(OpenBabel::OBBase **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1ClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (char *)(*arg1)->ClassDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetTitle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; bool arg2 ; char *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (char *)(*arg1)->GetTitle(arg2); if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetTitle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (char *)(*arg1)->GetTitle();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1SetTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; }  (*arg1)->SetTitle((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1HasData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; std::string *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1HasData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; unsigned int arg2 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (bool)(*arg1)->HasData(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBGenericData * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBGenericData * > & reference is null");
    return ; }   (*arg1)->DeleteData(*arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1DeleteData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; std::string *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1CloneData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->CloneData(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; size_t result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (*arg1)->DataSize();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; std::string *arg2 = 0 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; OpenBabel::DataOrigin arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = (OpenBabel::DataOrigin)jarg2;  result = (*arg1)->GetData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1GetAllData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ; unsigned int arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  arg2 = (unsigned int)jarg2;  result = (*arg1)->GetAllData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (*arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondBFSIter_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondBFSIter *arg1 = (OpenBabel::OBMolBondBFSIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondBFSIter **)&jarg1;  result = (*arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolBondIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBMolBondIter *)new OpenBabel::OBMolBondIter(); *(OpenBabel::OBMolBondIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolBondIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBMolBondIter *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolBondIter *)new OpenBabel::OBMolBondIter(arg1); *(OpenBabel::OBMolBondIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolBondIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = 0 ; OpenBabel::OBMolBondIter *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolBondIter const & reference is null");
    return 0; }   result = (OpenBabel::OBMolBondIter *)new OpenBabel::OBMolBondIter((OpenBabel::OBMolBondIter const &)*arg1);
  *(OpenBabel::OBMolBondIter **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBMolBondIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1HasMore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)((OpenBabel::OBMolBondIter const *)arg1)->operator bool(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1inc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; OpenBabel::OBMolBondIter *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (OpenBabel::OBMolBondIter *) &(arg1)->operator ++(); *(OpenBabel::OBMolBondIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1inc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; int arg2 ;
  OpenBabel::OBMolBondIter result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (int)jarg2;  result = (arg1)->operator ++(arg2);
  *(OpenBabel::OBMolBondIter **)&jresult = new OpenBabel::OBMolBondIter((const OpenBabel::OBMolBondIter &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; OpenBabel::OBBond *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (OpenBabel::OBBond *)((OpenBabel::OBMolBondIter const *)arg1)->operator ->();
  *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; OpenBabel::OBBond *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (OpenBabel::OBBond *) &((OpenBabel::OBMolBondIter const *)arg1)->operator *();
  *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = jarg2 ? true : false;  if (arg1) (*arg1)->Visit = arg2; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool) ((*arg1)->Visit); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetIdx(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; unsigned long arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = (unsigned long)jarg2;  (*arg1)->SetId(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetBondOrder(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  (*arg1)->SetBegin(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  (*arg1)->SetEnd(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;  (*arg1)->SetParent(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetLength_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double arg3 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = (double)jarg3;  (*arg1)->SetLength(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetLength_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = (double)jarg2;  (*arg1)->SetLength(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1Set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jint jarg6) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; int arg2 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; int arg5 ; int arg6 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (int)jarg2;  arg3 = *(OpenBabel::OBAtom **)&jarg3;  arg4 = *(OpenBabel::OBAtom **)&jarg4;  arg5 = (int)jarg5; 
  arg6 = (int)jarg6;  (*arg1)->Set(arg2,arg3,arg4,arg5,arg6); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetAromatic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetAromatic(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetAromatic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  (*arg1)->SetAromatic(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetWedge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetWedge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetWedge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  (*arg1)->SetWedge(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetHash_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetHash(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetHash_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  (*arg1)->SetHash(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetWedgeOrHash_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetWedgeOrHash(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetWedgeOrHash_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  (*arg1)->SetWedgeOrHash(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetInRing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetInRing(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetInRing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  (*arg1)->SetInRing(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetClosure_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetClosure(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetClosure_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  (*arg1)->SetClosure(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; unsigned long result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (unsigned long)(*arg1)->GetId();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (unsigned int)(*arg1)->GetBondOrder();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (unsigned int)(*arg1)->GetFlags();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetBeginAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (unsigned int)(*arg1)->GetBeginAtomIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetEndAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (unsigned int)(*arg1)->GetEndAtomIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetBeginAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetBeginAtom(); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetEndAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetEndAtom(); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetNbrAtom(arg2); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; OpenBabel::OBMol *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (OpenBabel::OBMol *)(*arg1)->GetParent(); *(OpenBabel::OBMol **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetEquibLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (double)(*arg1)->GetEquibLength();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (double)(*arg1)->GetLength(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetNbrAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (unsigned int)(*arg1)->GetNbrAtomIdx(arg2); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1FindSmallestRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; OpenBabel::OBRing *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (OpenBabel::OBRing *)(*arg1)->FindSmallestRing(); *(OpenBabel::OBRing **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool)(*arg1)->IsAromatic(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool)(*arg1)->IsInRing(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1IsRotor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->IsRotor(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1IsRotor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool)(*arg1)->IsRotor(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1IsPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool)(*arg1)->IsPeriodic(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1IsAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool)(*arg1)->IsAmide(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1IsPrimaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool)(*arg1)->IsPrimaryAmide();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1IsSecondaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool)(*arg1)->IsSecondaryAmide();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1IsTertiaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool)(*arg1)->IsTertiaryAmide();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1IsEster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool)(*arg1)->IsEster(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1IsCarbonyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool)(*arg1)->IsCarbonyl(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1IsClosure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool)(*arg1)->IsClosure(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1IsWedge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool)(*arg1)->IsWedge(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1IsHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool)(*arg1)->IsHash(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1IsWedgeOrHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool)(*arg1)->IsWedgeOrHash();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1IsCisOrTrans(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool)(*arg1)->IsCisOrTrans();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1IsDoubleBondGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool)(*arg1)->IsDoubleBondGeometry();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (bool)(*arg1)->Clear(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBBase *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(std::map< std::string,std::string > **)&jarg2;  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  *(OpenBabel::OBBase **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1ClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (char *)(*arg1)->ClassDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetTitle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; bool arg2 ; char *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (char *)(*arg1)->GetTitle(arg2); if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetTitle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (char *)(*arg1)->GetTitle();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1SetTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; }  (*arg1)->SetTitle((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1HasData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; std::string *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1HasData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; unsigned int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBGenericData * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBGenericData * > & reference is null");
    return ; }   (*arg1)->DeleteData(*arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1DeleteData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; std::string *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1CloneData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->CloneData(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; size_t result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (*arg1)->DataSize(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; std::string *arg2 = 0 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; OpenBabel::DataOrigin arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = (OpenBabel::DataOrigin)jarg2;  result = (*arg1)->GetData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1GetAllData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ; unsigned int arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  arg2 = (unsigned int)jarg2;  result = (*arg1)->GetAllData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (*arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolBondIter_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;  result = (*arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAtomAtomIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBAtomAtomIter *)new OpenBabel::OBAtomAtomIter(); *(OpenBabel::OBAtomAtomIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAtomAtomIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtomAtomIter *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (OpenBabel::OBAtomAtomIter *)new OpenBabel::OBAtomAtomIter(arg1); *(OpenBabel::OBAtomAtomIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAtomAtomIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = 0 ; OpenBabel::OBAtomAtomIter *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtomAtomIter const & reference is null");
    return 0; }   result = (OpenBabel::OBAtomAtomIter *)new OpenBabel::OBAtomAtomIter((OpenBabel::OBAtomAtomIter const &)*arg1);
  *(OpenBabel::OBAtomAtomIter **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBAtomAtomIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1HasMore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)((OpenBabel::OBAtomAtomIter const *)arg1)->operator bool(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1inc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtomAtomIter *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtomAtomIter *) &(arg1)->operator ++(); *(OpenBabel::OBAtomAtomIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1inc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; int arg2 ;
  OpenBabel::OBAtomAtomIter result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2;  result = (arg1)->operator ++(arg2);
  *(OpenBabel::OBAtomAtomIter **)&jresult = new OpenBabel::OBAtomAtomIter((const OpenBabel::OBAtomAtomIter &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBAtomAtomIter const *)arg1)->operator ->();
  *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *) &((OpenBabel::OBAtomAtomIter const *)arg1)->operator *();
  *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = jarg2 ? true : false;  if (arg1) (*arg1)->Visit = arg2; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1Duplicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  (*arg1)->Duplicate(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetIdx(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned long arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (unsigned long)jarg2;  (*arg1)->SetId(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetHyb(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetAtomicNum(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->SetIsotope(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetImplicitHCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->SetImplicitHCount(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetFormalCharge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; short arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (short)jarg2;  (*arg1)->SetSpinMultiplicity(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (*arg1)->SetType((std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (double)jarg2;  (*arg1)->SetPartialCharge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::vector3 *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return ; }  
  (*arg1)->SetVector((OpenBabel::vector3 const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; double arg2 ; double arg3 ; double arg4 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  arg4 = (double)jarg4;  (*arg1)->SetVector(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  (*arg1)->SetVector(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; double **arg2 = (double **) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = *(double ***)&jarg2;  (*arg1)->SetCoordPtr(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2;  (*arg1)->SetResidue(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;  (*arg1)->SetParent(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetAromatic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetAromatic(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetAromatic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  (*arg1)->SetAromatic(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetInRing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetInRing(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetInRing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  (*arg1)->SetInRing(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1ClearCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  (*arg1)->ClearCoordPtr(); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (int)(*arg1)->GetFormalCharge();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetAtomicNum();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned short result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned short)(*arg1)->GetIsotope();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (int)(*arg1)->GetSpinMultiplicity();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetAtomicMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (double)(*arg1)->GetAtomicMass();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetExactMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (double)(*arg1)->GetExactMass();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetIndex();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned long result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned long)(*arg1)->GetId();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetCoordinateIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetCoordinateIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetExplicitDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetExplicitDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetTotalDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetTotalDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetExplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetExplicitValence();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetTotalValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetTotalValence();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetHyb();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jshort JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetImplicitHCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned char result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned char)(*arg1)->GetImplicitHCount();
  jresult = (jshort)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetHvyDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetHvyDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetHeteroDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetHeteroDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (char *)(*arg1)->GetType();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (double)(*arg1)->GetX();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (double)(*arg1)->GetY();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (double)(*arg1)->GetZ();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (double)(*arg1)->x();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (double)(*arg1)->y();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (double)(*arg1)->z();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; double *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (double *)(*arg1)->GetCoordinate();
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::vector3 *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (OpenBabel::vector3 *) &(*arg1)->GetVector(); *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (double)(*arg1)->GetPartialCharge();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::OBResidue *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)(*arg1)->GetResidue(); *(OpenBabel::OBResidue **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::OBMol *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (OpenBabel::OBMol *)(*arg1)->GetParent(); *(OpenBabel::OBMol **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetNewBondVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg3 = (double)jarg3;  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1BeginBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (*arg1)->BeginBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1EndBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (*arg1)->EndBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1BeginBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1NextBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1BeginNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1NextNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; int arg2 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)(*arg1)->GetDistance(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetDistance_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = (OpenBabel::vector3 *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetAngle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; int arg2 ; int arg3 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetAngle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = *(OpenBabel::OBAtom **)&jarg3;  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1NewResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  (*arg1)->NewResidue(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1AddResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2;  (*arg1)->AddResidue(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1DeleteResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  (*arg1)->DeleteResidue(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1AddBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2;  (*arg1)->AddBond(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1InsertBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return ; }  
  arg3 = *(OpenBabel::OBBond **)&jarg3;  (*arg1)->InsertBond(*arg2,arg3); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1DeleteBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(*arg1)->DeleteBond(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1ClearBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  (*arg1)->ClearBond(); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1HtoMethyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->HtoMethyl();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetHybAndGeom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->SetHybAndGeom(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1CountFreeOxygens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->CountFreeOxygens();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1CountFreeSulfurs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->CountFreeSulfurs();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1ExplicitHydrogenCount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool arg2 ; unsigned int result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1ExplicitHydrogenCount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1MemberOfRingCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->MemberOfRingCount();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1MemberOfRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->MemberOfRingSize();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1CountRingBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->CountRingBonds();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SmallestBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (double)(*arg1)->SmallestBondAngle();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1AverageBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (double)(*arg1)->AverageBondAngle();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1LewisAcidBaseCounts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  SwigValueWrapper< std::pair< int,int > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (*arg1)->LewisAcidBaseCounts();
  *(std::pair< int,int > **)&jresult = new std::pair< int,int >((const std::pair< int,int > &)result);  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1HasResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->HasResidue();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsHetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHetAtom();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->IsElement(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsInRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsInRingSize(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsHeteroatom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHeteroatom();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsConnected(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsOneThree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneThree(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsOneFour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (bool)(*arg1)->IsOneFour(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsCarboxylOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsCarboxylOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsPhosphateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsPhosphateOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsSulfateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsSulfateOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsNitroOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsNitroOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsAmideNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsAmideNitrogen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsPolarHydrogen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsNonPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsNonPolarHydrogen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsAromaticNOxide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsAromaticNOxide();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsChiral();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsPeriodic();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsAxial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsAxial();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsHbondAcceptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHbondAcceptor();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsHbondAcceptorSimple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHbondAcceptorSimple();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsHbondDonor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHbondDonor();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsHbondDonorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHbondDonorH();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1IsMetal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->IsMetal();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1HasAlphaBetaUnsat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1HasAlphaBetaUnsat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->HasAlphaBetaUnsat();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1HasBondOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasBondOfOrder(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1CountBondsOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int arg2 ; int result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->CountBondsOfOrder(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1HighestBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (int)(*arg1)->HighestBondOrder();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1HasNonSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->HasNonSingleBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1HasSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->HasSingleBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1HasDoubleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->HasDoubleBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1HasAromaticBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->HasAromaticBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1MatchesSMARTS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; char *arg2 = (char *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2); jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (bool)(*arg1)->Clear();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBBase *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(std::map< std::string,std::string > **)&jarg2;  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  *(OpenBabel::OBBase **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1ClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (char *)(*arg1)->ClassDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetTitle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; bool arg2 ; char *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (char *)(*arg1)->GetTitle(arg2); if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetTitle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (char *)(*arg1)->GetTitle();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1SetTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; }  (*arg1)->SetTitle((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1HasData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; std::string *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1HasData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBGenericData * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBGenericData * > & reference is null");
    return ; }   (*arg1)->DeleteData(*arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1DeleteData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; std::string *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1CloneData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->CloneData(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; size_t result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (*arg1)->DataSize(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; std::string *arg2 = 0 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; OpenBabel::DataOrigin arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (OpenBabel::DataOrigin)jarg2;  result = (*arg1)->GetData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1GetAllData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ; unsigned int arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2;  result = (*arg1)->GetAllData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (*arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomAtomIter_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;  result = (*arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAtomBondIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBAtomBondIter *)new OpenBabel::OBAtomBondIter(); *(OpenBabel::OBAtomBondIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAtomBondIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtomBondIter *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (OpenBabel::OBAtomBondIter *)new OpenBabel::OBAtomBondIter(arg1); *(OpenBabel::OBAtomBondIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBAtomBondIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = 0 ; OpenBabel::OBAtomBondIter *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtomBondIter const & reference is null");
    return 0; }   result = (OpenBabel::OBAtomBondIter *)new OpenBabel::OBAtomBondIter((OpenBabel::OBAtomBondIter const &)*arg1);
  *(OpenBabel::OBAtomBondIter **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBAtomBondIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1HasMore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)((OpenBabel::OBAtomBondIter const *)arg1)->operator bool(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1inc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtomBondIter *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (OpenBabel::OBAtomBondIter *) &(arg1)->operator ++(); *(OpenBabel::OBAtomBondIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1inc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; int arg2 ;
  OpenBabel::OBAtomBondIter result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (int)jarg2;  result = (arg1)->operator ++(arg2);
  *(OpenBabel::OBAtomBondIter **)&jresult = new OpenBabel::OBAtomBondIter((const OpenBabel::OBAtomBondIter &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; OpenBabel::OBBond *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (OpenBabel::OBBond *)((OpenBabel::OBAtomBondIter const *)arg1)->operator ->();
  *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; OpenBabel::OBBond *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (OpenBabel::OBBond *) &((OpenBabel::OBAtomBondIter const *)arg1)->operator *();
  *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = jarg2 ? true : false;  if (arg1) (*arg1)->Visit = arg2; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetIdx(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; unsigned long arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = (unsigned long)jarg2;  (*arg1)->SetId(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetBondOrder(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  (*arg1)->SetBegin(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  (*arg1)->SetEnd(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;  (*arg1)->SetParent(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetLength_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double arg3 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = (double)jarg3;  (*arg1)->SetLength(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetLength_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = (double)jarg2;  (*arg1)->SetLength(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1Set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jint jarg6) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; int arg2 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ; int arg5 ; int arg6 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (int)jarg2;  arg3 = *(OpenBabel::OBAtom **)&jarg3;  arg4 = *(OpenBabel::OBAtom **)&jarg4;  arg5 = (int)jarg5; 
  arg6 = (int)jarg6;  (*arg1)->Set(arg2,arg3,arg4,arg5,arg6); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetAromatic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetAromatic(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetAromatic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  (*arg1)->SetAromatic(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetWedge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetWedge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetWedge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  (*arg1)->SetWedge(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetHash_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetHash(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetHash_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  (*arg1)->SetHash(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetWedgeOrHash_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetWedgeOrHash(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetWedgeOrHash_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  (*arg1)->SetWedgeOrHash(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetInRing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetInRing(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetInRing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  (*arg1)->SetInRing(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetClosure_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetClosure(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetClosure_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  (*arg1)->SetClosure(); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; unsigned long result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (unsigned long)(*arg1)->GetId();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (unsigned int)(*arg1)->GetBondOrder();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (unsigned int)(*arg1)->GetFlags();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetBeginAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (unsigned int)(*arg1)->GetBeginAtomIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetEndAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (unsigned int)(*arg1)->GetEndAtomIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetBeginAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetBeginAtom(); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetEndAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetEndAtom(); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetNbrAtom(arg2); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; OpenBabel::OBMol *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (OpenBabel::OBMol *)(*arg1)->GetParent(); *(OpenBabel::OBMol **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetEquibLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (double)(*arg1)->GetEquibLength();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (double)(*arg1)->GetLength();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetNbrAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (unsigned int)(*arg1)->GetNbrAtomIdx(arg2); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1FindSmallestRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; OpenBabel::OBRing *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (OpenBabel::OBRing *)(*arg1)->FindSmallestRing(); *(OpenBabel::OBRing **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1IsRotor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->IsRotor(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1IsRotor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool)(*arg1)->IsRotor();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1IsPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool)(*arg1)->IsPeriodic();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1IsAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool)(*arg1)->IsAmide();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1IsPrimaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool)(*arg1)->IsPrimaryAmide();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1IsSecondaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool)(*arg1)->IsSecondaryAmide();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1IsTertiaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool)(*arg1)->IsTertiaryAmide();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1IsEster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool)(*arg1)->IsEster();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1IsCarbonyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool)(*arg1)->IsCarbonyl();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1IsClosure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool)(*arg1)->IsClosure();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1IsWedge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool)(*arg1)->IsWedge();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1IsHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool)(*arg1)->IsHash();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1IsWedgeOrHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool)(*arg1)->IsWedgeOrHash();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1IsCisOrTrans(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool)(*arg1)->IsCisOrTrans();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1IsDoubleBondGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool)(*arg1)->IsDoubleBondGeometry();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (bool)(*arg1)->Clear();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBBase *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(std::map< std::string,std::string > **)&jarg2;  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  *(OpenBabel::OBBase **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1ClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (char *)(*arg1)->ClassDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetTitle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; bool arg2 ; char *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (char *)(*arg1)->GetTitle(arg2); if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetTitle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (char *)(*arg1)->GetTitle();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1SetTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; }  (*arg1)->SetTitle((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1HasData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; std::string *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1HasData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; unsigned int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBGenericData * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBGenericData * > & reference is null");
    return ; }   (*arg1)->DeleteData(*arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1DeleteData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; std::string *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1CloneData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->CloneData(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; size_t result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (*arg1)->DataSize(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; std::string *arg2 = 0 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; OpenBabel::DataOrigin arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = (OpenBabel::DataOrigin)jarg2;  result = (*arg1)->GetData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1GetAllData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ; unsigned int arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  arg2 = (unsigned int)jarg2;  result = (*arg1)->GetAllData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (*arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomBondIter_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;  result = (*arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBResidueIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBResidueIter *)new OpenBabel::OBResidueIter(); *(OpenBabel::OBResidueIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBResidueIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBResidueIter *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBResidueIter *)new OpenBabel::OBResidueIter(arg1); *(OpenBabel::OBResidueIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBResidueIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = 0 ; OpenBabel::OBResidueIter *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBResidueIter const & reference is null");
    return 0; }   result = (OpenBabel::OBResidueIter *)new OpenBabel::OBResidueIter((OpenBabel::OBResidueIter const &)*arg1);
  *(OpenBabel::OBResidueIter **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBResidueIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1HasMore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (bool)((OpenBabel::OBResidueIter const *)arg1)->operator bool(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1inc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; OpenBabel::OBResidueIter *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (OpenBabel::OBResidueIter *) &(arg1)->operator ++(); *(OpenBabel::OBResidueIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1inc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; int arg2 ;
  OpenBabel::OBResidueIter result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (int)jarg2;  result = (arg1)->operator ++(arg2);
  *(OpenBabel::OBResidueIter **)&jresult = new OpenBabel::OBResidueIter((const OpenBabel::OBResidueIter &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; OpenBabel::OBResidue *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)((OpenBabel::OBResidueIter const *)arg1)->operator ->();
  *(OpenBabel::OBResidue **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; OpenBabel::OBResidue *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (OpenBabel::OBResidue *) &((OpenBabel::OBResidueIter const *)arg1)->operator *();
  *(OpenBabel::OBResidue **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1AddAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  (*arg1)->AddAtom(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1InsertAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  (*arg1)->InsertAtom(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1RemoveAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  (*arg1)->RemoveAtom(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1SetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (*arg1)->SetName((std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1SetNum_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->SetNum(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1SetNum_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; std::string arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ; (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  (*arg1)->SetNum(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1SetChain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; char arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = (char)jarg2;  (*arg1)->SetChain(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1SetChainNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->SetChainNum(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->SetIdx(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1SetInsertionCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; char arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = (char)jarg2;  (*arg1)->SetInsertionCode(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1SetAtomID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  std::string *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (*arg1)->SetAtomID(arg2,(std::string const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1SetHetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool arg3 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = jarg3 ? true : false;  (*arg1)->SetHetAtom(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1SetSerialNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  unsigned int arg3 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = (unsigned int)jarg3;  (*arg1)->SetSerialNum(arg2,arg3); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (*arg1)->GetName();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (int)(*arg1)->GetNum(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetNumString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (*arg1)->GetNumString();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetNumAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (unsigned int)(*arg1)->GetNumAtoms();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jchar JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetChain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; char result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (char)(*arg1)->GetChain(); jresult = (jchar)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetChainNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (unsigned int)(*arg1)->GetChainNum();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetResKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (unsigned int)(*arg1)->GetResKey();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBAtom * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (*arg1)->GetAtoms();
  *(std::vector< OpenBabel::OBAtom * > **)&jresult = new std::vector< OpenBabel::OBAtom * >((const std::vector< OpenBabel::OBAtom * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetBonds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; bool arg2 ;
  SwigValueWrapper< std::vector< OpenBabel::OBBond * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = jarg2 ? true : false;  result = (*arg1)->GetBonds(arg2);
  *(std::vector< OpenBabel::OBBond * > **)&jresult = new std::vector< OpenBabel::OBBond * >((const std::vector< OpenBabel::OBBond * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetBonds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBBond * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (*arg1)->GetBonds();
  *(std::vector< OpenBabel::OBBond * > **)&jresult = new std::vector< OpenBabel::OBBond * >((const std::vector< OpenBabel::OBBond * > &)result); 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetAtomID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; std::string result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (*arg1)->GetAtomID(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetSerialNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; unsigned int result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (unsigned int)(*arg1)->GetSerialNum(arg2); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jchar JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetInsertionCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; char result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (char)(*arg1)->GetInsertionCode();
  jresult = (jchar)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetAminoAcidProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->GetAminoAcidProperty(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetAtomProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; int arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = (int)jarg3; 
  result = (bool)(*arg1)->GetAtomProperty(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetResidueProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->GetResidueProperty(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1IsHetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (bool)(*arg1)->IsHetAtom(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1IsResidueType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsResidueType(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1BeginAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBAtom * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (*arg1)->BeginAtoms();
  *(OpenBabel::OBAtomIterator **)&jresult = new OpenBabel::OBAtomIterator((const OpenBabel::OBAtomIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1EndAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBAtom * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (*arg1)->EndAtoms();
  *(OpenBabel::OBAtomIterator **)&jresult = new OpenBabel::OBAtomIterator((const OpenBabel::OBAtomIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1BeginAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::vector< OpenBabel::OBAtom * >::iterator *arg2 = 0 ; OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = *(std::vector< OpenBabel::OBAtom * >::iterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBAtom * >::iterator & reference is null");
    return 0; }   result = (OpenBabel::OBAtom *)(*arg1)->BeginAtom(*arg2); *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1NextAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::vector< OpenBabel::OBAtom * >::iterator *arg2 = 0 ; OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = *(std::vector< OpenBabel::OBAtom * >::iterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBAtom * >::iterator & reference is null");
    return 0; }   result = (OpenBabel::OBAtom *)(*arg1)->NextAtom(*arg2); *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (bool)(*arg1)->Clear(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBBase *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(std::map< std::string,std::string > **)&jarg2;  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  *(OpenBabel::OBBase **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1ClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (char *)(*arg1)->ClassDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetTitle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; bool arg2 ; char *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (char *)(*arg1)->GetTitle(arg2); if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetTitle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (char *)(*arg1)->GetTitle();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1SetTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; }  (*arg1)->SetTitle((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1HasData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; std::string *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1HasData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; unsigned int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(std::vector< OpenBabel::OBGenericData * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBGenericData * > & reference is null");
    return ; }   (*arg1)->DeleteData(*arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1DeleteData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; std::string *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1CloneData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->CloneData(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; size_t result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (*arg1)->DataSize(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; std::string *arg2 = 0 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; OpenBabel::DataOrigin arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = (OpenBabel::DataOrigin)jarg2;  result = (*arg1)->GetData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1GetAllData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ; unsigned int arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  arg2 = (unsigned int)jarg2;  result = (*arg1)->GetAllData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (*arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueIter_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;  result = (*arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBResidueAtomIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBResidueAtomIter *)new OpenBabel::OBResidueAtomIter();
  *(OpenBabel::OBResidueAtomIter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBResidueAtomIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ; OpenBabel::OBResidueAtomIter *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (OpenBabel::OBResidueAtomIter *)new OpenBabel::OBResidueAtomIter(arg1);
  *(OpenBabel::OBResidueAtomIter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBResidueAtomIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = 0 ; OpenBabel::OBResidueAtomIter *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBResidueAtomIter const & reference is null");
    return 0; }  
  result = (OpenBabel::OBResidueAtomIter *)new OpenBabel::OBResidueAtomIter((OpenBabel::OBResidueAtomIter const &)*arg1);
  *(OpenBabel::OBResidueAtomIter **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBResidueAtomIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1HasMore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)((OpenBabel::OBResidueAtomIter const *)arg1)->operator bool(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1inc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBResidueAtomIter *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (OpenBabel::OBResidueAtomIter *) &(arg1)->operator ++();
  *(OpenBabel::OBResidueAtomIter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1inc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int arg2 ;
  OpenBabel::OBResidueAtomIter result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2;  result = (arg1)->operator ++(arg2);
  *(OpenBabel::OBResidueAtomIter **)&jresult = new OpenBabel::OBResidueAtomIter((const OpenBabel::OBResidueAtomIter &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBResidueAtomIter const *)arg1)->operator ->();
  *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBAtom *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *) &((OpenBabel::OBResidueAtomIter const *)arg1)->operator *();
  *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = jarg2 ? true : false;  if (arg1) (*arg1)->Visit = arg2; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1Duplicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  (*arg1)->Duplicate(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetIdx(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned long arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (unsigned long)jarg2;  (*arg1)->SetId(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetHyb(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetAtomicNum(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->SetIsotope(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetImplicitHCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetImplicitHCount(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (int)jarg2;  (*arg1)->SetFormalCharge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; short arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (short)jarg2;  (*arg1)->SetSpinMultiplicity(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (*arg1)->SetType((std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (double)jarg2;  (*arg1)->SetPartialCharge(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::vector3 *arg2 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null"); return ; }  
  (*arg1)->SetVector((OpenBabel::vector3 const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double arg2 ; double arg3 ; double arg4 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (double)jarg2; 
  arg3 = (double)jarg3;  arg4 = (double)jarg4;  (*arg1)->SetVector(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  (*arg1)->SetVector(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double **arg2 = (double **) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(double ***)&jarg2; 
  (*arg1)->SetCoordPtr(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBResidue **)&jarg2;  (*arg1)->SetResidue(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;  (*arg1)->SetParent(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetAromatic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetAromatic(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetAromatic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  (*arg1)->SetAromatic(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetInRing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = jarg2 ? true : false;  (*arg1)->SetInRing(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetInRing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  (*arg1)->SetInRing(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1ClearCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  (*arg1)->ClearCoordPtr(); }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (int)(*arg1)->GetFormalCharge();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetAtomicNum();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned short result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned short)(*arg1)->GetIsotope(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (int)(*arg1)->GetSpinMultiplicity();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetAtomicMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (double)(*arg1)->GetAtomicMass();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetExactMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (double)(*arg1)->GetExactMass();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetIndex();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned long result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned long)(*arg1)->GetId(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetCoordinateIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCoordinateIdx(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetExplicitDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetExplicitDegree(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetTotalDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetTotalDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetExplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetExplicitValence(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetTotalValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetTotalValence();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetHyb();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jshort JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetImplicitHCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned char result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned char)(*arg1)->GetImplicitHCount(); jresult = (jshort)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetHvyDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetHvyDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetHeteroDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->GetHeteroDegree();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (char *)(*arg1)->GetType();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (double)(*arg1)->GetX();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (double)(*arg1)->GetY();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (double)(*arg1)->GetZ();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (double)(*arg1)->x();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (double)(*arg1)->y();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (double)(*arg1)->z();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (double *)(*arg1)->GetCoordinate();
  *(double **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::vector3 *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (OpenBabel::vector3 *) &(*arg1)->GetVector(); *(OpenBabel::vector3 **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (double)(*arg1)->GetPartialCharge();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBResidue *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)(*arg1)->GetResidue(); *(OpenBabel::OBResidue **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBMol *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (OpenBabel::OBMol *)(*arg1)->GetParent(); *(OpenBabel::OBMol **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetNewBondVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ; double arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg3 = (double)jarg3;  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1BeginBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (*arg1)->BeginBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1EndBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBBond * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (*arg1)->EndBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((const OpenBabel::OBBondIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1BeginBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1NextBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; OpenBabel::OBBond *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2); *(OpenBabel::OBBond **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1BeginNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1NextNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ; OpenBabel::OBAtom *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return 0; }  
  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2); *(OpenBabel::OBAtom **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int arg2 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)(*arg1)->GetDistance(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetDistance_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = (OpenBabel::vector3 *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetAngle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int arg2 ; int arg3 ;
  double result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = (int)jarg3;  result = (double)(*arg1)->GetAngle(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetAngle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;  arg3 = *(OpenBabel::OBAtom **)&jarg3;  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1NewResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  (*arg1)->NewResidue(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1AddResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBResidue **)&jarg2;  (*arg1)->AddResidue(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1DeleteResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  (*arg1)->DeleteResidue(); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1AddBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2;  (*arg1)->AddBond(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1InsertBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBBondIterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null"); return ; }  
  arg3 = *(OpenBabel::OBBond **)&jarg3;  (*arg1)->InsertBond(*arg2,arg3); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1DeleteBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(*arg1)->DeleteBond(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1ClearBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  (*arg1)->ClearBond(); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1HtoMethyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->HtoMethyl();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetHybAndGeom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->SetHybAndGeom(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1CountFreeOxygens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountFreeOxygens(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1CountFreeSulfurs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountFreeSulfurs(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1ExplicitHydrogenCount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool arg2 ; unsigned int result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1ExplicitHydrogenCount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1MemberOfRingCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingCount(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1MemberOfRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingSize(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1CountRingBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (unsigned int)(*arg1)->CountRingBonds();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SmallestBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (double)(*arg1)->SmallestBondAngle();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1AverageBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (double)(*arg1)->AverageBondAngle();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1LewisAcidBaseCounts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  SwigValueWrapper< std::pair< int,int > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (*arg1)->LewisAcidBaseCounts();
  *(std::pair< int,int > **)&jresult = new std::pair< int,int >((const std::pair< int,int > &)result);  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1HasResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->HasResidue();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsHetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHetAtom();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int arg2 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (bool)(*arg1)->IsElement(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsInRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsInRingSize(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsHeteroatom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHeteroatom();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsConnected(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsOneThree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneThree(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsOneFour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneFour(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsCarboxylOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsCarboxylOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsPhosphateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsPhosphateOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsSulfateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsSulfateOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsNitroOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsNitroOxygen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsAmideNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsAmideNitrogen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsPolarHydrogen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsNonPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsNonPolarHydrogen();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsAromaticNOxide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsAromaticNOxide();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsChiral();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsPeriodic();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsAxial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsAxial();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsHbondAcceptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHbondAcceptor();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsHbondAcceptorSimple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHbondAcceptorSimple();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsHbondDonor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHbondDonor();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsHbondDonorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsHbondDonorH();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1IsMetal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->IsMetal();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1HasAlphaBetaUnsat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool arg2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1HasAlphaBetaUnsat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->HasAlphaBetaUnsat();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1HasBondOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int arg2 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (bool)(*arg1)->HasBondOfOrder(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1CountBondsOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int arg2 ; int result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->CountBondsOfOrder(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1HighestBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (int)(*arg1)->HighestBondOrder();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1HasNonSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->HasNonSingleBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1HasSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->HasSingleBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1HasDoubleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->HasDoubleBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1HasAromaticBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->HasAromaticBond();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1MatchesSMARTS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; char *arg2 = (char *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2); jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (bool)(*arg1)->Clear();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ; OpenBabel::OBBase *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(std::map< std::string,std::string > **)&jarg2;  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map< std::string,std::string > const *)arg2,arg3);
  *(OpenBabel::OBBase **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1ClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (char *)(*arg1)->ClassDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetTitle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; bool arg2 ; char *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (char *)(*arg1)->GetTitle(arg2); if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetTitle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (char *)(*arg1)->GetTitle();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1SetTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; }  (*arg1)->SetTitle((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1HasData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; std::string *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->HasData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1HasData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int arg2 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (bool)(*arg1)->HasData(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->DeleteData(arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(std::vector< OpenBabel::OBGenericData * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OpenBabel::OBGenericData * > & reference is null");
    return ; }   (*arg1)->DeleteData(*arg2); }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1DeleteData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; std::string *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(*arg1)->DeleteData((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1CloneData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = *(OpenBabel::OBGenericData **)&jarg2;  (*arg1)->CloneData(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; size_t result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (*arg1)->DataSize();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; std::string *arg2 = 0 ;
  OpenBabel::OBGenericData *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData((std::string const &)*arg2);
  *(OpenBabel::OBGenericData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::vector< OpenBabel::OBGenericData * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (std::vector< OpenBabel::OBGenericData * > *) &(*arg1)->GetData();
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; OpenBabel::DataOrigin arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (OpenBabel::DataOrigin)jarg2;  result = (*arg1)->GetData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1GetAllData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ; unsigned int arg2 ;
  std::vector< OpenBabel::OBGenericData * > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  arg2 = (unsigned int)jarg2;  result = (*arg1)->GetAllData(arg2);
  *(std::vector< OpenBabel::OBGenericData * > **)&jresult = new std::vector< OpenBabel::OBGenericData * >((const std::vector< OpenBabel::OBGenericData * > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (*arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueAtomIter_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  SwigValueWrapper< std::vector< OpenBabel::OBGenericData * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;  result = (*arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((const OpenBabel::OBDataIterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolAngleIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBMolAngleIter *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBMolAngleIter *)new OpenBabel::OBMolAngleIter(); *(OpenBabel::OBMolAngleIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolAngleIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBMolAngleIter *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolAngleIter *)new OpenBabel::OBMolAngleIter(arg1); *(OpenBabel::OBMolAngleIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolAngleIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAngleIter *arg1 = 0 ; OpenBabel::OBMolAngleIter *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolAngleIter **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolAngleIter const & reference is null");
    return 0; }   result = (OpenBabel::OBMolAngleIter *)new OpenBabel::OBMolAngleIter((OpenBabel::OBMolAngleIter const &)*arg1);
  *(OpenBabel::OBMolAngleIter **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBMolAngleIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAngleIter *arg1 = (OpenBabel::OBMolAngleIter *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBMolAngleIter **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAngleIter_1HasMore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolAngleIter *arg1 = (OpenBabel::OBMolAngleIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAngleIter **)&jarg1; 
  result = (bool)((OpenBabel::OBMolAngleIter const *)arg1)->operator bool(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAngleIter_1inc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAngleIter *arg1 = (OpenBabel::OBMolAngleIter *) 0 ;
  OpenBabel::OBMolAngleIter *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAngleIter **)&jarg1; 
  result = (OpenBabel::OBMolAngleIter *) &(arg1)->operator ++(); *(OpenBabel::OBMolAngleIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolAngleIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolAngleIter *arg1 = (OpenBabel::OBMolAngleIter *) 0 ; std::vector< unsigned int > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolAngleIter **)&jarg1; 
  result = ((OpenBabel::OBMolAngleIter const *)arg1)->operator *();
  *(std::vector< unsigned int > **)&jresult = new std::vector< unsigned int >((const std::vector< unsigned int > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolTorsionIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBMolTorsionIter *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBMolTorsionIter *)new OpenBabel::OBMolTorsionIter();
  *(OpenBabel::OBMolTorsionIter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolTorsionIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBMolTorsionIter *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolTorsionIter *)new OpenBabel::OBMolTorsionIter(arg1);
  *(OpenBabel::OBMolTorsionIter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolTorsionIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolTorsionIter *arg1 = 0 ; OpenBabel::OBMolTorsionIter *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolTorsionIter **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolTorsionIter const & reference is null");
    return 0; }  
  result = (OpenBabel::OBMolTorsionIter *)new OpenBabel::OBMolTorsionIter((OpenBabel::OBMolTorsionIter const &)*arg1);
  *(OpenBabel::OBMolTorsionIter **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBMolTorsionIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolTorsionIter *arg1 = (OpenBabel::OBMolTorsionIter *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBMolTorsionIter **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolTorsionIter_1HasMore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolTorsionIter *arg1 = (OpenBabel::OBMolTorsionIter *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolTorsionIter **)&jarg1; 
  result = (bool)((OpenBabel::OBMolTorsionIter const *)arg1)->operator bool(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolTorsionIter_1inc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolTorsionIter *arg1 = (OpenBabel::OBMolTorsionIter *) 0 ;
  OpenBabel::OBMolTorsionIter *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolTorsionIter **)&jarg1;  result = (OpenBabel::OBMolTorsionIter *) &(arg1)->operator ++();
  *(OpenBabel::OBMolTorsionIter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolTorsionIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolTorsionIter *arg1 = (OpenBabel::OBMolTorsionIter *) 0 ;
  std::vector< unsigned int > result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolTorsionIter **)&jarg1; 
  result = ((OpenBabel::OBMolTorsionIter const *)arg1)->operator *();
  *(std::vector< unsigned int > **)&jresult = new std::vector< unsigned int >((const std::vector< unsigned int > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolPairIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBMolPairIter *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBMolPairIter *)new OpenBabel::OBMolPairIter(); *(OpenBabel::OBMolPairIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolPairIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBMolPairIter *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolPairIter *)new OpenBabel::OBMolPairIter(arg1); *(OpenBabel::OBMolPairIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolPairIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolPairIter *arg1 = 0 ; OpenBabel::OBMolPairIter *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolPairIter **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolPairIter const & reference is null");
    return 0; }   result = (OpenBabel::OBMolPairIter *)new OpenBabel::OBMolPairIter((OpenBabel::OBMolPairIter const &)*arg1);
  *(OpenBabel::OBMolPairIter **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBMolPairIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolPairIter *arg1 = (OpenBabel::OBMolPairIter *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBMolPairIter **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolPairIter_1HasMore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolPairIter *arg1 = (OpenBabel::OBMolPairIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolPairIter **)&jarg1; 
  result = (bool)((OpenBabel::OBMolPairIter const *)arg1)->operator bool(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolPairIter_1inc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolPairIter *arg1 = (OpenBabel::OBMolPairIter *) 0 ; OpenBabel::OBMolPairIter *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolPairIter **)&jarg1; 
  result = (OpenBabel::OBMolPairIter *) &(arg1)->operator ++(); *(OpenBabel::OBMolPairIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolPairIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolPairIter *arg1 = (OpenBabel::OBMolPairIter *) 0 ; std::vector< unsigned int > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolPairIter **)&jarg1; 
  result = ((OpenBabel::OBMolPairIter const *)arg1)->operator *();
  *(std::vector< unsigned int > **)&jresult = new std::vector< unsigned int >((const std::vector< unsigned int > &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolRingIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBMolRingIter *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBMolRingIter *)new OpenBabel::OBMolRingIter(); *(OpenBabel::OBMolRingIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolRingIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBMolRingIter *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolRingIter *)new OpenBabel::OBMolRingIter(arg1); *(OpenBabel::OBMolRingIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBMolRingIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = 0 ; OpenBabel::OBMolRingIter *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolRingIter const & reference is null");
    return 0; }   result = (OpenBabel::OBMolRingIter *)new OpenBabel::OBMolRingIter((OpenBabel::OBMolRingIter const &)*arg1);
  *(OpenBabel::OBMolRingIter **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBMolRingIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1HasMore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  result = (bool)((OpenBabel::OBMolRingIter const *)arg1)->operator bool(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1inc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; OpenBabel::OBMolRingIter *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  result = (OpenBabel::OBMolRingIter *) &(arg1)->operator ++(); *(OpenBabel::OBMolRingIter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1inc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; int arg2 ;
  OpenBabel::OBMolRingIter result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  arg2 = (int)jarg2;  result = (arg1)->operator ++(arg2);
  *(OpenBabel::OBMolRingIter **)&jresult = new OpenBabel::OBMolRingIter((const OpenBabel::OBMolRingIter &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; OpenBabel::OBRing *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  result = (OpenBabel::OBRing *)((OpenBabel::OBMolRingIter const *)arg1)->operator ->();
  *(OpenBabel::OBRing **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; OpenBabel::OBRing *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  result = (OpenBabel::OBRing *) &((OpenBabel::OBMolRingIter const *)arg1)->operator *();
  *(OpenBabel::OBRing **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1ring_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1;  arg2 = (int)jarg2;  if (arg1) (*arg1)->ring_id = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1ring_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1;  result = (int) ((*arg1)->ring_id); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; std::vector< int > *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1;  arg2 = *(std::vector< int > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null"); return ; }  
  if (arg1) (*arg1)->_path = *arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; std::vector< int > *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  result = (std::vector< int > *) & ((*arg1)->_path); *(std::vector< int > **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1_1pathset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; OpenBabel::OBBitVec *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1;  arg2 = *(OpenBabel::OBBitVec **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null"); return ; }  
  if (arg1) (*arg1)->_pathset = *arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1_1pathset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; OpenBabel::OBBitVec *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  result = (OpenBabel::OBBitVec *) & ((*arg1)->_pathset); *(OpenBabel::OBBitVec **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1Size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; size_t result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1;  result = (*arg1)->Size(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1PathSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; size_t result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1;  result = (*arg1)->PathSize(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1;  result = (bool)(*arg1)->IsAromatic(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1SetType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; }  (*arg1)->SetType(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1SetType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1;  arg2 = *(std::string **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return ; }  
  (*arg1)->SetType(*arg2); }
SWIGEXPORT jstring JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; char *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1;  result = (char *)(*arg1)->GetType();
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1GetRootAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1;  result = (unsigned int)(*arg1)->GetRootAtom();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1IsMember_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1;  arg2 = *(OpenBabel::OBAtom **)&jarg2;  result = (bool)(*arg1)->IsMember(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1IsMember_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1;  arg2 = *(OpenBabel::OBBond **)&jarg2;  result = (bool)(*arg1)->IsMember(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; int arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1;  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsInRing(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;  (*arg1)->SetParent(arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; OpenBabel::OBMol *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  result = (OpenBabel::OBMol *)(*arg1)->GetParent(); *(OpenBabel::OBMol **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMolRingIter_1findCenterAndNormal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ; OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ; OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 *arg3 = 0 ; OpenBabel::vector3 *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; arg1 = *(OpenBabel::OBMolRingIter **)&jarg1;  arg2 = *(OpenBabel::vector3 **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg3 = *(OpenBabel::vector3 **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  arg4 = *(OpenBabel::vector3 **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null"); return 0; }  
  result = (bool)(*arg1)->findCenterAndNormal(*arg2,*arg3,*arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBTetraNonPlanarStereo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBTetraNonPlanarStereo *arg1 = (OpenBabel::OBTetraNonPlanarStereo *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBTetraNonPlanarStereo **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBTetraPlanarStereo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBTetraPlanarStereo *arg1 = (OpenBabel::OBTetraPlanarStereo *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBTetraPlanarStereo **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBTetrahedralStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBTetrahedralStereo *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBTetrahedralStereo *)new OpenBabel::OBTetrahedralStereo(arg1);
  *(OpenBabel::OBTetrahedralStereo **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBTetrahedralStereo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBTetrahedralStereo *arg1 = (OpenBabel::OBTetrahedralStereo *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBTetrahedralStereo **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralStereo_1IsValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBTetrahedralStereo *arg1 = (OpenBabel::OBTetrahedralStereo *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTetrahedralStereo **)&jarg1; 
  result = (bool)((OpenBabel::OBTetrahedralStereo const *)arg1)->IsValid(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralStereo_1SetConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBTetrahedralStereo *arg1 = (OpenBabel::OBTetrahedralStereo *) 0 ; OpenBabel::OBTetrahedralConfig *arg2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBTetrahedralStereo **)&jarg1; 
  arg2 = *(OpenBabel::OBTetrahedralConfig **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBTetrahedralConfig const & reference is null");
    return ; }   OpenBabel_OBTetrahedralStereo_SetConfig(arg1,(OpenBabel::OBTetrahedralConfig const &)*arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralStereo_1GetConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ; OpenBabel::OBTetrahedralStereo *arg1 = (OpenBabel::OBTetrahedralStereo *) 0 ;
  OpenBabel::OBStereo::Winding arg2 ; OpenBabel::OBStereo::View arg3 ; OpenBabel::OBTetrahedralConfig result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTetrahedralStereo **)&jarg1;  arg2 = (OpenBabel::OBStereo::Winding)jarg2; 
  arg3 = (OpenBabel::OBStereo::View)jarg3;  result = OpenBabel_OBTetrahedralStereo_GetConfig__SWIG_0(arg1,arg2,arg3);
  *(OpenBabel::OBTetrahedralConfig **)&jresult = new OpenBabel::OBTetrahedralConfig((const OpenBabel::OBTetrahedralConfig &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralStereo_1GetConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBTetrahedralStereo *arg1 = (OpenBabel::OBTetrahedralStereo *) 0 ;
  OpenBabel::OBStereo::Winding arg2 ; OpenBabel::OBTetrahedralConfig result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBTetrahedralStereo **)&jarg1;  arg2 = (OpenBabel::OBStereo::Winding)jarg2; 
  result = OpenBabel_OBTetrahedralStereo_GetConfig__SWIG_0(arg1,arg2);
  *(OpenBabel::OBTetrahedralConfig **)&jresult = new OpenBabel::OBTetrahedralConfig((const OpenBabel::OBTetrahedralConfig &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralStereo_1GetConfig_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBTetrahedralStereo *arg1 = (OpenBabel::OBTetrahedralStereo *) 0 ;
  OpenBabel::OBTetrahedralConfig result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBTetrahedralStereo **)&jarg1;  result = OpenBabel_OBTetrahedralStereo_GetConfig__SWIG_0(arg1);
  *(OpenBabel::OBTetrahedralConfig **)&jresult = new OpenBabel::OBTetrahedralConfig((const OpenBabel::OBTetrahedralConfig &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralStereo_1GetConfig_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ; OpenBabel::OBTetrahedralStereo *arg1 = (OpenBabel::OBTetrahedralStereo *) 0 ; unsigned long arg2 ;
  OpenBabel::OBStereo::Winding arg3 ; OpenBabel::OBStereo::View arg4 ; OpenBabel::OBTetrahedralConfig result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTetrahedralStereo **)&jarg1;  arg2 = (unsigned long)jarg2; 
  arg3 = (OpenBabel::OBStereo::Winding)jarg3;  arg4 = (OpenBabel::OBStereo::View)jarg4; 
  result = OpenBabel_OBTetrahedralStereo_GetConfig__SWIG_3(arg1,arg2,arg3,arg4);
  *(OpenBabel::OBTetrahedralConfig **)&jresult = new OpenBabel::OBTetrahedralConfig((const OpenBabel::OBTetrahedralConfig &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralStereo_1GetConfig_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ; OpenBabel::OBTetrahedralStereo *arg1 = (OpenBabel::OBTetrahedralStereo *) 0 ; unsigned long arg2 ;
  OpenBabel::OBStereo::Winding arg3 ; OpenBabel::OBTetrahedralConfig result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBTetrahedralStereo **)&jarg1;  arg2 = (unsigned long)jarg2;  arg3 = (OpenBabel::OBStereo::Winding)jarg3; 
  result = OpenBabel_OBTetrahedralStereo_GetConfig__SWIG_3(arg1,arg2,arg3);
  *(OpenBabel::OBTetrahedralConfig **)&jresult = new OpenBabel::OBTetrahedralConfig((const OpenBabel::OBTetrahedralConfig &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralStereo_1GetConfig_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBTetrahedralStereo *arg1 = (OpenBabel::OBTetrahedralStereo *) 0 ; unsigned long arg2 ;
  OpenBabel::OBTetrahedralConfig result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBTetrahedralStereo **)&jarg1;  arg2 = (unsigned long)jarg2; 
  result = OpenBabel_OBTetrahedralStereo_GetConfig__SWIG_3(arg1,arg2);
  *(OpenBabel::OBTetrahedralConfig **)&jresult = new OpenBabel::OBTetrahedralConfig((const OpenBabel::OBTetrahedralConfig &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBCisTransStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBCisTransStereo *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBCisTransStereo *)new OpenBabel::OBCisTransStereo(arg1);
  *(OpenBabel::OBCisTransStereo **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBCisTransStereo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBCisTransStereo *arg1 = (OpenBabel::OBCisTransStereo *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBCisTransStereo **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransStereo_1IsValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBCisTransStereo *arg1 = (OpenBabel::OBCisTransStereo *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBCisTransStereo **)&jarg1; 
  result = (bool)((OpenBabel::OBCisTransStereo const *)arg1)->IsValid(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransStereo_1IsOnSameAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBCisTransStereo *arg1 = (OpenBabel::OBCisTransStereo *) 0 ; unsigned long arg2 ;
  unsigned long arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBCisTransStereo **)&jarg1; 
  arg2 = (unsigned long)jarg2;  arg3 = (unsigned long)jarg3; 
  result = (bool)((OpenBabel::OBCisTransStereo const *)arg1)->IsOnSameAtom(arg2,arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransStereo_1IsTrans(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBCisTransStereo *arg1 = (OpenBabel::OBCisTransStereo *) 0 ; unsigned long arg2 ;
  unsigned long arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBCisTransStereo **)&jarg1; 
  arg2 = (unsigned long)jarg2;  arg3 = (unsigned long)jarg3; 
  result = (bool)((OpenBabel::OBCisTransStereo const *)arg1)->IsTrans(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransStereo_1IsCis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBCisTransStereo *arg1 = (OpenBabel::OBCisTransStereo *) 0 ; unsigned long arg2 ;
  unsigned long arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBCisTransStereo **)&jarg1; 
  arg2 = (unsigned long)jarg2;  arg3 = (unsigned long)jarg3; 
  result = (bool)((OpenBabel::OBCisTransStereo const *)arg1)->IsCis(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransStereo_1GetTransRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBCisTransStereo *arg1 = (OpenBabel::OBCisTransStereo *) 0 ; unsigned long arg2 ;
  unsigned long result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBCisTransStereo **)&jarg1; 
  arg2 = (unsigned long)jarg2;  result = (unsigned long)((OpenBabel::OBCisTransStereo const *)arg1)->GetTransRef(arg2);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransStereo_1GetCisRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBCisTransStereo *arg1 = (OpenBabel::OBCisTransStereo *) 0 ; unsigned long arg2 ;
  unsigned long result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBCisTransStereo **)&jarg1; 
  arg2 = (unsigned long)jarg2;  result = (unsigned long)((OpenBabel::OBCisTransStereo const *)arg1)->GetCisRef(arg2);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransStereo_1SetConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBCisTransStereo *arg1 = (OpenBabel::OBCisTransStereo *) 0 ; OpenBabel::OBCisTransConfig *arg2 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBCisTransStereo **)&jarg1; 
  arg2 = *(OpenBabel::OBCisTransConfig **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBCisTransConfig const & reference is null");
    return ; }   OpenBabel_OBCisTransStereo_SetConfig(arg1,(OpenBabel::OBCisTransConfig const &)*arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransStereo_1GetConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBCisTransStereo *arg1 = (OpenBabel::OBCisTransStereo *) 0 ; OpenBabel::OBStereo::Shape arg2 ;
  OpenBabel::OBCisTransConfig result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBCisTransStereo **)&jarg1; 
  arg2 = (OpenBabel::OBStereo::Shape)jarg2;  result = OpenBabel_OBCisTransStereo_GetConfig__SWIG_0(arg1,arg2);
  *(OpenBabel::OBCisTransConfig **)&jresult = new OpenBabel::OBCisTransConfig((const OpenBabel::OBCisTransConfig &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransStereo_1GetConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBCisTransStereo *arg1 = (OpenBabel::OBCisTransStereo *) 0 ;
  OpenBabel::OBCisTransConfig result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBCisTransStereo **)&jarg1; 
  result = OpenBabel_OBCisTransStereo_GetConfig__SWIG_0(arg1);
  *(OpenBabel::OBCisTransConfig **)&jresult = new OpenBabel::OBCisTransConfig((const OpenBabel::OBCisTransConfig &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransStereo_1GetConfig_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ; OpenBabel::OBCisTransStereo *arg1 = (OpenBabel::OBCisTransStereo *) 0 ; unsigned long arg2 ;
  OpenBabel::OBStereo::Shape arg3 ; OpenBabel::OBCisTransConfig result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBCisTransStereo **)&jarg1;  arg2 = (unsigned long)jarg2;  arg3 = (OpenBabel::OBStereo::Shape)jarg3; 
  result = OpenBabel_OBCisTransStereo_GetConfig__SWIG_2(arg1,arg2,arg3);
  *(OpenBabel::OBCisTransConfig **)&jresult = new OpenBabel::OBCisTransConfig((const OpenBabel::OBCisTransConfig &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransStereo_1GetConfig_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBCisTransStereo *arg1 = (OpenBabel::OBCisTransStereo *) 0 ; unsigned long arg2 ;
  OpenBabel::OBCisTransConfig result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBCisTransStereo **)&jarg1; 
  arg2 = (unsigned long)jarg2;  result = OpenBabel_OBCisTransStereo_GetConfig__SWIG_2(arg1,arg2);
  *(OpenBabel::OBCisTransConfig **)&jresult = new OpenBabel::OBCisTransConfig((const OpenBabel::OBCisTransConfig &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBSquarePlanarStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ; OpenBabel::OBSquarePlanarStereo *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBSquarePlanarStereo *)new OpenBabel::OBSquarePlanarStereo(arg1);
  *(OpenBabel::OBSquarePlanarStereo **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBSquarePlanarStereo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSquarePlanarStereo *arg1 = (OpenBabel::OBSquarePlanarStereo *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBSquarePlanarStereo **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarStereo_1IsValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBSquarePlanarStereo *arg1 = (OpenBabel::OBSquarePlanarStereo *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSquarePlanarStereo **)&jarg1; 
  result = (bool)((OpenBabel::OBSquarePlanarStereo const *)arg1)->IsValid(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarStereo_1IsTrans(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBSquarePlanarStereo *arg1 = (OpenBabel::OBSquarePlanarStereo *) 0 ; unsigned long arg2 ;
  unsigned long arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSquarePlanarStereo **)&jarg1; 
  arg2 = (unsigned long)jarg2;  arg3 = (unsigned long)jarg3; 
  result = (bool)((OpenBabel::OBSquarePlanarStereo const *)arg1)->IsTrans(arg2,arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarStereo_1IsCis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ; OpenBabel::OBSquarePlanarStereo *arg1 = (OpenBabel::OBSquarePlanarStereo *) 0 ; unsigned long arg2 ;
  unsigned long arg3 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSquarePlanarStereo **)&jarg1; 
  arg2 = (unsigned long)jarg2;  arg3 = (unsigned long)jarg3; 
  result = (bool)((OpenBabel::OBSquarePlanarStereo const *)arg1)->IsCis(arg2,arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarStereo_1GetTransRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBSquarePlanarStereo *arg1 = (OpenBabel::OBSquarePlanarStereo *) 0 ; unsigned long arg2 ;
  unsigned long result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSquarePlanarStereo **)&jarg1; 
  arg2 = (unsigned long)jarg2;  result = (unsigned long)((OpenBabel::OBSquarePlanarStereo const *)arg1)->GetTransRef(arg2);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarStereo_1GetCisRefs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBSquarePlanarStereo *arg1 = (OpenBabel::OBSquarePlanarStereo *) 0 ; unsigned long arg2 ;
  SwigValueWrapper< std::vector< unsigned long > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSquarePlanarStereo **)&jarg1;  arg2 = (unsigned long)jarg2; 
  result = ((OpenBabel::OBSquarePlanarStereo const *)arg1)->GetCisRefs(arg2);
  *(std::vector< unsigned long > **)&jresult = new std::vector< unsigned long >((const std::vector< unsigned long > &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarStereo_1SetConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBSquarePlanarStereo *arg1 = (OpenBabel::OBSquarePlanarStereo *) 0 ; OpenBabel::OBSquarePlanarConfig *arg2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OpenBabel::OBSquarePlanarStereo **)&jarg1; 
  arg2 = *(OpenBabel::OBSquarePlanarConfig **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBSquarePlanarConfig const & reference is null");
    return ; }   OpenBabel_OBSquarePlanarStereo_SetConfig(arg1,(OpenBabel::OBSquarePlanarConfig const &)*arg2); }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarStereo_1GetConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OpenBabel::OBSquarePlanarStereo *arg1 = (OpenBabel::OBSquarePlanarStereo *) 0 ;
  OpenBabel::OBStereo::Shape arg2 ; OpenBabel::OBSquarePlanarConfig result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSquarePlanarStereo **)&jarg1;  arg2 = (OpenBabel::OBStereo::Shape)jarg2; 
  result = OpenBabel_OBSquarePlanarStereo_GetConfig__SWIG_0(arg1,arg2);
  *(OpenBabel::OBSquarePlanarConfig **)&jresult = new OpenBabel::OBSquarePlanarConfig((const OpenBabel::OBSquarePlanarConfig &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarStereo_1GetConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSquarePlanarStereo *arg1 = (OpenBabel::OBSquarePlanarStereo *) 0 ;
  OpenBabel::OBSquarePlanarConfig result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSquarePlanarStereo **)&jarg1;  result = OpenBabel_OBSquarePlanarStereo_GetConfig__SWIG_0(arg1);
  *(OpenBabel::OBSquarePlanarConfig **)&jresult = new OpenBabel::OBSquarePlanarConfig((const OpenBabel::OBSquarePlanarConfig &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarStereo_1GetConfig_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ; OpenBabel::OBSquarePlanarStereo *arg1 = (OpenBabel::OBSquarePlanarStereo *) 0 ; unsigned long arg2 ;
  OpenBabel::OBStereo::Shape arg3 ; OpenBabel::OBSquarePlanarConfig result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSquarePlanarStereo **)&jarg1;  arg2 = (unsigned long)jarg2;  arg3 = (OpenBabel::OBStereo::Shape)jarg3; 
  result = OpenBabel_OBSquarePlanarStereo_GetConfig__SWIG_2(arg1,arg2,arg3);
  *(OpenBabel::OBSquarePlanarConfig **)&jresult = new OpenBabel::OBSquarePlanarConfig((const OpenBabel::OBSquarePlanarConfig &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarStereo_1GetConfig_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; OpenBabel::OBSquarePlanarStereo *arg1 = (OpenBabel::OBSquarePlanarStereo *) 0 ; unsigned long arg2 ;
  OpenBabel::OBSquarePlanarConfig result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSquarePlanarStereo **)&jarg1;  arg2 = (unsigned long)jarg2; 
  result = OpenBabel_OBSquarePlanarStereo_GetConfig__SWIG_2(arg1,arg2);
  *(OpenBabel::OBSquarePlanarConfig **)&jresult = new OpenBabel::OBSquarePlanarConfig((const OpenBabel::OBSquarePlanarConfig &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralConfig_1center_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBTetrahedralConfig *arg1 = (OpenBabel::OBTetrahedralConfig *) 0 ; unsigned long arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBTetrahedralConfig **)&jarg1;  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->center = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralConfig_1center_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBTetrahedralConfig *arg1 = (OpenBabel::OBTetrahedralConfig *) 0 ; unsigned long result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTetrahedralConfig **)&jarg1; 
  result = (unsigned long) ((arg1)->center); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralConfig_1from_1or_1towards_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBTetrahedralConfig *arg1 = (OpenBabel::OBTetrahedralConfig *) 0 ; unsigned long arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBTetrahedralConfig **)&jarg1;  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->from_or_towards = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralConfig_1from_1or_1towards_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBTetrahedralConfig *arg1 = (OpenBabel::OBTetrahedralConfig *) 0 ; unsigned long result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTetrahedralConfig **)&jarg1; 
  result = (unsigned long) ((arg1)->from_or_towards); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralConfig_1refs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBTetrahedralConfig *arg1 = (OpenBabel::OBTetrahedralConfig *) 0 ; OpenBabel::OBStereo::Refs *arg2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTetrahedralConfig **)&jarg1; 
  arg2 = *(OpenBabel::OBStereo::Refs **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereo::Refs const & reference is null");
    return ; }   if (arg1) (arg1)->refs = *arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralConfig_1refs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBTetrahedralConfig *arg1 = (OpenBabel::OBTetrahedralConfig *) 0 ;
  OpenBabel::OBStereo::Refs *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBTetrahedralConfig **)&jarg1;  result = (OpenBabel::OBStereo::Refs *) & ((arg1)->refs);
  *(OpenBabel::OBStereo::Refs **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralConfig_1winding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBTetrahedralConfig *arg1 = (OpenBabel::OBTetrahedralConfig *) 0 ; OpenBabel::OBStereo::Winding arg2 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTetrahedralConfig **)&jarg1;  arg2 = (OpenBabel::OBStereo::Winding)jarg2; 
  if (arg1) (arg1)->winding = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralConfig_1winding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBTetrahedralConfig *arg1 = (OpenBabel::OBTetrahedralConfig *) 0 ;
  OpenBabel::OBStereo::Winding result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTetrahedralConfig **)&jarg1; 
  result = (OpenBabel::OBStereo::Winding) ((arg1)->winding); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralConfig_1view_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBTetrahedralConfig *arg1 = (OpenBabel::OBTetrahedralConfig *) 0 ; OpenBabel::OBStereo::View arg2 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTetrahedralConfig **)&jarg1;  arg2 = (OpenBabel::OBStereo::View)jarg2; 
  if (arg1) (arg1)->view = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralConfig_1view_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBTetrahedralConfig *arg1 = (OpenBabel::OBTetrahedralConfig *) 0 ;
  OpenBabel::OBStereo::View result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTetrahedralConfig **)&jarg1; 
  result = (OpenBabel::OBStereo::View) ((arg1)->view); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralConfig_1specified_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBTetrahedralConfig *arg1 = (OpenBabel::OBTetrahedralConfig *) 0 ; bool arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBTetrahedralConfig **)&jarg1;  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->specified = arg2; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralConfig_1specified_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBTetrahedralConfig *arg1 = (OpenBabel::OBTetrahedralConfig *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBTetrahedralConfig **)&jarg1;  result = (bool) ((arg1)->specified);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBTetrahedralConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBTetrahedralConfig *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBTetrahedralConfig *)new OpenBabel::OBTetrahedralConfig();
  *(OpenBabel::OBTetrahedralConfig **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBTetrahedralConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBTetrahedralConfig *arg1 = (OpenBabel::OBTetrahedralConfig *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBTetrahedralConfig **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransConfig_1begin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBCisTransConfig *arg1 = (OpenBabel::OBCisTransConfig *) 0 ; unsigned long arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBCisTransConfig **)&jarg1;  arg2 = (unsigned long)jarg2;  if (arg1) (arg1)->begin = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransConfig_1begin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBCisTransConfig *arg1 = (OpenBabel::OBCisTransConfig *) 0 ; unsigned long result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBCisTransConfig **)&jarg1;  result = (unsigned long) ((arg1)->begin);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransConfig_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBCisTransConfig *arg1 = (OpenBabel::OBCisTransConfig *) 0 ; unsigned long arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBCisTransConfig **)&jarg1;  arg2 = (unsigned long)jarg2;  if (arg1) (arg1)->end = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransConfig_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBCisTransConfig *arg1 = (OpenBabel::OBCisTransConfig *) 0 ; unsigned long result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBCisTransConfig **)&jarg1;  result = (unsigned long) ((arg1)->end);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransConfig_1refs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBCisTransConfig *arg1 = (OpenBabel::OBCisTransConfig *) 0 ; OpenBabel::OBStereo::Refs *arg2 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBCisTransConfig **)&jarg1;  arg2 = *(OpenBabel::OBStereo::Refs **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereo::Refs const & reference is null");
    return ; }   if (arg1) (arg1)->refs = *arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransConfig_1refs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBCisTransConfig *arg1 = (OpenBabel::OBCisTransConfig *) 0 ;
  OpenBabel::OBStereo::Refs *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBCisTransConfig **)&jarg1; 
  result = (OpenBabel::OBStereo::Refs *) & ((arg1)->refs); *(OpenBabel::OBStereo::Refs **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransConfig_1shape_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBCisTransConfig *arg1 = (OpenBabel::OBCisTransConfig *) 0 ; OpenBabel::OBStereo::Shape arg2 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBCisTransConfig **)&jarg1;  arg2 = (OpenBabel::OBStereo::Shape)jarg2; 
  if (arg1) (arg1)->shape = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransConfig_1shape_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBCisTransConfig *arg1 = (OpenBabel::OBCisTransConfig *) 0 ; OpenBabel::OBStereo::Shape result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBCisTransConfig **)&jarg1; 
  result = (OpenBabel::OBStereo::Shape) ((arg1)->shape); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransConfig_1specified_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBCisTransConfig *arg1 = (OpenBabel::OBCisTransConfig *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBCisTransConfig **)&jarg1;  arg2 = jarg2 ? true : false;  if (arg1) (arg1)->specified = arg2; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransConfig_1specified_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBCisTransConfig *arg1 = (OpenBabel::OBCisTransConfig *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBCisTransConfig **)&jarg1;  result = (bool) ((arg1)->specified);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBCisTransConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBCisTransConfig *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBCisTransConfig *)new OpenBabel::OBCisTransConfig();
  *(OpenBabel::OBCisTransConfig **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBCisTransConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBCisTransConfig *arg1 = (OpenBabel::OBCisTransConfig *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBCisTransConfig **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarConfig_1center_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBSquarePlanarConfig *arg1 = (OpenBabel::OBSquarePlanarConfig *) 0 ; unsigned long arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBSquarePlanarConfig **)&jarg1;  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->center = arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarConfig_1center_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSquarePlanarConfig *arg1 = (OpenBabel::OBSquarePlanarConfig *) 0 ; unsigned long result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSquarePlanarConfig **)&jarg1; 
  result = (unsigned long) ((arg1)->center); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarConfig_1refs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBSquarePlanarConfig *arg1 = (OpenBabel::OBSquarePlanarConfig *) 0 ; OpenBabel::OBStereo::Refs *arg2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSquarePlanarConfig **)&jarg1; 
  arg2 = *(OpenBabel::OBStereo::Refs **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBStereo::Refs const & reference is null");
    return ; }   if (arg1) (arg1)->refs = *arg2; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarConfig_1refs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OpenBabel::OBSquarePlanarConfig *arg1 = (OpenBabel::OBSquarePlanarConfig *) 0 ;
  OpenBabel::OBStereo::Refs *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OpenBabel::OBSquarePlanarConfig **)&jarg1;  result = (OpenBabel::OBStereo::Refs *) & ((arg1)->refs);
  *(OpenBabel::OBStereo::Refs **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarConfig_1shape_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBSquarePlanarConfig *arg1 = (OpenBabel::OBSquarePlanarConfig *) 0 ; OpenBabel::OBStereo::Shape arg2 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSquarePlanarConfig **)&jarg1;  arg2 = (OpenBabel::OBStereo::Shape)jarg2; 
  if (arg1) (arg1)->shape = arg2; }
SWIGEXPORT jint JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarConfig_1shape_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; OpenBabel::OBSquarePlanarConfig *arg1 = (OpenBabel::OBSquarePlanarConfig *) 0 ;
  OpenBabel::OBStereo::Shape result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSquarePlanarConfig **)&jarg1; 
  result = (OpenBabel::OBStereo::Shape) ((arg1)->shape); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarConfig_1specified_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBSquarePlanarConfig *arg1 = (OpenBabel::OBSquarePlanarConfig *) 0 ; bool arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OpenBabel::OBSquarePlanarConfig **)&jarg1;  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->specified = arg2; }
SWIGEXPORT jboolean JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarConfig_1specified_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; OpenBabel::OBSquarePlanarConfig *arg1 = (OpenBabel::OBSquarePlanarConfig *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OpenBabel::OBSquarePlanarConfig **)&jarg1; 
  result = (bool) ((arg1)->specified); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_new_1OBSquarePlanarConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; OpenBabel::OBSquarePlanarConfig *result = 0 ; (void)jenv; (void)jcls;
  result = (OpenBabel::OBSquarePlanarConfig *)new OpenBabel::OBSquarePlanarConfig();
  *(OpenBabel::OBSquarePlanarConfig **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_openbabel_openbabel_1javaJNI_delete_1OBSquarePlanarConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSquarePlanarConfig *arg1 = (OpenBabel::OBSquarePlanarConfig *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(OpenBabel::OBSquarePlanarConfig **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomicHeatOfFormationTable_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGlobalDataBase **)&baseptr = *(OpenBabel::OBAtomicHeatOfFormationTable **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTypeTable_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGlobalDataBase **)&baseptr = *(OpenBabel::OBTypeTable **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidueData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGlobalDataBase **)&baseptr = *(OpenBabel::OBResidueData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCommentData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBCommentData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBExternalBondData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBExternalBondData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPairData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBPairData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSetData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBSetData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBVirtualBond_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBVirtualBond **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRingData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBRingData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBUnitCell_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBUnitCell **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBConformerData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSymmetryData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBSymmetryData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTorsionData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBTorsionData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAngleData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBAngleData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSerialNums_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBSerialNums **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBVibrationData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBVibrationData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDOSData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBDOSData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOrbitalData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBOrbitalData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBElectronicTransitionData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBElectronicTransitionData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotationData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBRotationData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBVectorData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBVectorData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMatrixData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBMatrixData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFreeGrid_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBFreeGrid **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBPcharge_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBPcharge **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBGridData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBGridData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtomTyper_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGlobalDataBase **)&baseptr = *(OpenBabel::OBAtomTyper **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRingTyper_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGlobalDataBase **)&baseptr = *(OpenBabel::OBRingTyper **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_CharPtrLess_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(std::binary_function< char const *,char const *,bool > **)&baseptr = *(OpenBabel::CharPtrLess **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_obLogBuf_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(std::stringbuf **)&baseptr = *(OpenBabel::obLogBuf **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFormat_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBPlugin **)&baseptr = *(OpenBabel::OBFormat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBResidue_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBBase **)&baseptr = *(OpenBabel::OBResidue **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBAtom_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBBase **)&baseptr = *(OpenBabel::OBAtom **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBBond_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBBase **)&baseptr = *(OpenBabel::OBBond **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBReaction_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBBase **)&baseptr = *(OpenBabel::OBReaction **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMol_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBBase **)&baseptr = *(OpenBabel::OBMol **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_AliasData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::AliasData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFingerprint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBPlugin **)&baseptr = *(OpenBabel::OBFingerprint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBDescriptor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBPlugin **)&baseptr = *(OpenBabel::OBDescriptor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBConformerFilters_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBConformerFilter **)&baseptr = *(OpenBabel::OBConformerFilters **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStericConformerFilter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBConformerFilter **)&baseptr = *(OpenBabel::OBStericConformerFilter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRMSDConformerScore_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBConformerScore **)&baseptr = *(OpenBabel::OBRMSDConformerScore **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBEnergyConformerScore_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBConformerScore **)&baseptr = *(OpenBabel::OBEnergyConformerScore **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMinimizingEnergyConformerScore_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBConformerScore **)&baseptr = *(OpenBabel::OBMinimizingEnergyConformerScore **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBMinimizingRMSDConformerScore_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBConformerScore **)&baseptr = *(OpenBabel::OBMinimizingRMSDConformerScore **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation3_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBFFCalculation2 **)&baseptr = *(OpenBabel::OBFFCalculation3 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBFFCalculation4_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBFFCalculation3 **)&baseptr = *(OpenBabel::OBFFCalculation4 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBForceField_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBPlugin **)&baseptr = *(OpenBabel::OBForceField **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBOp_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBPlugin **)&baseptr = *(OpenBabel::OBOp **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBChargeModel_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBPlugin **)&baseptr = *(OpenBabel::OBChargeModel **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBStereoBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBStereoBase **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotorRules_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGlobalDataBase **)&baseptr = *(OpenBabel::OBRotorRules **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBRotamerList_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBRotamerList **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetraNonPlanarStereo_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBStereoBase **)&baseptr = *(OpenBabel::OBTetraNonPlanarStereo **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetraPlanarStereo_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBStereoBase **)&baseptr = *(OpenBabel::OBTetraPlanarStereo **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBTetrahedralStereo_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBTetraNonPlanarStereo **)&baseptr = *(OpenBabel::OBTetrahedralStereo **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBCisTransStereo_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBTetraPlanarStereo **)&baseptr = *(OpenBabel::OBCisTransStereo **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_openbabel_openbabel_1javaJNI_OBSquarePlanarStereo_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBTetraPlanarStereo **)&baseptr = *(OpenBabel::OBSquarePlanarStereo **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

